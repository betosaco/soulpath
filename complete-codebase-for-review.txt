# WELLNESS MONOREPO - COMPLETE CODEBASE FOR CODE REVIEW
# Generated: 2025-09-15T20:54:49.679Z
# Focus: Complete code review with authentication refactoring changes and new teacher/service features

## üîê AUTHENTICATION REFACTORING HIGHLIGHTS

This export includes the complete authentication refactoring implementation with full code:

### Key Changes Made:
1. ‚úÖ Removed hardcoded admin emails from useAuth.tsx and lib/auth.ts
2. ‚úÖ Created Next.js middleware for centralized route protection
3. ‚úÖ Implemented admin API client with automatic token handling
4. ‚úÖ Database as single source of truth for user roles
5. ‚úÖ Example secure admin API endpoint and dashboard

### Security Improvements:
- Eliminated hardcoded admin email vulnerabilities
- Centralized route protection via middleware
- No client-side role checking
- Automatic protection for all admin routes

## üè¢ TEACHER PROFILE & SERVICE MANAGEMENT SYSTEM

This export includes the complete teacher profile and service management system:

### New Features Added:
1. ‚úÖ Venue Management System
   - Venue CRUD operations with capacity and amenities
   - Venue scheduling and availability management
   - Multi-venue support with location details

2. ‚úÖ Teacher Profile System
   - Enhanced teacher profiles with bio, media, and social links
   - Teacher certifications and credentials management
   - Teaching preferences and availability settings
   - SEO-friendly teacher profile pages

3. ‚úÖ Service Type Management
   - Service types (classes, workshops, training programs)
   - Rich media support (images, videos, content)
   - Service pricing and difficulty levels
   - Package-service relationships

4. ‚úÖ Teacher Scheduling System
   - Teacher-specific schedules tied to venues
   - Service type integration with teacher schedules
   - Flexible booking system for teacher services

5. ‚úÖ Admin Dashboard Integration
   - Complete admin UI for managing venues, teachers, and services
   - Centralized styling with CSS modules
   - Real-time data management and validation

### Complete Code Included:
- middleware.ts (NEW) - Centralized route protection with full implementation
- lib/auth.ts (UPDATED) - Refactored auth utilities with complete code
- hooks/useAuth.tsx (UPDATED) - Simplified admin logic with full implementation
- lib/api/admin.ts (NEW) - Admin API client with complete methods
- app/api/admin/stats/route.ts (NEW) - Example secure endpoint with full code
- app/(admin)/dashboard/page.tsx (NEW) - Admin dashboard with complete implementation

### NEW: Teacher & Service Management Code:
- prisma/schema.prisma (UPDATED) - Enhanced schema with Teacher, Venue, ServiceType models
- app/api/admin/venues/route.ts (NEW) - Venue management API
- app/api/admin/teachers/route.ts (NEW) - Teacher management API
- app/api/admin/teacher-schedules/route.ts (NEW) - Teacher scheduling API
- app/api/admin/service-types/route.ts (NEW) - Service type management API
- app/api/admin/package-services/route.ts (NEW) - Package-service relationships API
- app/api/admin/teacher-certifications/route.ts (NEW) - Teacher certifications API
- app/api/admin/media/route.ts (NEW) - Media upload API
- app/api/services/route.ts (NEW) - Public services API
- app/api/teachers/route.ts (NEW) - Public teachers API
- components/admin/VenueManagement.tsx (NEW) - Venue management UI
- components/admin/TeacherManagement.tsx (NEW) - Teacher management UI
- components/admin/TeacherScheduleManagement.tsx (NEW) - Teacher scheduling UI
- components/admin/ServiceTypeManagement.tsx (NEW) - Service type management UI
- components/ServiceDisplay.tsx (NEW) - Service display components
- components/ServiceGrid.tsx (NEW) - Service grid component
- components/ServiceDetailPage.tsx (NEW) - Service detail page
- components/TeacherProfilePage.tsx (NEW) - Teacher profile page
- components/TeacherGrid.tsx (NEW) - Teacher grid component
- components/admin/AdminSidebar.tsx (UPDATED) - Enhanced admin navigation
- components/admin/AdminMainContent.tsx (UPDATED) - Enhanced admin content
- styles/admin-dashboard.css (NEW) - Admin dashboard styles
- styles/service-display.css (NEW) - Service display styles
- styles/teacher-profile.css (NEW) - Teacher profile styles
- All other essential application code for complete review

================================================================================


================================================================================
FILE: frontend/middleware.ts
SIZE: 6.6KB
TYPE: .ts
================================================================================

import { NextRequest, NextResponse } from 'next/server';
import { jwtVerify } from 'jose';
const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';

// Define protected admin routes
const ADMIN_ROUTES = [
  '/admin',
  '/api/admin'
];

// Define public routes that should be accessible without authentication
const PUBLIC_ROUTES = [
  '/',
  '/login',
  '/packages',
  '/api/auth/login',
  '/api/auth/verify',
  '/api/packages',
  '/api/health',
  '/api/content',
  '/api/sections',
  '/api/schedule-slots',
  '/api/schedules',
  '/api/booking',
  '/api/feedback',
  '/api/bug-reports',
  '/api/otp/send',
  '/api/otp/verify',
  '/api/izipay',
  '/api/stripe',
  '/api/telegram/webhook',
  '/api/whatsapp/webhook',
  '/api/whatsapp-business/webhook'
];

interface JWTPayload {
  userId: string;
  email: string;
  role?: string;
  iat?: number;
  exp?: number;
}

/**
 * Extract JWT token from Authorization header or cookies
 */
function extractToken(request: NextRequest): string | null {
  // Try Authorization header first
  const authHeader = request.headers.get('Authorization');
  console.log('üîê Middleware: Authorization header:', authHeader);
  if (authHeader && authHeader.startsWith('Bearer ')) {
    const token = authHeader.replace('Bearer ', '');
    console.log('üîê Middleware: Token extracted from header:', token.substring(0, 20) + '...');
    return token;
  }

  // Try cookies as fallback
  const tokenFromCookie = request.cookies.get('auth_token')?.value;
  console.log('üîê Middleware: Token from cookie:', tokenFromCookie ? tokenFromCookie.substring(0, 20) + '...' : 'none');
  if (tokenFromCookie) {
    return tokenFromCookie;
  }

  console.log('üîê Middleware: No token found');
  return null;
}

/**
 * Verify JWT token using jose library (Edge Runtime compatible)
 */
async function verifyToken(token: string): Promise<JWTPayload | null> {
  try {
    console.log('üîê Middleware: Verifying token:', token.substring(0, 20) + '...');
    
    // Create secret key for jose
    const secret = new TextEncoder().encode(JWT_SECRET);
    
    // Verify JWT token
    const { payload } = await jwtVerify(token, secret);
    console.log('üîê Middleware: JWT payload:', payload);
    
    if (!payload || !payload.userId) {
      console.log('üîê Middleware: Invalid JWT token or missing userId');
      return null;
    }

    // For now, just verify the JWT without database check
    // TODO: Add database verification in production
    console.log('üîê Middleware: JWT verified successfully');
    return {
      userId: payload.userId as string,
      email: payload.email as string,
      role: payload.role as string || 'user'
    };
  } catch (error) {
    console.log('üîê Middleware: JWT verification error:', error);
    return null;
  }
}

/**
 * Check if the current path matches any of the protected admin routes
 */
function isAdminRoute(pathname: string): boolean {
  return ADMIN_ROUTES.some(route => pathname.startsWith(route));
}

/**
 * Check if the current path is a public route
 */
function isPublicRoute(pathname: string): boolean {
  return PUBLIC_ROUTES.some(route => pathname.startsWith(route));
}

export async function middleware(request: NextRequest) {
  const { pathname } = request.nextUrl;
  
  console.log('üîê Middleware: Processing request to', pathname);

  // Check if this is an admin route FIRST
  if (isAdminRoute(pathname)) {
    console.log('üîê Middleware: Admin route detected, checking authentication');

    // Extract token
    const token = extractToken(request);
    if (!token) {
      console.log('üîê Middleware: No token found, redirecting to login');
      
      // For API routes, return 401
      if (pathname.startsWith('/api/')) {
        return NextResponse.json(
          { 
            code: 401, 
            message: 'Authentication required',
            error: 'Missing or invalid authorization token' 
          },
          { status: 401 }
        );
      }
      
      // For page routes, redirect to login
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // Verify token and get user data
    const userData = await verifyToken(token);
    if (!userData) {
      console.log('üîê Middleware: Token verification failed, redirecting to login');
      
      // For API routes, return 401
      if (pathname.startsWith('/api/')) {
        return NextResponse.json(
          { 
            code: 401, 
            message: 'Authentication required',
            error: 'Invalid or expired token' 
          },
          { status: 401 }
        );
      }
      
      // For page routes, redirect to login
      const loginUrl = new URL('/login', request.url);
      loginUrl.searchParams.set('redirect', pathname);
      return NextResponse.redirect(loginUrl);
    }

    // Check if user has admin role
    if (userData.role !== 'admin') {
      console.log('üîê Middleware: User is not admin, role:', userData.role);
      
      // For API routes, return 403
      if (pathname.startsWith('/api/')) {
        return NextResponse.json(
          { 
            code: 403, 
            message: 'Access denied',
            error: 'Admin privileges required' 
          },
          { status: 403 }
        );
      }
      
      // For page routes, redirect to account page
      const accountUrl = new URL('/account', request.url);
      return NextResponse.redirect(accountUrl);
    }

    console.log('üîê Middleware: Admin access granted for user:', userData.email);
    
    // Add user data to request headers for use in API routes
    const requestHeaders = new Headers(request.headers);
    requestHeaders.set('x-user-id', userData.userId);
    requestHeaders.set('x-user-email', userData.email);
    requestHeaders.set('x-user-role', userData.role);

    return NextResponse.next({
      request: {
        headers: requestHeaders,
      },
    });
  }

  // Skip middleware for public routes
  if (isPublicRoute(pathname)) {
    console.log('üîê Middleware: Public route, skipping auth check');
    return NextResponse.next();
  }

  // For non-admin routes, continue without additional checks
  console.log('üîê Middleware: Non-admin route, continuing');
  return NextResponse.next();
}

// Configure which paths the middleware should run on
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico (favicon file)
     * - public folder
     */
    '/((?!_next/static|_next/image|favicon.ico|public/).*)',
  ],
};



================================================================================
FILE: frontend/.eslintrc.json
SIZE: 0.1KB
TYPE: .json
================================================================================

{
  "extends": [
    "next/core-web-vitals",
    "next/typescript"
  ],
  "rules": {
    "@typescript-eslint/no-explicit-any": "warn"
  }
}



================================================================================
FILE: frontend/migrate-email-config.sql
SIZE: 0.6KB
TYPE: .sql
================================================================================

-- Add new Brevo API fields to email_config table
ALTER TABLE email_config 
ADD COLUMN IF NOT EXISTS brevo_api_key TEXT,
ADD COLUMN IF NOT EXISTS sender_email TEXT,
ADD COLUMN IF NOT EXISTS sender_name TEXT,
ADD COLUMN IF NOT EXISTS admin_email TEXT;

-- Update existing records to have empty values for new fields
UPDATE email_config 
SET 
  brevo_api_key = COALESCE(brevo_api_key, ''),
  sender_email = COALESCE(sender_email, ''),
  sender_name = COALESCE(sender_name, ''),
  admin_email = COALESCE(admin_email, '')
WHERE brevo_api_key IS NULL 
   OR sender_email IS NULL 
   OR sender_name IS NULL 
   OR admin_email IS NULL;



================================================================================
FILE: frontend/next-env.d.ts
SIZE: 0.3KB
TYPE: .ts
================================================================================

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference path="./.next/types/routes.d.ts" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.



================================================================================
FILE: frontend/next.config.js
SIZE: 1.1KB
TYPE: .js
================================================================================

import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

/** @type {import('next').NextConfig} */
const nextConfig = {
  outputFileTracingRoot: path.resolve(__dirname),
  experimental: {
    // Enable experimental features if needed
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'images.unsplash.com',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'unsplash.com',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'via.placeholder.com',
        port: '',
        pathname: '/**',
      },
      {
        protocol: 'https',
        hostname: 'picsum.photos',
        port: '',
        pathname: '/**',
      },
    ],
  },
  webpack: (config) => {
    // Configure webpack to handle module resolution
    config.resolve.alias = {
      ...config.resolve.alias,
      '@': path.resolve(__dirname),
    };
    return config;
  },
};

export default nextConfig;




================================================================================
FILE: frontend/next.config.ts
SIZE: 1.7KB
TYPE: .ts
================================================================================

import type { NextConfig } from 'next'
import webpack from 'webpack'

const nextConfig: NextConfig = {
  // Remove turbopack config that might cause Vercel build issues
  // output: 'standalone', // This can cause issues in Vercel
  outputFileTracingRoot: process.cwd(),
  webpack: (config) => {
    // Handle WebAssembly modules
    config.experiments = {
      ...config.experiments,
      asyncWebAssembly: true,
    }
    
    // Handle .wasm files
    config.module.rules.push({
      test: /\.wasm$/,
      type: 'webassembly/async',
    })

    // Fix for sweph-wasm module resolution
    config.resolve.fallback = {
      ...config.resolve.fallback,
      fs: false,
      path: false,
      crypto: false,
      stream: false,
      util: false,
      buffer: false,
      process: false,
      os: false,
      url: false,
      querystring: false,
      zlib: false,
      http: false,
      https: false,
      assert: false,
      constants: false,
      events: false,
      domain: false,
      punycode: false,
      string_decoder: false,
      timers: false,
      tty: false,
      vm: false,
      worker_threads: false,
      child_process: false,
      cluster: false,
      dgram: false,
      dns: false,
      net: false,
      readline: false,
      repl: false,
    }

    // Handle sweph-wasm specific issues
    config.plugins.push(
      new webpack.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify(process.env.NODE_ENV),
      })
    )

    return config
  },
  images: {
    remotePatterns: [
      {
        protocol: 'https',
        hostname: 'hwxrstqeuouefyrwjsjt.supabase.co', // Your Supabase project hostname
      },
      {
        protocol: 'https',
        hostname: 'localhost',
      },
    ],
  },
}

export default nextConfig



================================================================================
FILE: backend/package.json
SIZE: 0.6KB
TYPE: .json
================================================================================

{
  "name": "wellness-backend",
  "version": "1.0.0",
  "description": "Rasa conversational AI backend for wellness platform",
  "main": "start-rasa.sh",
  "scripts": {
    "dev": "bash start-rasa.sh",
    "start": "bash start-rasa.sh",
    "build": "echo 'Rasa backend - no build step required'",
    "deploy": "echo 'Deploy to Render using render.yaml'",
    "train": "cd rasa && rasa train",
    "test": "cd rasa && rasa test",
    "shell": "cd rasa && rasa shell",
    "run": "cd rasa && rasa run"
  },
  "dependencies": {},
  "engines": {
    "node": ">=18.0.0",
    "python": ">=3.8.0"
  }
}



================================================================================
FILE: backend/.DS_Store
SIZE: 8.0KB
TYPE: 
================================================================================

   Bud1                                                                     lg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              @      ÔøΩ                                        @      ÔøΩ                                          @      ÔøΩ                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  r a s alg1Scomp    ÔøΩsÔøΩÔøΩ    r a s alsvCblob  Ibplist00ÔøΩ	
XYZ[]_viewOptionsVersion_showIconPreviewWcolumns_calculateAllSizes_scrollPositionYXtextSize_scrollPositionXZsortColumn_useRelativeDatesXiconSize	ÔøΩ!%*/49>CGOSÔøΩZidentifierUwidthYascendingWvisibleTname%		ÔøΩ#XubiquityÔøΩ\dateModifiedÔøΩ	ÔøΩ"[dateCreatedÔøΩ&'Tsizea	ÔøΩ+,Tkinds		ÔøΩ01Ulabeld	ÔøΩ56WversionK	ÔøΩ:;Xcomments,	ÔøΩ?@^dateLastOpenedÔøΩÔøΩDYdateAdded	ÔøΩHIJLNWvisibleUwidthYascendingÔøΩZshareOwnerÔøΩHIJLR_shareLastEditorÔøΩHIJLV_invitationStatus#@ÔøΩ(     #@(      #        Tname	#@0         2 D L ` r { ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ	(*+,5ABCLQSTU^cefgpvxyzÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ$-./BCLU^cd             ^              m    r a s alsvpblob  ÔøΩbplist00ÔøΩ	
GHIJL_viewOptionsVersion_showIconPreviewWcolumns_calculateAllSizes_scrollPositionYXtextSize_scrollPositionXZsortColumn_useRelativeDatesXiconSize	ÔøΩ %*/47<AXcommentsUlabelWversion[dateCreatedTsize\dateModifiedTkindTname^dateLastOpenedÔøΩWvisibleUwidthYascendingUindex,	ÔøΩ"$d	ÔøΩ')K	ÔøΩ,.ÔøΩÔøΩ13	aÔøΩ,	ÔøΩ9;	s	ÔøΩ>@	%	 ÔøΩCEÔøΩ#@ÔøΩ(     #@(      #        Tname	#@0         2 D L ` r { ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ	!)/9?@CDFOPRSU^_abdmnpqs|}ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ             M              ÔøΩ    r a s amoDDblob   ÔøΩONxÔøΩ9ÔøΩA    r a s amodDblob   ÔøΩONxÔøΩ9ÔøΩA    r a s aph1Scomp    ÿ¶ÔøΩ     r a s avSrnlong                                                                                                                                                                                                                                                                                                                                                              E                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         DSDB                                 `          ÔøΩ                                        @      ÔøΩ                                          @      ÔøΩ                                          @       )K	ÔøΩ,.ÔøΩÔøΩ13	aÔøΩ,	ÔøΩ9;	s	ÔøΩ>@	%	 ÔøΩCEÔøΩ#@ÔøΩ(     #@(      #        Tname	#@0         2 D L ` r { ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ ÔøΩ	!)/9?@CDFOPRSU^_abdmnpqs|}ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ             M              ÔøΩ    r a s amoDDblob   ÔøΩONxÔøΩ9ÔøΩA    r a s amodDblob   ÔøΩONxÔøΩ9ÔøΩA    r a s aph1Scomp    ÿ¶ÔøΩ     r a s avSrnlong                                                                                                                                                                                                                                                                                                                                                  


================================================================================
FILE: backend/.dockerignore
SIZE: 0.8KB
TYPE: 
================================================================================

# Git
.git
.gitignore
.gitattributes

# Documentation
README.md
*.md
docs/

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
env/
venv/
ENV/
env.bak/
venv.bak/
.venv/
rasa_env/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Logs
*.log
logs/
ngrok.log

# Temporary files
*.tmp
*.temp
.cache/

# Node modules (if any)
node_modules/
npm-debug.log*

# Build artifacts
build/
dist/
*.egg-info/

# Test files
tests/
test_*.py
*_test.py

# Coverage reports
.coverage
htmlcov/
.pytest_cache/

# Jupyter notebooks
*.ipynb
.ipynb_checkpoints/

# Environment files
.env
.env.local
.env.*.local

# Large model files (will be downloaded during build)
models/*.tar.gz

# Results and outputs
results/
outputs/



================================================================================
FILE: backend/Dockerfile.rasa
SIZE: 1.5KB
TYPE: .rasa
================================================================================

# Optimized Rasa Dockerfile for Render deployment
FROM python:3.10-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Set environment variables for optimization
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ENV NUMEXPR_NUM_THREADS=1
ENV OPENBLAS_NUM_THREADS=1

# Copy requirements first for better caching
COPY rasa/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir tensorflow-cpu==2.13.0 && \
    pip cache purge

# Download spaCy model
RUN python -c "import spacy.cli; spacy.cli.download('es_core_news_sm')" || \
    python -c "import spacy.cli; spacy.cli.download('en_core_web_sm')"

# Copy Rasa project
COPY rasa/ ./

# Create necessary directories
RUN mkdir -p models logs

# Copy startup script
COPY start-rasa.sh /app/start-rasa.sh
RUN chmod +x /app/start-rasa.sh

# Create non-root user for security
RUN useradd -m -u 1000 rasa && \
    chown -R rasa:rasa /app
USER rasa

# Expose port (Render will override with PORT env var)
EXPOSE 5005

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5005/webhooks/rest/ || exit 1

# Start Rasa server
CMD ["/app/start-rasa.sh"]



================================================================================
FILE: backend/RENDER_DEPLOYMENT.md
SIZE: 4.2KB
TYPE: .md
================================================================================

# Rasa Server Docker Deployment on Render

This guide explains how to deploy the Rasa server to Render using Docker.

## üöÄ Quick Start

### Prerequisites

1. **GitHub/GitLab Repository**: Your code should be in a Git repository
2. **Render Account**: Sign up at [render.com](https://render.com)
3. **Trained Rasa Model**: Ensure you have a trained model in the `models/` directory

### Deployment Steps

1. **Push your code to Git**:
   ```bash
   git add .
   git commit -m "Add Docker configuration for Render deployment"
   git push origin main
   ```

2. **Create a new Web Service on Render**:
   - Go to [Render Dashboard](https://dashboard.render.com)
   - Click "New +" ‚Üí "Web Service"
   - Connect your repository

3. **Configure the service**:
   - **Name**: `rasa-server` (or your preferred name)
   - **Runtime**: `Docker`
   - **Dockerfile Path**: `./Dockerfile.rasa`
   - **Docker Context**: `.`
   - **Plan**: `Starter` (free tier)

4. **Set Environment Variables**:
   ```
   PORT=5005
   PYTHONUNBUFFERED=1
   TF_CPP_MIN_LOG_LEVEL=2
   OMP_NUM_THREADS=1
   MKL_NUM_THREADS=1
   NUMEXPR_NUM_THREADS=1
   OPENBLAS_NUM_THREADS=1
   ```

5. **Deploy**: Click "Create Web Service"

## üîß Configuration Files

### Dockerfile.rasa
- Optimized for Render's environment
- Uses Python 3.10-slim base image
- Includes all necessary dependencies
- Memory-optimized for cloud deployment

### render.yaml
- Defines both Rasa server and actions server
- Uses Docker runtime
- Includes health checks
- Optimized for Render's infrastructure

### docker-compose.yml
- For local testing and development
- Includes nginx reverse proxy
- Easy local development setup

## üß™ Local Testing

Before deploying to Render, test locally:

```bash
# Build and test the Docker image
cd backend
./deploy-to-render.sh

# Or use docker-compose for full stack
docker-compose up --build
```

## üì° API Endpoints

Once deployed, your Rasa server will be available at:

- **Main API**: `https://your-app-name.onrender.com`
- **Webhooks**: `https://your-app-name.onrender.com/webhooks/rest/`
- **Health Check**: `https://your-app-name.onrender.com/webhooks/rest/`

## üîó Webhook Configuration

Update your webhook URLs in `credentials.yml`:

```yaml
telegram:
  access_token: "YOUR_BOT_TOKEN"
  verify: "YOUR_BOT_USERNAME"
  webhook_url: "https://your-app-name.onrender.com/webhooks/telegram/webhook"
```

## üêõ Troubleshooting

### Common Issues

1. **Build Fails**: Check that all dependencies are in `requirements.txt`
2. **Memory Issues**: The Dockerfile is optimized for memory usage
3. **Model Training**: Ensure you have a trained model in the `models/` directory
4. **Port Issues**: Render automatically sets the `PORT` environment variable

### Logs

Check Render logs for debugging:
- Go to your service dashboard
- Click on "Logs" tab
- Look for error messages or warnings

### Health Checks

The service includes health checks:
- Endpoint: `/webhooks/rest/`
- Interval: 30 seconds
- Timeout: 10 seconds

## üìä Monitoring

Render provides built-in monitoring:
- **Uptime**: Service availability
- **Response Time**: API response times
- **Logs**: Real-time log streaming
- **Metrics**: Resource usage

## üîÑ Updates

To update your deployment:
1. Push changes to your Git repository
2. Render automatically rebuilds and redeploys
3. Monitor logs for any issues

## üí∞ Cost Optimization

- **Starter Plan**: Free tier with limitations
- **Memory Usage**: Optimized for minimal memory footprint
- **CPU Usage**: Single-threaded configuration for efficiency

## üõ°Ô∏è Security

- **Non-root User**: Container runs as non-root user
- **Minimal Dependencies**: Only necessary packages included
- **Health Checks**: Automatic health monitoring
- **Environment Variables**: Sensitive data via environment variables

## üìù Notes

- The deployment includes both Rasa server and actions server
- Models are trained during deployment if not present
- The service is optimized for Render's infrastructure
- All logs are available in the Render dashboard

## üÜò Support

If you encounter issues:
1. Check the Render logs
2. Verify your configuration files
3. Test locally with Docker
4. Check the Rasa documentation
5. Contact Render support if needed



================================================================================
FILE: backend/deploy-to-render.sh
SIZE: 2.2KB
TYPE: .sh
================================================================================

#!/bin/bash

# Deploy Rasa server to Render
# This script helps with the deployment process

set -e

echo "üöÄ Deploying Rasa server to Render..."

# Check if we're in the right directory
if [ ! -f "Dockerfile.rasa" ]; then
    echo "‚ùå Error: Dockerfile.rasa not found. Please run this script from the backend directory."
    exit 1
fi

# Check if render.yaml exists
if [ ! -f "rasa/render.yaml" ]; then
    echo "‚ùå Error: render.yaml not found. Please ensure the file exists."
    exit 1
fi

echo "‚úÖ Found required files"

# Check if Docker is running
if ! docker info > /dev/null 2>&1; then
    echo "‚ùå Error: Docker is not running. Please start Docker and try again."
    exit 1
fi

echo "‚úÖ Docker is running"

# Build the Docker image locally to test
echo "üî® Building Docker image locally for testing..."
docker build -f Dockerfile.rasa -t rasa-server-test .

if [ $? -eq 0 ]; then
    echo "‚úÖ Docker build successful"
else
    echo "‚ùå Docker build failed"
    exit 1
fi

# Test the container
echo "üß™ Testing Docker container..."
docker run --rm -d --name rasa-test -p 5005:5005 rasa-server-test

# Wait for container to start
sleep 10

# Test health endpoint
if curl -f http://localhost:5005/webhooks/rest/ > /dev/null 2>&1; then
    echo "‚úÖ Container health check passed"
else
    echo "‚ö†Ô∏è Container health check failed, but continuing with deployment"
fi

# Clean up test container
docker stop rasa-test > /dev/null 2>&1 || true

echo ""
echo "üéâ Local testing completed successfully!"
echo ""
echo "üìã Next steps for Render deployment:"
echo "1. Push your code to GitHub/GitLab"
echo "2. Connect your repository to Render"
echo "3. Create a new Web Service in Render"
echo "4. Use the following settings:"
echo "   - Build Command: (leave empty for Docker)"
echo "   - Start Command: (leave empty for Docker)"
echo "   - Dockerfile Path: ./Dockerfile.rasa"
echo "   - Docker Context: ."
echo "5. Set environment variables as needed"
echo "6. Deploy!"
echo ""
echo "üîó Your Rasa server will be available at: https://your-app-name.onrender.com"
echo "üîó Actions server will be available at: https://your-actions-app-name.onrender.com"
echo ""
echo "üìù Don't forget to update your webhook URLs in credentials.yml!"



================================================================================
FILE: backend/docker-compose.yml
SIZE: 1.2KB
TYPE: .yml
================================================================================

version: '3.8'

services:
  rasa-server:
    build:
      context: .
      dockerfile: Dockerfile.rasa
    ports:
      - "5005:5005"
    environment:
      - PORT=5005
      - RASA_MODEL_SERVER=null
      - PYTHONUNBUFFERED=1
      - TF_CPP_MIN_LOG_LEVEL=2
    volumes:
      - ./rasa/models:/app/models
      - ./rasa/logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5005/webhooks/rest/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  rasa-actions:
    build:
      context: .
      dockerfile: Dockerfile.rasa
    command: ["python", "-m", "rasa", "run", "actions", "--port", "5055"]
    ports:
      - "5055:5055"
    environment:
      - PORT=5055
      - PYTHONUNBUFFERED=1
    volumes:
      - ./rasa:/app
    restart: unless-stopped
    depends_on:
      - rasa-server

  # Optional: Add a reverse proxy for production-like setup
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - rasa-server
      - rasa-actions
    restart: unless-stopped

networks:
  default:
    name: rasa-network



================================================================================
FILE: backend/meta-cli-setup.sh
SIZE: 5.5KB
TYPE: .sh
================================================================================

#!/bin/bash

# Meta WhatsApp Business API CLI Setup Script
# This script automates the setup of WhatsApp Business API integration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check if Python is available
check_python() {
    if command_exists python3; then
        PYTHON_CMD="python3"
    elif command_exists python; then
        PYTHON_CMD="python"
    else
        print_error "Python is not installed. Please install Python 3.7+ and try again."
        exit 1
    fi
    print_success "Python found: $PYTHON_CMD"
}

# Function to install Python dependencies
install_dependencies() {
    print_status "Installing Python dependencies..."
    
    if command_exists pip3; then
        PIP_CMD="pip3"
    elif command_exists pip; then
        PIP_CMD="pip"
    else
        print_error "pip is not installed. Please install pip and try again."
        exit 1
    fi
    
    $PIP_CMD install requests aiohttp sanic
    print_success "Dependencies installed successfully"
}

# Function to create Meta app
create_meta_app() {
    print_status "Creating Meta App configuration..."
    
    echo "To create a Meta App:"
    echo "1. Go to https://developers.facebook.com/"
    echo "2. Click 'My Apps' ‚Üí 'Create App'"
    echo "3. Choose 'Business' as app type"
    echo "4. Fill in app details and create"
    echo "5. Add 'WhatsApp' product to your app"
    echo ""
    
    read -p "Enter your Meta App ID: " META_APP_ID
    read -p "Enter your Meta App Secret: " META_APP_SECRET
    read -p "Enter your Meta Access Token: " META_ACCESS_TOKEN
    
    if [ -z "$META_APP_ID" ] || [ -z "$META_APP_SECRET" ] || [ -z "$META_ACCESS_TOKEN" ]; then
        print_error "All Meta credentials are required"
        exit 1
    fi
    
    # Save credentials to environment file
    cat > rasa/.env << EOF
# Meta App Credentials
META_ACCESS_TOKEN=$META_ACCESS_TOKEN
META_APP_ID=$META_APP_ID
META_APP_SECRET=$META_APP_SECRET

# WhatsApp Business API Credentials (will be filled by setup script)
WHATSAPP_ACCESS_TOKEN=$META_ACCESS_TOKEN
WHATSAPP_PHONE_NUMBER_ID=your_phone_number_id_here
WHATSAPP_BUSINESS_ACCOUNT_ID=your_business_account_id_here
WHATSAPP_VERIFY_TOKEN=your_verify_token_here
WHATSAPP_WEBHOOK_URL=https://your-domain.com/webhooks/whatsapp/webhook

# Rasa Configuration
RASA_URL=http://localhost:5005
RASA_MODEL=rasa
RASA_CONFIDENCE_THRESHOLD=0.7

# OpenRouter Configuration
OPENROUTER_API_KEY=your_openrouter_api_key_here
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_MODEL=meta-llama/llama-3.1-8b-instruct:free
OPENROUTER_TEMPERATURE=0.7
OPENROUTER_MAX_TOKENS=1000

# Logging Configuration
LOGGING_ENABLED=true
LOGGING_LEVEL=info
LOGGING_STORAGE=console
EOF
    
    print_success "Meta App credentials saved"
}

# Function to run the Python setup script
run_python_setup() {
    print_status "Running Meta WhatsApp setup script..."
    
    cd rasa
    $PYTHON_CMD ../setup-meta-whatsapp.py --interactive
    cd ..
    
    print_success "Meta WhatsApp setup completed"
}

# Function to test the integration
test_integration() {
    print_status "Testing WhatsApp integration..."
    
    if [ -f "rasa/.env" ]; then
        cd rasa
        $PYTHON_CMD ../test-whatsapp-integration.py
        cd ..
    else
        print_error "No .env file found. Please run setup first."
        exit 1
    fi
}

# Function to start Rasa with WhatsApp
start_rasa() {
    print_status "Starting Rasa with WhatsApp integration..."
    
    if [ -f "rasa/.env" ]; then
        ./start-whatsapp-rasa.sh
    else
        print_error "No .env file found. Please run setup first."
        exit 1
    fi
}

# Function to show help
show_help() {
    echo "Meta WhatsApp Business API CLI Setup"
    echo ""
    echo "Usage: $0 [COMMAND]"
    echo ""
    echo "Commands:"
    echo "  setup     - Run complete setup wizard"
    echo "  test      - Test the WhatsApp integration"
    echo "  start     - Start Rasa with WhatsApp integration"
    echo "  help      - Show this help message"
    echo ""
    echo "Examples:"
    echo "  $0 setup    # Run interactive setup"
    echo "  $0 test     # Test the integration"
    echo "  $0 start    # Start Rasa server"
}

# Main script logic
main() {
    echo "üöÄ Meta WhatsApp Business API CLI Setup"
    echo "======================================"
    echo ""
    
    case "${1:-setup}" in
        "setup")
            print_status "Starting Meta WhatsApp setup wizard..."
            check_python
            install_dependencies
            create_meta_app
            run_python_setup
            print_success "Setup completed successfully!"
            echo ""
            echo "Next steps:"
            echo "1. Configure your webhook URL in Meta Business Manager"
            echo "2. Test the integration: $0 test"
            echo "3. Start Rasa: $0 start"
            ;;
        "test")
            check_python
            test_integration
            ;;
        "start")
            start_rasa
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "Unknown command: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"



================================================================================
FILE: backend/nginx.conf
SIZE: 1.2KB
TYPE: .conf
================================================================================

events {
    worker_connections 1024;
}

http {
    upstream rasa_server {
        server rasa-server:5005;
    }
    
    upstream rasa_actions {
        server rasa-actions:5055;
    }

    server {
        listen 80;
        server_name localhost;

        # Rasa server endpoints
        location / {
            proxy_pass http://rasa_server;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
        }

        # Rasa actions endpoint
        location /webhook {
            proxy_pass http://rasa_actions;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}



================================================================================
FILE: backend/rasa/config.yml
SIZE: 2.1KB
TYPE: .yml
================================================================================

# Configuration for Rasa NLU and Core with spaCy
# https://rasa.com/docs/rasa/model-configuration/

recipe: default.v1

# The assistant project unique identifier
assistant_id: soulpath-rasa

# Configuration for Rasa NLU with spaCy
# https://rasa.com/docs/rasa/nlu/components/
language: es

pipeline:
# Enhanced tokenization for Spanish
- name: WhitespaceTokenizer

# Advanced text preprocessing for Spanish
- name: LexicalSyntacticFeaturizer

# Regex features for Spanish patterns
- name: RegexFeaturizer
  case_sensitive: false

# Additional lexical features
- name: LexicalSyntacticFeaturizer

# Character-level features (optimized for Spanish)
- name: CountVectorsFeaturizer
  analyzer: char_wb
  min_ngram: 1
  max_ngram: 5
  max_features: 20000
  lowercase: true

# Word-level features (optimized for Spanish)
- name: CountVectorsFeaturizer
  analyzer: word
  min_ngram: 1
  max_ngram: 3
  max_features: 20000
  lowercase: true

# Enhanced DIET classifier for Spanish
- name: DIETClassifier
  epochs: 200
  entity_recognition: true
  intent_classification: true
  use_masked_language_model: false
  constrain_similarities: true
  model_confidence: softmax
  random_seed: 42
  learning_rate: 0.001
  hidden_layers_sizes:
    text: [256, 128]
    label: [256, 128]
  dropout: 0.2
  number_of_transformer_layers: 2
  transformer_size: 256

# Entity synonym mapping
- name: EntitySynonymMapper

# Response selection (enhanced for Spanish)
- name: ResponseSelector
  epochs: 200
  constrain_similarities: true
  retrieval_intent: chitchat/ask_name
  use_gpu: false
  learning_rate: 0.001
  number_of_transformer_layers: 1
  transformer_size: 128

# Enhanced fallback handling for Spanish
- name: FallbackClassifier
  threshold: 0.35
  ambiguity_threshold: 0.1

# Configuration for Rasa Core (Enhanced for Spanish)
# https://rasa.com/docs/rasa/core/policies/
policies:
- name: MemoizationPolicy
  max_history: 3
- name: RulePolicy
  max_history: 3
- name: UnexpecTEDIntentPolicy
  max_history: 5
  epochs: 150
  use_gpu: false
  random_seed: 42
- name: TEDPolicy
  max_history: 5
  epochs: 150
  constrain_similarities: true
  use_gpu: false
  random_seed: 42
  learning_rate: 0.001



================================================================================
FILE: backend/rasa/tts_config.py
SIZE: 2.1KB
TYPE: .py
================================================================================

"""
TTS Configuration for Rasa Chatbot
"""
import os

# TTS Service Configuration
TTS_CONFIG = {
    "service_url": "https://openai-edge-tts-k05k.onrender.com/v1/audio/speech",
    "api_key": "sdfsdfdsfsdfsdf",  # Edge TTS doesn't require real API key
    "default_voice": "en-US-AvaNeural",  # English female voice
    "timeout": 30,
    "response_format": "mp3",
    "speed": 1.0,
    
    # Voice mappings for different languages and preferences
    "voice_mapping": {
        # Spanish voices
        'espa√±ol': 'es-MX-DaliaNeural',
        'espanol': 'es-MX-DaliaNeural',
        'spanish': 'es-MX-DaliaNeural',
        'mexicano': 'es-MX-DaliaNeural',
        'mexican': 'es-MX-DaliaNeural',
        'femenino': 'es-MX-DaliaNeural',
        'female': 'es-MX-DaliaNeural',
        'masculino': 'es-MX-JorgeNeural',
        'male': 'es-MX-JorgeNeural',
        
        # English voices
        'ingl√©s': 'en-US-AvaNeural',
        'english': 'en-US-AvaNeural',
        'americano': 'en-US-AvaNeural',
        'american': 'en-US-AvaNeural',
        
        # Additional Spanish voices
        'espa√±ol_femenino': 'es-MX-DaliaNeural',
        'espa√±ol_masculino': 'es-MX-JorgeNeural',
        'espanol_femenino': 'es-MX-DaliaNeural',
        'espanol_masculino': 'es-MX-JorgeNeural',
        
        # Additional English voices
        'english_female': 'en-US-AvaNeural',
        'english_male': 'en-US-GuyNeural',
    },
    
    # Available voices for selection
    "available_voices": [
        {"name": "Dalia (Espa√±ol Femenino)", "value": "es-MX-DaliaNeural"},
        {"name": "Jorge (Espa√±ol Masculino)", "value": "es-MX-JorgeNeural"},
        {"name": "Ava (English Female)", "value": "en-US-AvaNeural"},
        {"name": "Guy (English Male)", "value": "en-US-GuyNeural"},
    ]
}

# Environment variable overrides
if os.getenv("TTS_SERVICE_URL"):
    TTS_CONFIG["service_url"] = os.getenv("TTS_SERVICE_URL")
if os.getenv("TTS_API_KEY"):
    TTS_CONFIG["api_key"] = os.getenv("TTS_API_KEY")
if os.getenv("TTS_DEFAULT_VOICE"):
    TTS_CONFIG["default_voice"] = os.getenv("TTS_DEFAULT_VOICE")



================================================================================
FILE: backend/rasa/.DS_Store
SIZE: 8.0KB
TYPE: 
================================================================================

   Bud1                                                                       alg1Scomp                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            @      ÔøΩ                                        @      ÔøΩ                                          @      ÔøΩ                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   . r a s alg1Scomp    8ÔøΩW    . r a s amoDDblob   ÔøΩÔøΩS@~6ÔøΩA    . r a s amodDblob   ÔøΩÔøΩS@~6ÔøΩA    . r a s aph1Scomp    8:ÔøΩ     _ _ p y c a c h e _ _lg1Scomp      >ÔøΩ    _ _ p y c a c h e _ _moDDblob   [ÔøΩÔøΩGÔøΩ7ÔøΩA    _ _ p y c a c h e _ _modDblob   [ÔøΩÔøΩGÔøΩ7ÔøΩA    _ _ p y c a c h e _ _ph1Scomp      @    
 c o n n e c t o r slg1Scomp      ?ÔøΩ   
 c o n n e c t o r smoDDblob   ÔøΩ”íÔøΩÔøΩ6ÔøΩA   
 c o n n e c t o r smodDblob   ÔøΩ”íÔøΩÔøΩ6ÔøΩA   
 c o n n e c t o r sph1Scomp      `     d a t alg1Scomp      ÔøΩ'    d a t amoDDblob   PÔøΩbf87ÔøΩA    d a t amodDblob   PÔøΩbf87ÔøΩA    d a t aph1Scomp      ÔøΩ     m o d e l slg1Scomp    (ÔøΩÔøΩg    m o d e l smoDDblob   FÔøΩ$|ÔøΩ7ÔøΩA    m o d e l smodDblob   FÔøΩ$|ÔøΩ7ÔøΩA    m o d e l sph1Scomp    (ÔøΩ0     r a s a _ e n vlg1Scomp    qÔøΩÔøΩU    r a s a _ e n vmoDDblob   ÔøΩÔøΩ*ÔøΩÔøΩ6ÔøΩA    r a s a _ e n vmodDblob   ÔøΩÔøΩ*ÔøΩÔøΩ6ÔøΩA    r a s a _ e n vph1Scomp    wÔøΩ0     r e s u l t slg1Scomp     ÔøΩO    r e s u l t smoDDblob   ÔøΩÕõÔøΩ7ÔøΩA    r e s u l t smodDblob   ÔøΩÕõÔøΩ7ÔøΩA    r e s u l t sph1Scomp     p     t e s t slg1Scomp      ÔøΩ    t e s t smoDDblob   5 ÔøΩPÔøΩ6ÔøΩA    t e s t smodDblob   5 ÔøΩPÔøΩ6ÔøΩA    t e s t sph1Scomp                                 @      ÔøΩ                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   E                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         DSDB                                 `          ÔøΩ                                        @      ÔøΩ                                          @      ÔøΩ                                          @                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              


================================================================================
FILE: backend/rasa/.env
SIZE: 0.1KB
TYPE: 
================================================================================

DATABASE_URL=postgresql://postgres:postgres@127.0.0.1:54322/postgres



================================================================================
FILE: backend/rasa/.gitignore
SIZE: 0.4KB
TYPE: 
================================================================================

# Rasa cache files
.rasa/
__pycache__/
*.pyc
*.pyo
*.pyd

# Python virtual environments
rasa_env/
venv/
env/
ENV/

# OS files
.DS_Store
Thumbs.db

# Logs
*.log
logs/

# Temporary files
*.tmp
*.temp

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Model cache (keep models/ directory)
models/*.tar.gz.tmp
models/*.tar.gz.backup

# Node modules (if any)
node_modules/



================================================================================
FILE: backend/rasa/ENHANCED_MODEL_README.md
SIZE: 6.9KB
TYPE: .md
================================================================================

# Enhanced Rasa Model for Wellness Astrology Chatbot

## üöÄ Model Improvements Overview

This enhanced Rasa model includes significant improvements over the basic version:

### ‚ú® Key Enhancements

1. **Advanced NLP Pipeline with spaCy Integration**
   - SpacyTokenizer for better text tokenization
   - SpacyFeaturizer for enhanced text features
   - SpacyEntityExtractor for improved entity recognition
   - Enhanced DIET classifier with better parameters

2. **Comprehensive Training Data**
   - 200+ training examples (vs. 20+ in basic version)
   - Bilingual support (Spanish/English)
   - Rich entity annotations
   - Diverse conversation patterns

3. **Advanced Conversation Management**
   - 15+ conversation stories
   - Complex multi-turn dialogues
   - Better context handling
   - Enhanced fallback mechanisms

4. **Custom Actions & Advanced Features**
   - Sentiment analysis
   - Booking validation
   - Availability checking
   - Pricing information
   - User information management

5. **Improved Domain Configuration**
   - 8 new intents
   - 8 new entities
   - 15+ response variations
   - Slot management
   - Rules-based flows

## üìä Model Performance Improvements

| Metric | Basic Model | Enhanced Model | Improvement |
|--------|-------------|----------------|-------------|
| Training Examples | ~20 | 200+ | 10x |
| Intents | 8 | 13 | 62% |
| Entities | 2 | 8 | 300% |
| Stories | 7 | 15+ | 114% |
| Response Variations | 7 | 15+ | 114% |
| Language Support | English | Bilingual | 100% |

## üõ†Ô∏è Installation & Setup

### Prerequisites
```bash
# Install spaCy Spanish model
python -m spacy download es_core_news_sm

# Install additional dependencies
pip install -r actions_requirements.txt
```

### Training the Enhanced Model
```bash
# Make training script executable
chmod +x train_enhanced_model.sh

# Run enhanced training
./train_enhanced_model.sh
```

### Running the Model
```bash
# Start Rasa server
rasa run --model models/ --enable-api --cors "*" --port 5005

# Start actions server (in separate terminal)
rasa run actions --port 5055
```

## üéØ New Features

### 1. Enhanced Intent Recognition
- **ask_session_types**: Inquiries about available services
- **ask_pricing**: Price and cost information
- **ask_availability**: Schedule and availability
- **ask_contact**: Contact information requests
- **ask_help**: General help requests

### 2. Advanced Entity Extraction
- **date**: Date expressions (ma√±ana, el viernes, 15 de marzo)
- **time**: Time expressions (3pm, las 3pm, 15:30)
- **session_type**: Service types (astrolog√≠a, tarot, numerolog√≠a)
- **price**: Price mentions
- **location**: Location references
- **phone**: Phone numbers
- **email**: Email addresses

### 3. Custom Actions
- **ActionDefaultFallback**: Intelligent fallback handling
- **ActionExtractAstrologyInfo**: Astrology-specific processing
- **ActionBookSessionForm**: Structured booking form
- **ActionCheckAvailability**: Real-time availability checking
- **ActionGetPricing**: Dynamic pricing information
- **ActionSentimentAnalysis**: User sentiment detection
- **ActionValidateBooking**: Booking validation
- **ActionSaveUserInfo**: User information management

### 4. Bilingual Support
- Spanish and English training examples
- Context-aware language detection
- Culturally appropriate responses

## üìà Performance Monitoring

### Model Validation
```bash
# Validate training data
rasa data validate --domain domain.yml --data data/ --config config.yml

# Test model performance
rasa test --model models/ --stories data/test_stories.yml --nlu data/test_nlu.yml
```

### Key Metrics to Monitor
- Intent classification accuracy
- Entity extraction precision
- Response time
- User satisfaction
- Conversation completion rate

## üîß Configuration Details

### Enhanced Pipeline Components
```yaml
pipeline:
- name: SpacyTokenizer
  model: "es_core_news_sm"
- name: SpacyFeaturizer
  model: "es_core_news_sm"
- name: DIETClassifier
  epochs: 150
  learning_rate: 0.001
  hidden_layers_sizes:
    text: [256, 128]
    label: [256, 128]
  dropout: 0.2
```

### Advanced Policies
```yaml
policies:
- name: TEDPolicy
  max_history: 8
  epochs: 150
  learning_rate: 0.001
- name: AugmentedMemoizationPolicy
  max_history: 8
  lookup_table: ["greet", "goodbye", "book_session"]
```

## üöÄ Deployment Recommendations

### Production Settings
1. **Model Optimization**: Use `--optimize` flag for production
2. **Caching**: Enable response caching for better performance
3. **Monitoring**: Set up logging and metrics collection
4. **Scaling**: Use multiple workers for high traffic

### Docker Deployment
```dockerfile
# Enhanced Dockerfile with spaCy
FROM python:3.10-slim
RUN pip install spacy==3.6.1 rasa==3.6.21
RUN python -m spacy download es_core_news_sm
```

## üìù Usage Examples

### Basic Conversation
```
User: Hola, quiero agendar una cita
Bot: ¬°Hola! Soy tu asistente de astrolog√≠a y bienestar. ¬øEn qu√© puedo ayudarte hoy?
Bot: ¬°Me encantar√≠a ayudarte a agendar una sesi√≥n con Jos√© Garfias! ¬øQu√© tipo de lectura te interesa?
```

### Complex Booking Flow
```
User: Qu√© servicios ofrecen?
Bot: Ofrecemos varios tipos de sesiones: üìø Astrolog√≠a y carta natal, üîÆ Lectura de tarot, üî¢ Numerolog√≠a, üßò Meditaci√≥n guiada, üíÜ Terapia hol√≠stica, y üéØ Coaching espiritual. ¬øCu√°l te interesa m√°s?

User: Cu√°nto cuesta la astrolog√≠a?
Bot: Nuestras tarifas var√≠an seg√∫n el tipo de sesi√≥n: Consultas astrol√≥gicas desde $50, lecturas de tarot desde $40, numerolog√≠a desde $45, y sesiones de meditaci√≥n desde $35. ¬øTe interesa alg√∫n servicio espec√≠fico?

User: Me interesa agendar una consulta de astrolog√≠a
Bot: ¬°Perfecto! ¬øTe gustar√≠a agendar una sesi√≥n de astrolog√≠a, tarot, numerolog√≠a o meditaci√≥n?
```

## üîç Troubleshooting

### Common Issues
1. **spaCy Model Not Found**: Run `python -m spacy download es_core_news_sm`
2. **Low Intent Confidence**: Increase training examples or adjust thresholds
3. **Entity Extraction Issues**: Check entity annotations in training data
4. **Action Server Errors**: Verify endpoints.yml configuration

### Performance Optimization
1. **Reduce Model Size**: Use `--optimize` during training
2. **Improve Response Time**: Enable caching and use faster hardware
3. **Better Accuracy**: Add more training examples and fine-tune parameters

## üìö Next Steps

1. **Continuous Learning**: Collect user interactions for model improvement
2. **A/B Testing**: Test different response variations
3. **Integration**: Connect with booking systems and databases
4. **Analytics**: Implement conversation analytics and insights
5. **Multimodal**: Add support for images, voice, and other media types

## ü§ù Contributing

To improve the model further:
1. Add more training examples
2. Enhance entity recognition
3. Improve conversation flows
4. Add new custom actions
5. Optimize performance

---

**Model Version**: Enhanced v2.0  
**Last Updated**: $(date)  
**Rasa Version**: 3.6.21  
**spaCy Version**: 3.6.1



================================================================================
FILE: backend/rasa/Procfile
SIZE: 0.2KB
TYPE: 
================================================================================

# Procfile for Render deployment

# Main Rasa server
web: bash start.sh

# Actions server (if deploying separately)
actions: python -m rasa run actions --port $ACTIONS_PORT



================================================================================
FILE: backend/rasa/RENDER_DEPLOYMENT.md
SIZE: 6.0KB
TYPE: .md
================================================================================

# üöÄ Rasa Model Deployment to Render (Non-Docker)

This guide provides step-by-step instructions for deploying your Rasa wellness chatbot to Render without using Docker.

## üìã Prerequisites

- Render account with billing enabled (for persistent services)
- Trained Rasa model in `models/` directory
- GitHub repository with all Rasa files

## üèóÔ∏è Deployment Architecture

```
Render Services:
‚îú‚îÄ‚îÄ rasa-server (Web Service)
‚îÇ   ‚îú‚îÄ‚îÄ Rasa Core + NLU
‚îÇ   ‚îú‚îÄ‚îÄ REST API endpoints
‚îÇ   ‚îî‚îÄ‚îÄ Model serving
‚îÇ
‚îî‚îÄ‚îÄ rasa-actions (Web Service)
    ‚îú‚îÄ‚îÄ Custom actions
    ‚îú‚îÄ‚îÄ API integrations
    ‚îî‚îÄ‚îÄ Business logic
```

## üöÄ Step-by-Step Deployment

### 1. Create Rasa Server Service

1. **Go to Render Dashboard** ‚Üí New ‚Üí Web Service
2. **Connect Repository**: Select your GitHub repo
3. **Service Configuration**:
   - **Name**: `rasa-server` or `soulpath-rasa`
   - **Runtime**: Python 3
   - **Build Command**:
     ```bash
     pip install -r backend/rasa/requirements.txt
     ```
   - **Start Command**:
     ```bash
     cd backend/rasa && python -m rasa run --enable-api --cors "*" --port $PORT --credentials credentials.yml --endpoints endpoints.yml
     ```

### 2. Create Rasa Actions Service

1. **Go to Render Dashboard** ‚Üí New ‚Üí Web Service
2. **Connect Repository**: Select the same GitHub repo
3. **Service Configuration**:
   - **Name**: `rasa-actions` or `soulpath-actions`
   - **Runtime**: Python 3
   - **Build Command**:
     ```bash
     pip install -r backend/rasa/requirements.txt
     ```
   - **Start Command**:
     ```bash
     cd backend/rasa && python -m rasa run actions --port $PORT
     ```

### 3. Configure Environment Variables

#### For Rasa Server Service:
```env
PORT=5005
ACTION_ENDPOINT_URL=https://your-actions-service.onrender.com/webhook
RASA_MODEL_SERVER=null
PYTHONPATH=/opt/render/project/src
LOG_LEVEL=INFO
```

#### For Rasa Actions Service:
```env
PORT=5055
PYTHONPATH=/opt/render/project/src
LOG_LEVEL=INFO
```

### 4. Service Dependencies

1. **Deploy Actions Service First**
2. **Get Actions Service URL** from Render dashboard
3. **Update Rasa Server** environment variables with the Actions service URL

## üîß Configuration Files

### Files Created for Render:
- ‚úÖ `render.yaml` - Service configuration
- ‚úÖ `requirements.txt` - Python dependencies
- ‚úÖ `runtime.txt` - Python version specification
- ‚úÖ `start.sh` - Startup script
- ‚úÖ `Procfile` - Process definitions
- ‚úÖ `env.example` - Environment variables template

### Modified Files:
- ‚úÖ `endpoints.yml` - Updated with environment variables
- ‚úÖ `credentials.yml` - Ready for production

## üåê Networking Configuration

### Internal Communication:
```yaml
# endpoints.yml
action_endpoint:
  url: "${ACTION_ENDPOINT_URL:http://localhost:5055/webhook}"
```

### External Access:
- **Rasa Server**: `https://your-rasa-service.onrender.com`
- **Actions Server**: `https://your-actions-service.onrender.com`
- **API Endpoints**: `/webhooks/rest/webhook`
- **Health Check**: `/`

## üß™ Testing Deployment

### 1. Health Check
```bash
curl https://your-rasa-service.onrender.com/
# Should return: {"version": "3.6.21", ...}
```

### 2. API Test
```bash
curl -X POST https://your-rasa-service.onrender.com/webhooks/rest/webhook \
  -H "Content-Type: application/json" \
  -d '{"message": "Hola"}'
```

### 3. Actions Test
```bash
curl https://your-actions-service.onrender.com/health
# Should return: {"status": "ok"}
```

## üîÑ Updating Deployment

### Model Updates:
1. Train new model locally
2. Save to `models/` directory
3. Commit and push to GitHub
4. Render auto-deploys with new model

### Code Updates:
1. Push changes to GitHub
2. Render auto-deploys
3. Monitor logs in Render dashboard

## üìä Monitoring & Logs

### Render Dashboard:
- **Service Status**: Real-time health
- **Logs**: Build and runtime logs
- **Metrics**: CPU, memory, requests
- **Alerts**: Configure for failures

### Custom Logging:
```python
import logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
```

## üõ†Ô∏è Troubleshooting

### Common Issues:

#### 1. Port Already in Use
- Render assigns random ports via `$PORT`
- Don't hardcode ports in code

#### 2. Actions Server Connection
- Ensure `ACTION_ENDPOINT_URL` is correct
- Check Actions service is running
- Verify cross-service networking

#### 3. Model Loading Issues
- Ensure model file is in `models/` directory
- Check file permissions
- Verify model compatibility

#### 4. Memory Issues
- Monitor memory usage in Render dashboard
- Consider upgrading service plan
- Optimize model size if needed

### Debug Commands:
```bash
# Check service status
curl https://your-service.onrender.com/

# Test API endpoints
curl -X POST https://your-service.onrender.com/webhooks/rest/webhook \
  -H "Content-Type: application/json" \
  -d '{"message": "test"}'

# Check logs in Render dashboard
# View under "Logs" tab of your service
```

## üîí Security Considerations

### Environment Variables:
- Store sensitive data in environment variables
- Never commit secrets to repository
- Use Render's secret management

### Network Security:
- Use HTTPS for all external communications
- Configure CORS appropriately
- Implement rate limiting if needed

## üìà Scaling

### Horizontal Scaling:
- Deploy multiple instances
- Use load balancer
- Implement session affinity if needed

### Performance Optimization:
- Monitor response times
- Optimize model size
- Use caching for frequent queries
- Implement connection pooling

## üéØ Production Checklist

- [ ] Services deployed successfully
- [ ] Environment variables configured
- [ ] Cross-service communication working
- [ ] Health checks passing
- [ ] Model loading correctly
- [ ] API endpoints responding
- [ ] Logging configured
- [ ] Monitoring alerts set up
- [ ] Backup strategy in place

## üìû Support

For issues:
1. Check Render service logs
2. Review this deployment guide
3. Test locally first
4. Contact Render support if needed

---

**Deployment successful!** üéâ Your Rasa wellness chatbot is now live on Render.



================================================================================
FILE: backend/rasa/TTS_INTEGRATION_README.md
SIZE: 5.9KB
TYPE: .md
================================================================================

# Text-to-Speech (TTS) Integration for Rasa Chatbot

This document explains how to use the Text-to-Speech functionality integrated into your Rasa astrology chatbot.

## üé§ Overview

The chatbot now supports voice responses using the [OpenAI Edge TTS service](https://github.com/travisvn/openai-edge-tts) running on your server at `https://openai-edge-tts-k05k.onrender.com:10000/`.

## üöÄ Features

- **Voice Responses**: Chatbot can speak its responses in Spanish and English
- **Multiple Voices**: Support for male/female voices in both languages
- **Voice Control**: Users can enable/disable TTS and change voice preferences
- **Automatic Fallback**: Falls back to text if TTS fails
- **Configurable**: Easy to modify voice settings and service URL

## üéØ Voice Commands

### Enable/Disable TTS
- **Spanish**: "habla conmigo", "activa la voz", "quiero que hables"
- **English**: "speak to me", "turn on voice", "enable audio"

### Change Voice
- **Spanish**: "cambia la voz", "voz femenina", "voz masculina"
- **English**: "change voice", "female voice", "male voice"

### Test Voice
- **Spanish**: "prueba la voz", "test de voz", "¬øpuedes hablar?"
- **English**: "test voice", "voice test", "can you speak?"

## üéµ Available Voices

| Language | Gender | Voice ID | Description |
|----------|--------|----------|-------------|
| Spanish | Female | es-MX-DaliaNeural | Mexican Spanish (Female) |
| Spanish | Male | es-MX-JorgeNeural | Mexican Spanish (Male) |
| English | Female | en-US-AvaNeural | American English (Female) |
| English | Male | en-US-GuyNeural | American English (Male) |

## üîß Configuration

### TTS Service Configuration
The TTS service is configured in `tts_config.py`:

```python
TTS_CONFIG = {
    "service_url": "https://openai-edge-tts-k05k.onrender.com:10000/v1/audio/speech",
    "api_key": "your_api_key_here",
    "default_voice": "es-MX-DaliaNeural",
    "timeout": 30,
    "response_format": "mp3",
    "speed": 1.0,
}
```

### Environment Variables
You can override the configuration using environment variables:

```bash
export TTS_SERVICE_URL="https://your-tts-service.com/v1/audio/speech"
export TTS_API_KEY="your_api_key"
export TTS_DEFAULT_VOICE="en-US-AvaNeural"
```

## üß™ Testing

### Test TTS Service Directly
```bash
cd backend/rasa
python test_tts.py
```

This will:
- Test the TTS service connection
- Generate audio files for different voices
- Verify base64 encoding for Rasa integration

### Test with Rasa
1. **Start Rasa Server**:
   ```bash
   rasa run --enable-api
   ```

2. **Start Action Server**:
   ```bash
   rasa run actions
   ```

3. **Test Commands**:
   - "habla conmigo" - Enable TTS
   - "prueba la voz" - Test voice
   - "cambia la voz" - Change voice
   - "desactiva la voz" - Disable TTS

## üì± Integration with Messaging Platforms

### Telegram
The TTS integration works with Telegram by sending audio messages:

```python
# Audio message format for Telegram
{
    "type": "audio",
    "payload": {
        "src": "data:audio/mp3;base64,{base64_audio}",
        "title": "Respuesta de voz"
    }
}
```

### WhatsApp
Similar audio message format can be used for WhatsApp integration.

## üîÑ How It Works

1. **User Input**: User sends a message like "habla conmigo"
2. **Intent Recognition**: Rasa recognizes the `enable_tts` intent
3. **Action Execution**: `action_toggle_tts` is triggered
4. **Slot Setting**: `tts_enabled` slot is set to `True`
5. **Voice Response**: Subsequent responses include audio via `action_speak_response`

### TTS Action Flow
```
User Message ‚Üí Intent Recognition ‚Üí TTS Action ‚Üí Edge TTS Service ‚Üí Audio Response
```

## üõ†Ô∏è Troubleshooting

### Common Issues

1. **TTS Service Unavailable**
   - Check if the service URL is correct
   - Verify network connectivity
   - Check service logs

2. **Audio Not Playing**
   - Verify the messaging platform supports audio
   - Check base64 encoding
   - Test with different audio formats

3. **Voice Not Changing**
   - Check voice mapping in `tts_config.py`
   - Verify entity extraction
   - Test with different voice commands

### Debug Mode
Enable debug logging to see TTS requests:

```python
import logging
logging.getLogger().setLevel(logging.DEBUG)
```

## üìä Performance Considerations

- **Response Time**: TTS adds ~2-3 seconds to response time
- **Audio Size**: MP3 files are typically 50-200KB
- **Rate Limiting**: Consider implementing rate limiting for TTS requests
- **Caching**: Consider caching frequently used phrases

## üîê Security

- **API Key**: The Edge TTS service doesn't require a real API key
- **Rate Limiting**: Implement rate limiting to prevent abuse
- **Content Filtering**: Consider filtering inappropriate content before TTS

## üöÄ Future Enhancements

- **Voice Cloning**: Custom voice training
- **Emotion Detection**: Voice tone based on sentiment
- **Multi-language**: Support for more languages
- **Voice Commands**: Voice-to-text input
- **Audio Streaming**: Real-time audio streaming

## üìù Example Usage

### Basic TTS Flow
```
User: "Hola"
Bot: "¬°Hola! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?" (text)

User: "habla conmigo"
Bot: "üîä ¬°Perfecto! He activado la funci√≥n de voz. Ahora te hablar√© en mis respuestas." (text + audio)

User: "¬øQu√© paquetes tienes?"
Bot: "üåü Paquetes Disponibles:..." (text + audio)
```

### Voice Change Flow
```
User: "cambia la voz"
Bot: "üé§ ¬øQu√© tipo de voz prefieres? Puedo usar voz femenina o masculina, en espa√±ol o ingl√©s."

User: "voz masculina"
Bot: "üé§ Perfecto, he configurado la voz masculina. Ahora usar√© esta voz para hablarte." (text + audio)
```

## üìû Support

For issues with the TTS integration:
1. Check the logs in `rasa/logs/`
2. Test the TTS service directly with `test_tts.py`
3. Verify the service URL and configuration
4. Check network connectivity to the TTS service

---

**Note**: This TTS integration uses the free OpenAI Edge TTS service, which provides high-quality text-to-speech without requiring API keys or payment.



================================================================================
FILE: backend/rasa/actions.py
SIZE: 31.7KB
TYPE: .py
================================================================================

"""
Custom actions for the wellness astrology chatbot
"""
import logging
import os
import base64
import io
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted
# from rasa_sdk.forms import FormAction
import requests
import json
from datetime import datetime, timedelta
import re
from tts_config import TTS_CONFIG

logger = logging.getLogger(__name__)

class ActionDefaultFallback(Action):
    """Executes the fallback action and goes back to the previous state
    of the conversation"""

    def name(self) -> Text:
        return "action_default_fallback"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get the last user message
        last_message = tracker.latest_message.get('text', '')

        # Try to understand the intent better
        if any(word in last_message.lower() for word in ['precio', 'costo', 'tarifa', 'price', 'cost', 'cu√°nto', 'how much', 'rates', 'fees']):
            dispatcher.utter_message(response="utter_ask_packages")
            # Call the same action as packages to show pricing
            return [ActionExecuted("action_fetch_packages")]
        elif any(word in last_message.lower() for word in ['horario', 'disponibilidad', 'schedule', 'available']):
            dispatcher.utter_message(response="utter_availability")
        elif any(word in last_message.lower() for word in ['contacto', 'tel√©fono', 'email', 'contact', 'phone']):
            dispatcher.utter_message(response="utter_contact")
        elif any(word in last_message.lower() for word in ['servicio', 'sesi√≥n', 'service', 'session']):
            dispatcher.utter_message(response="utter_class_types")
        elif any(word in last_message.lower() for word in ['agendar', 'cita', 'book', 'appointment']):
            dispatcher.utter_message(response="utter_book_class")
        else:
            dispatcher.utter_message(response="utter_default")

        return []

class ActionGetTeachersInfo(Action):
    """Get information about yoga teachers"""

    def name(self) -> Text:
        return "action_get_teachers_info"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get entities from the message
        entities = tracker.latest_message.get('entities', [])
        teacher_entity = next((e for e in entities if e['entity'] == 'teacher_name'), None)

        teachers_info = {
            "maria": {
                "name": "Mar√≠a Gonz√°lez",
                "specialties": ["Hatha Yoga", "Yoga Restaurativo", "Meditaci√≥n"],
                "experience": "8 a√±os de experiencia",
                "description": "Especialista en yoga terap√©utico y meditaci√≥n mindfulness"
            },
            "carlos": {
                "name": "Carlos Rodr√≠guez",
                "specialties": ["Vinyasa Flow", "Power Yoga", "Ashtanga"],
                "experience": "12 a√±os de experiencia",
                "description": "Instructor certificado en yoga din√°mico y flujo creativo"
            },
            "ana": {
                "name": "Ana Mart√≠nez",
                "specialties": ["Yoga para Principiantes", "Yoga Prenatal", "Yin Yoga"],
                "experience": "6 a√±os de experiencia",
                "description": "Especialista en yoga suave y terap√©utico para todos los niveles"
            }
        }

        if teacher_entity:
            teacher_name = teacher_entity['value'].lower()
            if teacher_name in teachers_info:
                teacher = teachers_info[teacher_name]
                message = f"**{teacher['name']}**\n\n"
                message += f"**Especialidades:** {', '.join(teacher['specialties'])}\n"
                message += f"**Experiencia:** {teacher['experience']}\n"
                message += f"**Descripci√≥n:** {teacher['description']}\n\n"
                message += "¬øTe gustar√≠a reservar una clase con este instructor?"
                dispatcher.utter_message(text=message)
            else:
                dispatcher.utter_message(
                    text=f"No encontr√© informaci√≥n sobre {teacher_entity['value']}. Nuestros instructores son Mar√≠a, Carlos y Ana. ¬øTe gustar√≠a conocer m√°s sobre alguno de ellos?"
                )
        else:
            message = "**Nuestros Instructores:**\n\n"
            for teacher in teachers_info.values():
                message += f"‚Ä¢ **{teacher['name']}** - {teacher['specialties'][0]}\n"
            message += "\n¬øTe gustar√≠a conocer m√°s detalles sobre alg√∫n instructor espec√≠fico?"
            dispatcher.utter_message(text=message)

        return []

class ActionBookClassForm(Action):
    """Form for booking a yoga class"""

    def name(self) -> Text:
        return "action_book_class_form"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        class_type = tracker.get_slot("class_type")
        preferred_date = tracker.get_slot("date")
        preferred_time = tracker.get_slot("time")
        teacher_name = tracker.get_slot("teacher_name")

        # Here you would typically save to a database or send to a booking system
        message = f"¬°Perfecto! He registrado tu solicitud para una clase de {class_type}"
        if teacher_name:
            message += f" con {teacher_name}"
        message += f" el {preferred_date} a las {preferred_time}. Te contactaremos pronto para confirmar todos los detalles."

        dispatcher.utter_message(text=message)

        return []

class ActionCheckAvailability(Action):
    """Check availability for booking"""

    def name(self) -> Text:
        return "action_check_availability"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get current date and time
        now = datetime.now()

        # Simulate availability check
        available_times = [
            f"{now + timedelta(days=1)}: 10:00 AM, 2:00 PM, 4:00 PM",
            f"{now + timedelta(days=2)}: 9:00 AM, 11:00 AM, 3:00 PM, 5:00 PM",
            f"{now + timedelta(days=3)}: 10:00 AM, 1:00 PM, 4:00 PM"
        ]

        dispatcher.utter_message(
            text=f"Estos son nuestros pr√≥ximos horarios disponibles:\n\n" +
                 "\n".join(available_times) +
                 "\n\n¬øTe gustar√≠a agendar para alguno de estos horarios?"
        )

        return []

class ActionGetPricing(Action):
    """Get detailed pricing information"""

    def name(self) -> Text:
        return "action_get_pricing"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        pricing_info = {
            "hatha yoga": "$15 - $25",
            "vinyasa flow": "$18 - $28",
            "ashtanga": "$20 - $30",
            "yoga restaurativo": "$12 - $20",
            "yoga para principiantes": "$10 - $18",
            "power yoga": "$20 - $30",
            "yoga prenatal": "$15 - $25",
            "meditaci√≥n": "$10 - $15"
        }

        message = "Aqu√≠ tienes nuestros precios detallados:\n\n"
        for service, price in pricing_info.items():
            message += f"‚Ä¢ {service.title()}: {price}\n"

        message += "\nTambi√©n ofrecemos paquetes especiales con descuentos. ¬øTe interesa alg√∫n tipo de clase espec√≠fico?"

        dispatcher.utter_message(text=message)

        return []

class ActionSentimentAnalysis(Action):
    """Analyze sentiment of user messages"""

    def name(self) -> Text:
        return "action_sentiment_analysis"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        last_message = tracker.latest_message.get('text', '').lower()

        # Simple sentiment analysis
        positive_words = ['bueno', 'excelente', 'genial', 'perfecto', 'gracias', 's√≠', 'yes', 'great', 'good', 'excellent']
        negative_words = ['malo', 'terrible', 'horrible', 'no', 'no quiero', 'no me gusta', 'bad', 'terrible', 'awful']

        positive_count = sum(1 for word in positive_words if word in last_message)
        negative_count = sum(1 for word in negative_words if word in last_message)

        if positive_count > negative_count:
            sentiment = "positive"
            dispatcher.utter_message(text="Me alegra saber que est√°s teniendo una experiencia positiva. ¬øHay algo m√°s en lo que pueda ayudarte?")
        elif negative_count > positive_count:
            sentiment = "negative"
            dispatcher.utter_message(text="Entiendo que puede haber alguna preocupaci√≥n. ¬øTe gustar√≠a que te ayude de alguna manera espec√≠fica?")
        else:
            sentiment = "neutral"

        return [SlotSet("sentiment", sentiment)]

class ActionValidateBooking(Action):
    """Validate booking information"""

    def name(self) -> Text:
        return "action_validate_booking"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get slots
        session_type = tracker.get_slot("session_type")
        date = tracker.get_slot("date")
        time = tracker.get_slot("time")

        # Validate session type
        valid_types = ["astrolog√≠a", "tarot", "numerolog√≠a", "meditaci√≥n", "terapia", "coaching"]
        if session_type and session_type.lower() not in valid_types:
            dispatcher.utter_message(
                text=f"Disculpa, no reconozco el tipo de sesi√≥n '{session_type}'. Nuestros servicios disponibles son: {', '.join(valid_types)}. ¬øCu√°l te interesa?"
            )
            return [SlotSet("session_type", None)]

        # Validate date format (basic check)
        if date and not re.match(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', date):
            dispatcher.utter_message(
                text="Por favor, proporciona la fecha en formato DD/MM/YYYY o DD-MM-YYYY. Por ejemplo: 15/03/2024"
            )
            return [SlotSet("date", None)]

        # Validate time format
        if time and not re.match(r'\d{1,2}:\d{2}\s*(AM|PM|am|pm)?', time):
            dispatcher.utter_message(
                text="Por favor, proporciona la hora en formato HH:MM AM/PM. Por ejemplo: 2:30 PM o 14:30"
            )
            return [SlotSet("time", None)]

        return []

class ActionSaveUserInfo(Action):
    """Save user information for future reference"""

    def name(self) -> Text:
        return "action_save_user_info"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get user information
        name = tracker.get_slot("name")
        sign = tracker.get_slot("sign")
        user_id = tracker.sender_id

        # Here you would typically save to a database
        logger.info(f"Saving user info: {user_id}, {name}, {sign}")

        if name:
            dispatcher.utter_message(
                text=f"¬°Perfecto, {name}! He guardado tu informaci√≥n. ¬øHay algo m√°s en lo que pueda ayudarte?"
            )

        return []

class ActionHandleNameProvision(Action):
    """Handle name provision with proper slot setting and personalized response"""

    def name(self) -> Text:
        return "action_handle_name_provision"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get entities from the message
        entities = tracker.latest_message.get('entities', [])
        name_entity = next((e for e in entities if e['entity'] == 'name'), None)

        if name_entity:
            name = name_entity['value']
            dispatcher.utter_message(
                text=f"¬°Mucho gusto, {name}! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
            )
            return [SlotSet("name", name)]
        else:
            # If no name entity found, try to extract from text
            text = tracker.latest_message.get('text', '')
            # Simple name extraction patterns
            import re
            patterns = [
                r'mi nombre es (\w+)',
                r'me llamo (\w+)',
                r'soy (\w+)',
                r'call me (\w+)',
                r"I'm (\w+)",
                r"my name is (\w+)",
                r"I am (\w+)"
            ]

            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    name = match.group(1)
                    dispatcher.utter_message(
                        text=f"¬°Mucho gusto, {name}! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
                    )
                    return [SlotSet("name", name)]

            # If no name found, provide generic response
            dispatcher.utter_message(
                text="¬°Mucho gusto! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
            )

        return []

class ActionFetchPackages(Action):
    """Fetch packages from the Next.js API"""

    def name(self) -> Text:
        return "action_fetch_packages"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        try:
            # Build dynamic base URL from environment with sensible fallbacks
            base_url = (
                os.getenv("NEXT_PUBLIC_BASE_URL")
                or os.getenv("FRONTEND_BASE_URL")
                or os.getenv("API_BASE_URL")
            )
            if not base_url:
                port = os.getenv("PORT") or os.getenv("FRONTEND_PORT") or "3001"
                base_url = f"http://localhost:{port}"

            api_url = f"{base_url}/api/packages"
            response = requests.get(api_url, timeout=10)

            if response.status_code == 200:
                raw = response.json()
                # Support both array and { packages: [...] } shapes
                packages_list = raw.get('packages') if isinstance(raw, dict) else raw

                # Format packages for display
                if isinstance(packages_list, list) and packages_list:
                    formatted_message = self._format_packages_message(packages_list)
                    dispatcher.utter_message(text=formatted_message)

                    # Store available packages in slot
                    return [SlotSet("available_packages", packages_list)]
                else:
                    dispatcher.utter_message(
                        text="Lo siento, no pude obtener la informaci√≥n de paquetes en este momento. ¬øTe gustar√≠a que te ayude con algo m√°s?"
                    )
            else:
                dispatcher.utter_message(
                    text="Disculpa, hay un problema t√©cnico. ¬øPodr√≠as intentarlo de nuevo en unos momentos?"
                )

        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching packages: {e}")
            dispatcher.utter_message(
                text="Lo siento, no pude conectarme al servicio de paquetes. ¬øTe gustar√≠a informaci√≥n sobre nuestros servicios?"
            )
        except Exception as e:
            logger.error(f"Unexpected error in action_fetch_packages: {e}")
            dispatcher.utter_message(
                text="Hubo un error inesperado. ¬øEn qu√© m√°s puedo ayudarte?"
            )

        return []

    def _format_packages_message(self, packages: List[Dict]) -> str:
        """Format packages data into a readable message"""
        message = "üåü **Paquetes Disponibles:**\n\n"

        for i, package in enumerate(packages, 1):
            name = package.get('name', f'Paquete {i}')
            description = package.get('description', 'Descripci√≥n no disponible')
            price = package.get('price', 'Precio no disponible')
            currency = package.get('currency', '$')
            sessions_count = package.get('sessionsCount', 1)
            duration = package.get('duration', 60)

            message += f"**{i}. {name}**\n"
            if package.get('isPopular'):
                message += "   ‚≠ê POPULAR\n"
            message += f"   üí∞ Precio: {currency}{price}\n"
            message += f"   üìÖ Sesiones: {sessions_count}\n"
            message += f"   ‚è±Ô∏è Duraci√≥n: {duration} minutos cada una\n"
            message += f"   üìù {description}\n\n"

        message += "üí´ **¬øListo para reservar?** Solo dime qu√© paquete te interesa y te ayudo a comenzar."

        return message

class ActionFetchPackageDetails(Action):
    """Fetch specific package details from the Next.js API"""

    def name(self) -> Text:
        return "action_fetch_package_details"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get package information from entities or slots
        package_name = None
        package_id = None

        # Check entities first
        entities = tracker.latest_message.get('entities', [])
        for entity in entities:
            if entity['entity'] == 'package_name':
                package_name = entity['value']
            elif entity['entity'] == 'package_id':
                package_id = entity['value']

        # Check slots if no entities found
        if not package_name:
            package_name = tracker.get_slot('package_name')
        if not package_id:
            package_id = tracker.get_slot('package_id')

        if not package_name and not package_id:
            dispatcher.utter_message(
                text="¬øPodr√≠as especificar qu√© paquete te interesa? Puedo darte m√°s detalles sobre cualquiera de nuestros paquetes disponibles."
            )
            return []

        try:
            # Build dynamic base URL from environment with sensible fallbacks
            base_url = (
                os.getenv("NEXT_PUBLIC_BASE_URL")
                or os.getenv("FRONTEND_BASE_URL")
                or os.getenv("API_BASE_URL")
            )
            if not base_url:
                port = os.getenv("PORT") or os.getenv("FRONTEND_PORT") or "3001"
                base_url = f"http://localhost:{port}"

            api_url = f"{base_url}/api/packages"
            response = requests.get(api_url, timeout=10)

            if response.status_code == 200:
                packages_data = response.json()

                # Find the specific package
                target_package = None
                if isinstance(packages_data, list):
                    for package in packages_data:
                        if (package_name and package.get('name', '').lower() == package_name.lower()) or \
                           (package_id and str(package.get('id', '')) == str(package_id)):
                            target_package = package
                            break

                if target_package:
                    formatted_message = self._format_package_details(target_package)
                    dispatcher.utter_message(text=formatted_message)

                    # Store selected package in slot
                    return [SlotSet("selected_package", target_package)]
                else:
                    dispatcher.utter_message(
                        text=f"No encontr√© el paquete '{package_name or package_id}'. ¬øTe gustar√≠a ver todos nuestros paquetes disponibles?"
                    )
            else:
                dispatcher.utter_message(
                    text="Disculpa, hay un problema t√©cnico. ¬øPodr√≠as intentarlo de nuevo en unos momentos?"
                )

        except requests.exceptions.RequestException as e:
            logger.error(f"Error fetching package details: {e}")
            dispatcher.utter_message(
                text="Lo siento, no pude conectarme al servicio de paquetes. ¬øTe gustar√≠a informaci√≥n sobre nuestros servicios?"
            )
        except Exception as e:
            logger.error(f"Unexpected error in action_fetch_package_details: {e}")
            dispatcher.utter_message(
                text="Hubo un error inesperado. ¬øEn qu√© m√°s puedo ayudarte?"
            )

        return []

    def _format_package_details(self, package: Dict) -> str:
        """Format single package details into a readable message"""
        name = package.get('name', 'Paquete')
        description = package.get('description', 'Descripci√≥n no disponible')
        price = package.get('price', 'Precio no disponible')
        currency = package.get('currency', '$')
        sessions_count = package.get('sessionsCount', 1)
        duration = package.get('duration', 60)

        message = f"üìã **Detalles del Paquete: {name}**\n\n"

        if package.get('isPopular'):
            message += "‚≠ê **POPULAR**\n\n"

        message += f"üí∞ **Precio:** {currency}{price}\n"
        message += f"üìÖ **Sesiones:** {sessions_count}\n"
        message += f"‚è±Ô∏è **Duraci√≥n:** {duration} minutos por sesi√≥n\n\n"
        message += f"üìù **Descripci√≥n:**\n{description}\n\n"
        message += "üí´ **¬øTe gustar√≠a reservar este paquete?**"

        return message

class ActionTextToSpeech(Action):
    """Convert text to speech using OpenAI Edge TTS service"""

    def name(self) -> Text:
        return "action_text_to_speech"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get the text to convert to speech
        text_to_speak = tracker.get_slot("text_to_speak")
        if not text_to_speak:
            # Try to get from the last bot message
            events = tracker.events
            for event in reversed(events):
                if event.get("event") == "bot" and event.get("text"):
                    text_to_speak = event.get("text")
                    break

        if not text_to_speak:
            text_to_speak = "Hola, soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"

        try:
            # TTS Service configuration from config file
            tts_url = TTS_CONFIG["service_url"]
            api_key = TTS_CONFIG["api_key"]
            
            # Voice mapping for Spanish/English
            voice = tracker.get_slot("tts_voice") or TTS_CONFIG["default_voice"]
            
            # Prepare the request payload
            payload = {
                "model": "tts-1",
                "input": text_to_speak,
                "voice": voice,
                "response_format": TTS_CONFIG["response_format"],
                "speed": TTS_CONFIG["speed"]
            }

            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {api_key}"
            }

            # Make the TTS request
            response = requests.post(tts_url, json=payload, headers=headers, timeout=10)
            
            if response.status_code == 200:
                # Get the audio data
                audio_data = response.content
                
                # Convert to base64 for sending via dispatcher
                audio_base64 = base64.b64encode(audio_data).decode('utf-8')
                
                # Send the audio message
                dispatcher.utter_message(
                    text=f"üîä {text_to_speak}",
                    attachment={
                        "type": "audio",
                        "payload": {
                            "src": f"data:audio/mp3;base64,{audio_base64}",
                            "title": "Respuesta de voz"
                        }
                    }
                )
                
                logger.info(f"TTS successful for text: {text_to_speak[:50]}...")
                
            else:
                logger.error(f"TTS request failed with status {response.status_code}: {response.text}")
                # Fallback to text only
                dispatcher.utter_message(text=text_to_speak)
                
        except requests.exceptions.RequestException as e:
            logger.error(f"TTS request error: {e}")
            # Fallback to text only
            dispatcher.utter_message(text=text_to_speak)
        except Exception as e:
            logger.error(f"Unexpected TTS error: {e}")
            # Fallback to text only
            dispatcher.utter_message(text=text_to_speak)

        return []

class ActionSpeakResponse(Action):
    """Speak the bot's response using TTS"""

    def name(self) -> Text:
        return "action_speak_response"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get the last bot message
        events = tracker.events
        last_bot_message = None
        for event in reversed(events):
            if event.get("event") == "bot" and event.get("text"):
                last_bot_message = event.get("text")
                break

        if last_bot_message:
            # Set the text to speak and trigger TTS
            return [SlotSet("text_to_speak", last_bot_message), ActionExecuted("action_text_to_speech")]
        
        return []

class ActionToggleTTS(Action):
    """Toggle TTS on/off for the user"""

    def name(self) -> Text:
        return "action_toggle_tts"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        current_tts_status = tracker.get_slot("tts_enabled")
        new_status = not current_tts_status if current_tts_status is not None else True
        
        if new_status:
            dispatcher.utter_message(text="üîä He activado la funci√≥n de voz. Ahora te hablar√© en mis respuestas.")
        else:
            dispatcher.utter_message(text="üîá He desactivado la funci√≥n de voz. Solo te enviar√© texto.")

        return [SlotSet("tts_enabled", new_status)]

class ActionSetVoice(Action):
    """Set the TTS voice preference"""

    def name(self) -> Text:
        return "action_set_voice"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get voice preference from entities or slots
        entities = tracker.latest_message.get('entities', [])
        voice_entity = next((e for e in entities if e['entity'] == 'voice_preference'), None)
        
        if voice_entity:
            voice = voice_entity['value']
            # Use voice mapping from config
            voice_mapping = TTS_CONFIG["voice_mapping"]
            selected_voice = voice_mapping.get(voice.lower(), TTS_CONFIG["default_voice"])
            
            dispatcher.utter_message(
                text=f"üé§ Perfecto, he configurado la voz {voice}. Ahora usar√© esta voz para hablarte."
            )
            
            return [SlotSet("tts_voice", selected_voice)]
        else:
            dispatcher.utter_message(
                text="üé§ ¬øQu√© tipo de voz prefieres? Puedo usar voz femenina o masculina, en espa√±ol o ingl√©s."
            )

        return []

class ActionGetClassSchedule(Action):
    """Get class schedule information"""

    def name(self) -> Text:
        return "action_get_class_schedule"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Sample class schedule
        schedule = {
            "Lunes": [
                "6:00 AM - Hatha Yoga (Mar√≠a)",
                "9:00 AM - Vinyasa Flow (Carlos)",
                "6:00 PM - Yoga para Principiantes (Ana)",
                "7:30 PM - Meditaci√≥n (Mar√≠a)"
            ],
            "Martes": [
                "7:00 AM - Power Yoga (Carlos)",
                "10:00 AM - Yoga Restaurativo (Ana)",
                "6:00 PM - Ashtanga (Carlos)",
                "8:00 PM - Yin Yoga (Ana)"
            ],
            "Mi√©rcoles": [
                "6:00 AM - Hatha Yoga (Mar√≠a)",
                "9:00 AM - Vinyasa Flow (Carlos)",
                "6:00 PM - Yoga para Principiantes (Ana)",
                "7:30 PM - Meditaci√≥n (Mar√≠a)"
            ],
            "Jueves": [
                "7:00 AM - Power Yoga (Carlos)",
                "10:00 AM - Yoga Restaurativo (Ana)",
                "6:00 PM - Ashtanga (Carlos)",
                "8:00 PM - Yin Yoga (Ana)"
            ],
            "Viernes": [
                "6:00 AM - Hatha Yoga (Mar√≠a)",
                "9:00 AM - Vinyasa Flow (Carlos)",
                "6:00 PM - Yoga para Principiantes (Ana)",
                "7:30 PM - Meditaci√≥n (Mar√≠a)"
            ],
            "S√°bado": [
                "8:00 AM - Hatha Yoga (Mar√≠a)",
                "10:00 AM - Vinyasa Flow (Carlos)",
                "12:00 PM - Yoga para Principiantes (Ana)",
                "2:00 PM - Power Yoga (Carlos)"
            ],
            "Domingo": [
                "9:00 AM - Yoga Restaurativo (Ana)",
                "11:00 AM - Meditaci√≥n (Mar√≠a)",
                "4:00 PM - Yin Yoga (Ana)"
            ]
        }

        message = "**Horario de Clases:**\n\n"
        for day, classes in schedule.items():
            message += f"**{day}:**\n"
            for class_info in classes:
                message += f"  ‚Ä¢ {class_info}\n"
            message += "\n"

        message += "¬øTe gustar√≠a reservar alguna de estas clases?"

        dispatcher.utter_message(text=message)

        return []

class ActionRecommendClass(Action):
    """Recommend a yoga class based on user preferences"""

    def name(self) -> Text:
        return "action_recommend_class"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        skill_level = tracker.get_slot("skill_level")
        class_type = tracker.get_slot("class_type")

        recommendations = {
            "principiante": {
                "classes": ["Yoga para Principiantes", "Hatha Yoga", "Yoga Restaurativo"],
                "description": "Para principiantes, te recomendamos clases suaves que te ayuden a aprender las posturas b√°sicas."
            },
            "intermedio": {
                "classes": ["Vinyasa Flow", "Power Yoga", "Hatha Yoga"],
                "description": "Para nivel intermedio, puedes probar clases m√°s din√°micas que combinen fuerza y flexibilidad."
            },
            "avanzado": {
                "classes": ["Ashtanga", "Power Yoga", "Vinyasa Flow"],
                "description": "Para nivel avanzado, te recomendamos clases desafiantes que requieren m√°s fuerza y equilibrio."
            }
        }

        if skill_level and skill_level.lower() in recommendations:
            rec = recommendations[skill_level.lower()]
            message = f"**Recomendaciones para nivel {skill_level.title()}:**\n\n"
            message += f"{rec['description']}\n\n"
            message += "**Clases recomendadas:**\n"
            for class_name in rec["classes"]:
                message += f"‚Ä¢ {class_name}\n"
            message += "\n¬øTe gustar√≠a reservar alguna de estas clases?"
        else:
            message = "**Clases Populares:**\n\n"
            message += "‚Ä¢ **Hatha Yoga** - Perfecto para todos los niveles\n"
            message += "‚Ä¢ **Vinyasa Flow** - Clase din√°mica y fluida\n"
            message += "‚Ä¢ **Yoga para Principiantes** - Ideal para empezar\n"
            message += "‚Ä¢ **Yoga Restaurativo** - Relajante y terap√©utico\n\n"
            message += "¬øCu√°l te interesa m√°s?"

        dispatcher.utter_message(text=message)

        return []



================================================================================
FILE: backend/rasa/actions_backup.py
SIZE: 11.1KB
TYPE: .py
================================================================================

"""
Custom actions for the wellness astrology chatbot
"""
import logging
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, SessionStarted, ActionExecuted
# from rasa_sdk.forms import FormAction
import requests
import json
from datetime import datetime, timedelta
import re

logger = logging.getLogger(__name__)

class ActionDefaultFallback(Action):
    """Executes the fallback action and goes back to the previous state
    of the conversation"""

    def name(self) -> Text:
        return "action_default_fallback"

    async def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get the last user message
        last_message = tracker.latest_message.get('text', '')

        # Try to understand the intent better
        if any(word in last_message.lower() for word in ['precio', 'costo', 'tarifa', 'price', 'cost']):
            dispatcher.utter_message(response="utter_pricing")
        elif any(word in last_message.lower() for word in ['horario', 'disponibilidad', 'schedule', 'available']):
            dispatcher.utter_message(response="utter_availability")
        elif any(word in last_message.lower() for word in ['contacto', 'tel√©fono', 'email', 'contact', 'phone']):
            dispatcher.utter_message(response="utter_contact")
        elif any(word in last_message.lower() for word in ['servicio', 'sesi√≥n', 'service', 'session']):
            dispatcher.utter_message(response="utter_session_types")
        elif any(word in last_message.lower() for word in ['agendar', 'cita', 'book', 'appointment']):
            dispatcher.utter_message(response="utter_book_session")
        else:
            dispatcher.utter_message(response="utter_default")

        return []

class ActionExtractAstrologyInfo(Action):
    """Extract astrology information from user input"""

    def name(self) -> Text:
        return "action_extract_astrology_info"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get entities from the message
        entities = tracker.latest_message.get('entities', [])
        sign_entity = next((e for e in entities if e['entity'] == 'sign'), None)

        if sign_entity:
            sign = sign_entity['value']
            dispatcher.utter_message(
                text=f"¬°Excelente! Veo que eres {sign}. Los {sign.lower()}s son conocidos por su personalidad √∫nica. ¬øTe gustar√≠a saber m√°s sobre tu signo o agendar una consulta personalizada?"
            )
        else:
            dispatcher.utter_message(
                text="Me encantar√≠a ayudarte con informaci√≥n astrol√≥gica. ¬øCu√°l es tu signo zodiacal o te gustar√≠a agendar una consulta para analizar tu carta natal?"
            )

        return []

class ActionBookSessionForm(Action):
    """Form for booking a session"""

    def name(self) -> Text:
        return "action_book_session_form"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        session_type = tracker.get_slot("session_type")
        preferred_date = tracker.get_slot("preferred_date")
        preferred_time = tracker.get_slot("preferred_time")

        # Here you would typically save to a database or send to a booking system
        dispatcher.utter_message(
            text=f"¬°Perfecto! He registrado tu solicitud para una sesi√≥n de {session_type} el {preferred_date} a las {preferred_time}. Te contactaremos pronto para confirmar todos los detalles."
        )

        return []

class ActionCheckAvailability(Action):
    """Check availability for booking"""

    def name(self) -> Text:
        return "action_check_availability"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get current date and time
        now = datetime.now()

        # Simulate availability check
        available_times = [
            f"{now + timedelta(days=1)}: 10:00 AM, 2:00 PM, 4:00 PM",
            f"{now + timedelta(days=2)}: 9:00 AM, 11:00 AM, 3:00 PM, 5:00 PM",
            f"{now + timedelta(days=3)}: 10:00 AM, 1:00 PM, 4:00 PM"
        ]

        dispatcher.utter_message(
            text=f"Estos son nuestros pr√≥ximos horarios disponibles:\n\n" +
                 "\n".join(available_times) +
                 "\n\n¬øTe gustar√≠a agendar para alguno de estos horarios?"
        )

        return []

class ActionGetPricing(Action):
    """Get detailed pricing information"""

    def name(self) -> Text:
        return "action_get_pricing"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        pricing_info = {
            "astrolog√≠a": "$50 - $80",
            "tarot": "$40 - $60",
            "numerolog√≠a": "$45 - $65",
            "meditaci√≥n": "$35 - $50",
            "terapia": "$60 - $100",
            "coaching": "$70 - $120"
        }

        message = "Aqu√≠ tienes nuestros precios detallados:\n\n"
        for service, price in pricing_info.items():
            message += f"‚Ä¢ {service.title()}: {price}\n"

        message += "\nTambi√©n ofrecemos paquetes especiales con descuentos. ¬øTe interesa alg√∫n servicio espec√≠fico?"

        dispatcher.utter_message(text=message)

        return []

class ActionSentimentAnalysis(Action):
    """Analyze sentiment of user messages"""

    def name(self) -> Text:
        return "action_sentiment_analysis"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        last_message = tracker.latest_message.get('text', '').lower()

        # Simple sentiment analysis
        positive_words = ['bueno', 'excelente', 'genial', 'perfecto', 'gracias', 's√≠', 'yes', 'great', 'good', 'excellent']
        negative_words = ['malo', 'terrible', 'horrible', 'no', 'no quiero', 'no me gusta', 'bad', 'terrible', 'awful']

        positive_count = sum(1 for word in positive_words if word in last_message)
        negative_count = sum(1 for word in negative_words if word in last_message)

        if positive_count > negative_count:
            sentiment = "positive"
            dispatcher.utter_message(text="Me alegra saber que est√°s teniendo una experiencia positiva. ¬øHay algo m√°s en lo que pueda ayudarte?")
        elif negative_count > positive_count:
            sentiment = "negative"
            dispatcher.utter_message(text="Entiendo que puede haber alguna preocupaci√≥n. ¬øTe gustar√≠a que te ayude de alguna manera espec√≠fica?")
        else:
            sentiment = "neutral"

        return [SlotSet("sentiment", sentiment)]

class ActionValidateBooking(Action):
    """Validate booking information"""

    def name(self) -> Text:
        return "action_validate_booking"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get slots
        session_type = tracker.get_slot("session_type")
        date = tracker.get_slot("date")
        time = tracker.get_slot("time")

        # Validate session type
        valid_types = ["astrolog√≠a", "tarot", "numerolog√≠a", "meditaci√≥n", "terapia", "coaching"]
        if session_type and session_type.lower() not in valid_types:
            dispatcher.utter_message(
                text=f"Disculpa, no reconozco el tipo de sesi√≥n '{session_type}'. Nuestros servicios disponibles son: {', '.join(valid_types)}. ¬øCu√°l te interesa?"
            )
            return [SlotSet("session_type", None)]

        # Validate date format (basic check)
        if date and not re.match(r'\d{1,2}[/-]\d{1,2}[/-]\d{2,4}', date):
            dispatcher.utter_message(
                text="Por favor, proporciona la fecha en formato DD/MM/YYYY o DD-MM-YYYY. Por ejemplo: 15/03/2024"
            )
            return [SlotSet("date", None)]

        # Validate time format
        if time and not re.match(r'\d{1,2}:\d{2}\s*(AM|PM|am|pm)?', time):
            dispatcher.utter_message(
                text="Por favor, proporciona la hora en formato HH:MM AM/PM. Por ejemplo: 2:30 PM o 14:30"
            )
            return [SlotSet("time", None)]

        return []

class ActionSaveUserInfo(Action):
    """Save user information for future reference"""

    def name(self) -> Text:
        return "action_save_user_info"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get user information
        name = tracker.get_slot("name")
        sign = tracker.get_slot("sign")
        user_id = tracker.sender_id

        # Here you would typically save to a database
        logger.info(f"Saving user info: {user_id}, {name}, {sign}")

        if name:
            dispatcher.utter_message(
                text=f"¬°Perfecto, {name}! He guardado tu informaci√≥n. ¬øHay algo m√°s en lo que pueda ayudarte?"
            )

        return []

class ActionHandleNameProvision(Action):
    """Handle name provision with proper slot setting and personalized response"""

    def name(self) -> Text:
        return "action_handle_name_provision"

    def run(
        self,
        dispatcher: CollectingDispatcher,
        tracker: Tracker,
        domain: Dict[Text, Any],
    ) -> List[Dict[Text, Any]]:

        # Get entities from the message
        entities = tracker.latest_message.get('entities', [])
        name_entity = next((e for e in entities if e['entity'] == 'name'), None)

        if name_entity:
            name = name_entity['value']
            dispatcher.utter_message(
                text=f"¬°Mucho gusto, {name}! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
            )
            return [SlotSet("name", name)]
        else:
            # If no name entity found, try to extract from text
            text = tracker.latest_message.get('text', '')
            # Simple name extraction patterns
            import re
            patterns = [
                r'mi nombre es (\w+)',
                r'me llamo (\w+)',
                r'soy (\w+)',
                r'call me (\w+)',
                r"I'm (\w+)",
                r"my name is (\w+)",
                r"I am (\w+)"
            ]

            for pattern in patterns:
                match = re.search(pattern, text, re.IGNORECASE)
                if match:
                    name = match.group(1)
                    dispatcher.utter_message(
                        text=f"¬°Mucho gusto, {name}! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
                    )
                    return [SlotSet("name", name)]

            # If no name found, provide generic response
            dispatcher.utter_message(
                text="¬°Mucho gusto! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte?"
            )

        return []



================================================================================
FILE: backend/rasa/actions_enhanced.py
SIZE: 8.5KB
TYPE: .py
================================================================================

from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet, AllSlotsReset
from datetime import datetime, timedelta
import re
import logging

logger = logging.getLogger(__name__)

class ActionBookingConfirmation(Action):
    """Action to confirm booking details and send confirmation"""
    
    def name(self) -> Text:
        return "action_booking_confirmation"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # Get slots
        name = tracker.get_slot("name")
        birth_date = tracker.get_slot("birth_date")
        preferred_time = tracker.get_slot("preferred_time")
        session_type = tracker.get_slot("session_type")
        
        # Validate required information
        if not name:
            dispatcher.utter_message("Necesito tu nombre para completar la reserva. ¬øPodr√≠as proporcion√°rmelo?")
            return []
        
        if not birth_date:
            dispatcher.utter_message("Para una lectura precisa, necesito tu fecha de nacimiento. ¬øCu√°ndo naciste?")
            return []
        
        # Generate confirmation message
        confirmation_message = f"""
¬°Perfecto! Resumiendo tu reserva:

üë§ **Nombre**: {name}
üìÖ **Fecha de Nacimiento**: {birth_date}
‚è∞ **Horario Preferido**: {preferred_time or 'Por confirmar'}
üîÆ **Tipo de Sesi√≥n**: {session_type or 'Carta Natal'}
üí∞ **Precio**: $80 USD

¬øConfirmas esta reserva?
        """
        
        dispatcher.utter_message(confirmation_message)
        
        return []

class ActionSendBookingEmail(Action):
    """Action to send booking confirmation email"""
    
    def name(self) -> Text:
        return "action_send_booking_email"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # Get slots
        name = tracker.get_slot("name")
        birth_date = tracker.get_slot("birth_date")
        preferred_time = tracker.get_slot("preferred_time")
        session_type = tracker.get_slot("session_type")
        
        # In a real implementation, you would send an email here
        # For now, we'll just log the booking details
        logger.info(f"Booking confirmed for {name} - {birth_date} - {preferred_time} - {session_type}")
        
        success_message = """
¬°Excelente! Tu sesi√≥n ha sido confirmada. 

Jos√© se pondr√° en contacto contigo en las pr√≥ximas 24 horas para coordinar los detalles finales y confirmar el horario exacto.

üìß Recibir√°s un email de confirmaci√≥n en breve.
üìû Jos√© te llamar√° para coordinar la sesi√≥n.

¬°Gracias por elegir SoulPath Wellness! üåü
        """
        
        dispatcher.utter_message(success_message)
        
        # Reset slots after successful booking
        return [AllSlotsReset()]

class ActionValidateBirthDate(Action):
    """Action to validate birth date format and calculate age"""
    
    def name(self) -> Text:
        return "action_validate_birth_date"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        birth_date = tracker.get_slot("birth_date")
        
        if not birth_date:
            return []
        
        # Try to parse different date formats
        date_formats = [
            "%d/%m/%Y",
            "%m/%d/%Y", 
            "%Y-%m-%d",
            "%d-%m-%Y",
            "%m-%d-%Y"
        ]
        
        parsed_date = None
        for fmt in date_formats:
            try:
                parsed_date = datetime.strptime(birth_date, fmt)
                break
            except ValueError:
                continue
        
        if not parsed_date:
            dispatcher.utter_message("No pude entender la fecha. ¬øPodr√≠as escribirla en formato DD/MM/AAAA? Por ejemplo: 15/03/1990")
            return [SlotSet("birth_date", None)]
        
        # Check if date is reasonable (not in future, not too old)
        today = datetime.now()
        age = today.year - parsed_date.year - ((today.month, today.day) < (parsed_date.month, parsed_date.day))
        
        if parsed_date > today:
            dispatcher.utter_message("La fecha de nacimiento no puede ser en el futuro. ¬øPodr√≠as verificar la fecha?")
            return [SlotSet("birth_date", None)]
        
        if age > 120:
            dispatcher.utter_message("La fecha parece ser incorrecta. ¬øPodr√≠as verificar tu fecha de nacimiento?")
            return [SlotSet("birth_date", None)]
        
        # Store the validated date
        validated_date = parsed_date.strftime("%d/%m/%Y")
        return [SlotSet("birth_date", validated_date)]

class ActionCalculatePricing(Action):
    """Action to calculate pricing based on session type"""
    
    def name(self) -> Text:
        return "action_calculate_pricing"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        session_type = tracker.get_slot("session_type")
        
        # Pricing based on session type
        pricing = {
            "carta natal": 80,
            "natal chart": 80,
            "consulta de relaciones": 60,
            "relationship consultation": 60,
            "crecimiento personal": 120,
            "personal growth": 120,
            "tarot": 40,
            "numerolog√≠a": 60,
            "numerology": 60
        }
        
        price = pricing.get(session_type.lower() if session_type else "", 80)
        
        # Store the calculated price
        return [SlotSet("session_price", price)]

class ActionAskForMissingInfo(Action):
    """Action to ask for missing information in the booking process"""
    
    def name(self) -> Text:
        return "action_ask_for_missing_info"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        name = tracker.get_slot("name")
        birth_date = tracker.get_slot("birth_date")
        preferred_time = tracker.get_slot("preferred_time")
        
        missing_info = []
        
        if not name:
            missing_info.append("nombre")
        if not birth_date:
            missing_info.append("fecha de nacimiento")
        if not preferred_time:
            missing_info.append("horario preferido")
        
        if missing_info:
            if len(missing_info) == 1:
                message = f"Para completar tu reserva, necesito tu {missing_info[0]}. ¬øPodr√≠as proporcion√°rmelo?"
            else:
                message = f"Para completar tu reserva, necesito: {', '.join(missing_info)}. ¬øPodr√≠as proporcionarme esta informaci√≥n?"
            
            dispatcher.utter_message(message)
        
        return []

class ActionGenerateBookingSummary(Action):
    """Action to generate a booking summary"""
    
    def name(self) -> Text:
        return "action_generate_booking_summary"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        name = tracker.get_slot("name")
        birth_date = tracker.get_slot("birth_date")
        preferred_time = tracker.get_slot("preferred_time")
        session_type = tracker.get_slot("session_type")
        session_price = tracker.get_slot("session_price")
        
        summary = f"""
üìã **RESUMEN DE RESERVA**

üë§ **Cliente**: {name or 'Por confirmar'}
üìÖ **Fecha de Nacimiento**: {birth_date or 'Por confirmar'}
‚è∞ **Horario Preferido**: {preferred_time or 'Por confirmar'}
üîÆ **Tipo de Sesi√≥n**: {session_type or 'Carta Natal'}
üí∞ **Precio**: ${session_price or 80} USD

¬øTodo est√° correcto?
        """
        
        dispatcher.utter_message(summary)
        return []

class ActionCheckAvailability(Action):
    """Action to check available time slots"""
    
    def name(self) -> Text:
        return "action_check_availability"
    
    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:
        # In a real implementation, you would check actual availability
        # For now, we'll return mock availability
        
        availability_message = """
üìÖ **HORARIOS DISPONIBLES ESTA SEMANA**

**Lunes**: 10:00 AM, 2:00 PM, 4:00 PM
**Martes**: 9:00 AM, 11:00 AM, 3:00 PM  
**Mi√©rcoles**: 10:00 AM, 1:00 PM, 5:00 PM
**Jueves**: 9:00 AM, 2:00 PM, 4:00 PM
**Viernes**: 11:00 AM, 3:00 PM, 5:00 PM

¬øCu√°l te conviene m√°s?
        """
        
        dispatcher.utter_message(availability_message)
        return []



================================================================================
FILE: backend/rasa/actions_requirements.txt
SIZE: 0.1KB
TYPE: .txt
================================================================================

# Requirements for Rasa Actions Server
rasa-sdk==3.6.1
requests==2.31.0
python-dateutil==2.8.2
typing-extensions==4.7.1



================================================================================
FILE: backend/rasa/connectors/__init__.py
SIZE: 0.2KB
TYPE: .py
================================================================================

"""
Custom connectors for Rasa
"""

from .whatsapp_connector import WhatsAppInput, WhatsAppOutput
from .telegram_connector import TelegramInput, TelegramOutput

__all__ = ["WhatsAppInput", "WhatsAppOutput", "TelegramInput", "TelegramOutput"]



================================================================================
FILE: backend/rasa/connectors/telegram_connector.py
SIZE: 9.1KB
TYPE: .py
================================================================================

"""
Telegram Bot API Connector for Rasa
Direct integration with Telegram Bot API
"""

import asyncio
import logging
import json
from typing import Dict, Any, Optional, Text, List
from rasa.core.channels.channel import UserMessage, OutputChannel
from rasa.core.channels.rest import RestInput
from rasa.core.channels.channel import CollectingOutputChannel
from sanic import Blueprint, response
from sanic.request import Request
import aiohttp

logger = logging.getLogger(__name__)


class TelegramOutput(OutputChannel):
    """Output channel for Telegram Bot API"""

    @classmethod
    def name(cls) -> Text:
        return "telegram"

    def __init__(self, bot_token: Text) -> None:
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    async def send_text_message(
        self, recipient_id: Text, text: Text, **kwargs: Any
    ) -> None:
        """Send a text message to Telegram"""
        await self._send_message(recipient_id, {"text": text})

    async def send_image_url(
        self, recipient_id: Text, image: Text, **kwargs: Any
    ) -> None:
        """Send an image to Telegram"""
        await self._send_message(recipient_id, {"photo": image})

    async def send_attachment(
        self, recipient_id: Text, attachment: Text, **kwargs: Any
    ) -> None:
        """Send a document to Telegram"""
        await self._send_message(recipient_id, {"document": attachment})

    async def send_buttons(
        self, recipient_id: Text, text: Text, buttons: List[Dict], **kwargs: Any
    ) -> None:
        """Send inline keyboard buttons to Telegram"""
        keyboard = []
        for button in buttons:
            keyboard.append([{"text": button.get("title", ""), "callback_data": button.get("payload", "")}])
        
        reply_markup = {"inline_keyboard": keyboard}
        await self._send_message(recipient_id, {"text": text, "reply_markup": reply_markup})

    async def _send_message(self, recipient_id: Text, message: Dict[Text, Any]) -> None:
        """Send a message to Telegram Bot API"""
        payload = {
            "chat_id": recipient_id,
            **message
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/sendMessage", 
                    json=payload
                ) as resp:
                    if resp.status == 200:
                        logger.info(f"Message sent successfully to {recipient_id}")
                    else:
                        error_text = await resp.text()
                        logger.error(f"Failed to send message: {resp.status} - {error_text}")
        except Exception as e:
            logger.error(f"Error sending Telegram message: {e}")


class TelegramInput(RestInput):
    """Input channel for Telegram Bot API"""

    @classmethod
    def name(cls) -> Text:
        return "telegram"

    @classmethod
    def from_credentials(cls, credentials: Dict[Text, Any]) -> "TelegramInput":
        return cls(
            credentials.get("bot_token"),
            credentials.get("webhook_url")
        )

    def __init__(
        self,
        bot_token: Optional[Text] = None,
        webhook_url: Optional[Text] = None,
    ) -> None:
        self.bot_token = bot_token
        self.webhook_url = webhook_url

    def blueprint(
        self, on_new_message, on_session_started, on_session_ended
    ) -> Blueprint:
        telegram_webhook = Blueprint("telegram_webhook", __name__)

        @telegram_webhook.route("/webhook", methods=["GET"])
        async def health(request: Request):
            """Health check for Telegram webhook"""
            return response.json({"status": "ok", "channel": "telegram"})

        @telegram_webhook.route("/webhook", methods=["POST"])
        async def webhook(request: Request):
            """Handle incoming Telegram messages"""
            try:
                body = await request.json()
                logger.info(f"Telegram webhook received: {body}")

                # Process Telegram webhook
                if body.get("update_id"):
                    message = body.get("message")
                    callback_query = body.get("callback_query")
                    
                    if message:
                        # Handle regular messages
                        chat_id = str(message.get("chat", {}).get("id"))
                        text = message.get("text", "")
                        user_info = message.get("from", {})
                        
                        if text:
                            # Create user message
                            user_message = UserMessage(
                                text=text,
                                sender_id=chat_id,
                                input_channel=self.name(),
                                metadata={
                                    "telegram_message": message,
                                    "user_info": user_info
                                }
                            )
                            
                            # Process message
                            await on_new_message(user_message)
                    
                    elif callback_query:
                        # Handle callback queries (button clicks)
                        chat_id = str(callback_query.get("message", {}).get("chat", {}).get("id"))
                        data = callback_query.get("data", "")
                        user_info = callback_query.get("from", {})
                        
                        if data:
                            # Create user message for callback data
                            user_message = UserMessage(
                                text=data,
                                sender_id=chat_id,
                                input_channel=self.name(),
                                metadata={
                                    "telegram_callback": callback_query,
                                    "user_info": user_info,
                                    "is_callback": True
                                }
                            )
                            
                            # Process callback
                            await on_new_message(user_message)

                return response.json({"status": "ok"})

            except Exception as e:
                logger.error(f"Error processing Telegram webhook: {e}")
                return response.json({"error": "Internal server error"}, status=500)

        return telegram_webhook

    def get_output_channel(self) -> Optional[OutputChannel]:
        """Get the output channel for Telegram"""
        if self.bot_token:
            return TelegramOutput(self.bot_token)
        return None

    async def set_webhook(self) -> bool:
        """Set webhook for Telegram bot"""
        if not self.bot_token or not self.webhook_url:
            logger.error("Bot token and webhook URL are required to set webhook")
            return False

        payload = {
            "url": self.webhook_url,
            "allowed_updates": ["message", "callback_query"]
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"https://api.telegram.org/bot{self.bot_token}/setWebhook",
                    json=payload
                ) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        if result.get("ok"):
                            logger.info("Telegram webhook set successfully")
                            return True
                        else:
                            logger.error(f"Failed to set webhook: {result.get('description')}")
                            return False
                    else:
                        error_text = await resp.text()
                        logger.error(f"Failed to set webhook: {resp.status} - {error_text}")
                        return False
        except Exception as e:
            logger.error(f"Error setting Telegram webhook: {e}")
            return False

    async def get_bot_info(self) -> Optional[Dict]:
        """Get bot information from Telegram"""
        if not self.bot_token:
            return None

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(
                    f"https://api.telegram.org/bot{self.bot_token}/getMe"
                ) as resp:
                    if resp.status == 200:
                        result = await resp.json()
                        if result.get("ok"):
                            return result.get("result")
                        else:
                            logger.error(f"Failed to get bot info: {result.get('description')}")
                            return None
                    else:
                        error_text = await resp.text()
                        logger.error(f"Failed to get bot info: {resp.status} - {error_text}")
                        return None
        except Exception as e:
            logger.error(f"Error getting Telegram bot info: {e}")
            return None



================================================================================
FILE: backend/rasa/connectors/whatsapp_connector.py
SIZE: 6.7KB
TYPE: .py
================================================================================

"""
WhatsApp Business API Connector for Rasa
Direct integration with Meta's WhatsApp Business API
"""

import asyncio
import logging
import json
from typing import Dict, Any, Optional, Text, List
from rasa.core.channels.channel import UserMessage, OutputChannel
from rasa.core.channels.rest import RestInput
from rasa.core.channels.channel import CollectingOutputChannel
from sanic import Blueprint, response
from sanic.request import Request
import aiohttp

logger = logging.getLogger(__name__)


class WhatsAppOutput(OutputChannel):
    """Output channel for WhatsApp Business API"""

    @classmethod
    def name(cls) -> Text:
        return "whatsapp"

    def __init__(self, access_token: Text, phone_number_id: Text) -> None:
        self.access_token = access_token
        self.phone_number_id = phone_number_id
        self.base_url = f"https://graph.facebook.com/v18.0/{phone_number_id}/messages"

    async def send_text_message(
        self, recipient_id: Text, text: Text, **kwargs: Any
    ) -> None:
        """Send a text message to WhatsApp"""
        await self._send_message(recipient_id, {"type": "text", "text": {"body": text}})

    async def send_image_url(
        self, recipient_id: Text, image: Text, **kwargs: Any
    ) -> None:
        """Send an image to WhatsApp"""
        await self._send_message(
            recipient_id, {"type": "image", "image": {"link": image}}
        )

    async def send_attachment(
        self, recipient_id: Text, attachment: Text, **kwargs: Any
    ) -> None:
        """Send an attachment to WhatsApp"""
        await self._send_message(
            recipient_id, {"type": "document", "document": {"link": attachment}}
        )

    async def _send_message(self, recipient_id: Text, message: Dict[Text, Any]) -> None:
        """Send a message to WhatsApp Business API"""
        payload = {
            "messaging_product": "whatsapp",
            "to": recipient_id,
            **message
        }

        headers = {
            "Authorization": f"Bearer {self.access_token}",
            "Content-Type": "application/json"
        }

        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    self.base_url, 
                    json=payload, 
                    headers=headers
                ) as resp:
                    if resp.status == 200:
                        logger.info(f"Message sent successfully to {recipient_id}")
                    else:
                        error_text = await resp.text()
                        logger.error(f"Failed to send message: {resp.status} - {error_text}")
        except Exception as e:
            logger.error(f"Error sending WhatsApp message: {e}")


class WhatsAppInput(RestInput):
    """Input channel for WhatsApp Business API"""

    @classmethod
    def name(cls) -> Text:
        return "whatsapp"

    @classmethod
    def from_credentials(cls, credentials: Dict[Text, Any]) -> "WhatsAppInput":
        return cls(
            credentials.get("access_token"),
            credentials.get("phone_number_id"),
            credentials.get("business_account_id"),
            credentials.get("webhook_url")
        )

    def __init__(
        self,
        access_token: Optional[Text] = None,
        phone_number_id: Optional[Text] = None,
        business_account_id: Optional[Text] = None,
        webhook_url: Optional[Text] = None,
    ) -> None:
        self.access_token = access_token
        self.phone_number_id = phone_number_id
        self.business_account_id = business_account_id
        self.webhook_url = webhook_url

    def blueprint(
        self, on_new_message, on_session_started, on_session_ended
    ) -> Blueprint:
        whatsapp_webhook = Blueprint("whatsapp_webhook", __name__)

        @whatsapp_webhook.route("/webhook", methods=["GET"])
        async def health(request: Request):
            """Webhook verification for WhatsApp"""
            verify_token = request.args.get("hub.verify_token")
            challenge = request.args.get("hub.challenge")
            mode = request.args.get("hub.mode")

            if mode == "subscribe" and verify_token == self.access_token:
                logger.info("WhatsApp webhook verified successfully")
                return response.text(challenge)
            else:
                logger.error("WhatsApp webhook verification failed")
                return response.text("Forbidden", status=403)

        @whatsapp_webhook.route("/webhook", methods=["POST"])
        async def webhook(request: Request):
            """Handle incoming WhatsApp messages"""
            try:
                body = await request.json()
                logger.info(f"WhatsApp webhook received: {body}")

                # Process WhatsApp webhook
                if body.get("object") == "whatsapp_business_account":
                    entries = body.get("entry", [])
                    
                    for entry in entries:
                        changes = entry.get("changes", [])
                        
                        for change in changes:
                            if change.get("field") == "messages":
                                messages = change.get("value", {}).get("messages", [])
                                
                                for message in messages:
                                    if message.get("type") == "text":
                                        sender_id = message.get("from")
                                        text = message.get("text", {}).get("body", "")
                                        
                                        # Create user message
                                        user_message = UserMessage(
                                            text=text,
                                            sender_id=sender_id,
                                            input_channel=self.name(),
                                            metadata={"whatsapp_message": message}
                                        )
                                        
                                        # Process message
                                        await on_new_message(user_message)

                return response.json({"status": "ok"})

            except Exception as e:
                logger.error(f"Error processing WhatsApp webhook: {e}")
                return response.json({"error": "Internal server error"}, status=500)

        return whatsapp_webhook

    def get_output_channel(self) -> Optional[OutputChannel]:
        """Get the output channel for WhatsApp"""
        if self.access_token and self.phone_number_id:
            return WhatsAppOutput(self.access_token, self.phone_number_id)
        return None



================================================================================
FILE: backend/rasa/credentials.yml
SIZE: 1.1KB
TYPE: .yml
================================================================================

# This file contains the credentials for the voice & chat platforms
# which your bot is using.
# https://rasa.com/docs/rasa/messaging-and-voice-channels

rest:
#  # you don't need to provide anything here - this channel doesn't
#  # require any credentials


#facebook:
#  verify: "<verify>"
#  secret: "<your secret>"
#  page-access-token: "<your page access token>"

#slack:
#  slack_token: "<your slack token>"
#  slack_channel: "<the slack channel>"
#  slack_signing_secret: "<your slack signing secret>"

#socketio:
#  user_message_evt: <event name for user message>
#  bot_message_evt: <event name for bot messages>
#  session_persistence: <true/false>

#mattermost:
#  url: "https://<mattermost instance>/api/v4"
#  token: "<bot token>"
#  webhook_url: "<callback URL>"

# This entry is needed if you are using Rasa Enterprise. The entry represents credentials
# for the Rasa Enterprise "channel", i.e. Talk to your bot and Share with guest testers.
rasa:
  url: "http://localhost:5002/api"

# Telegram Bot API configuration
telegram:
  access_token: "8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig"
  verify: "SoulPathAi_bot"



================================================================================
FILE: backend/rasa/data/nlu.yml
SIZE: 21.2KB
TYPE: .yml
================================================================================

version: "3.1"

nlu:
# ============================================================================
# CORE BOOKING INTENTS
# ============================================================================

- intent: greet
  examples: |
    - hello
    - hi
    - hey
    - good morning
    - good evening
    - greetings
    - nice to meet you
    - how are you
    - what's up
    - hey there
    - hello there
    - good day
    - good afternoon
    - howdy
    - hi friend
    - hello friend

- intent: goodbye
  examples: |
    - bye
    - goodbye
    - see you later
    - have a nice day
    - good night
    - take care
    - catch you later
    - until next time
    - farewell
    - see you around

- intent: book_yoga_class
  examples: |
    - I want to book a yoga class
    - I'd like to schedule a yoga class
    - Can I book a yoga session?
    - I want to book a class
    - I need a yoga class
    - I want to schedule a class
    - Can I get a yoga class?
    - I want to book a Hatha class
    - I'd like to book a Vinyasa class
    - I want to make an appointment
    - I need to book a yoga class
    - I want to schedule a yoga session
    - Can I book a class?
    - I'd like to book a class with Maria
    - I want to get a yoga class
    - I need to schedule a yoga class
    - I want to book a beginner class
    - Can I make a booking?
    - I'd like to schedule a yoga class
    - I want to book an appointment
    - I want to reserve a class
    - Can I reserve a yoga class?
    - I'd like to reserve a spot
    - I want to sign up for a class
    - Can I sign up for yoga?

- intent: provide_info
  examples: |
    - My name is [John Smith](person_name)
    - I am [Sarah Johnson](person_name)
    - I'm [Mike Davis](person_name)
    - My email is [john@example.com](email_address)
    - Email: [sarah@gmail.com](email_address)
    - My phone is [555-123-4567](phone_number)
    - Phone number: [+1-555-987-6543](phone_number)
    - I'm a [beginner](skill_level)
    - My level is [intermediate](skill_level)
    - My birth time is [2:30 PM](birth_time)
    - I was born at [3:45 AM](birth_time)
    - Birth place: [New York City](birth_place)
    - I was born in [Los Angeles, California](birth_place)
    - My question is about [my career](question_text)
    - I want to know about [my love life](question_text)
    - I'm curious about [my future](question_text)
    - Language: [English](language_preference)
    - I prefer [Spanish](language_preference)

- intent: ask_package_info
  examples: |
    - What packages do you have?
    - What are your reading options?
    - What types of readings do you offer?
    - Can you tell me about your packages?
    - What's included in each package?
    - What's the difference between packages?
    - Can you explain your services?
    - What reading packages are available?
    - Tell me about your offerings
    - What can I book?
    - What services do you provide?
    - ¬øQu√© paquetes tienes disponibles?
    - ¬øCu√°les son tus opciones de lectura?
    - ¬øQu√© tipos de lecturas ofreces?
    - ¬øPuedes contarme sobre tus paquetes?
    - ¬øQu√© incluye cada paquete?
    - ¬øCu√°l es la diferencia entre paquetes?
    - ¬øPuedes explicar tus servicios?
    - ¬øQu√© paquetes de lectura est√°n disponibles?
    - Cu√©ntame sobre tus ofertas
    - ¬øQu√© puedo reservar?
    - ¬øQu√© servicios proporcionas?
    - ¬øQu√© incluyen los paquetes?
    - ¬øQu√© paquetes ofrecen?
    - ¬øQu√© servicios tienen disponibles?

- intent: ask_pricing
  examples: |
    - What are your prices?
    - How much do you charge?
    - What are your rates?
    - How much does it cost?
    - What's the price?
    - What are the costs?
    - How much for a reading?
    - What's the fee?
    - What are your fees?
    - How much do sessions cost?
    - What's the pricing?
    - Show me prices
    - I want to know the prices
    - Tell me about pricing
    - What are the rates for readings?
    - How much are your services?
    - What do you charge for sessions?
    - What's the cost of a consultation?
    - How much for yoga classes?
    - cost
    - costs
    - rate
    - rates
    - value
    - values
    - ¬øCu√°les son los precios?
    - ¬øCu√°nto cuesta?
    - ¬øCu√°l es el precio?
    - ¬øCu√°les son los costos?
    - ¬øCu√°nto cobras?
    - ¬øCu√°les son las tarifas?
    - ¬øCu√°nto cuesta una lectura?
    - ¬øCu√°l es la tarifa?
    - ¬øCu√°les son las tarifas?
    - ¬øCu√°nto cuestan las sesiones?
    - ¬øCu√°l es el precio?
    - Mu√©strame los precios
    - Quiero saber los precios
    - Cu√©ntame sobre precios
    - ¬øCu√°les son las tarifas para lecturas?
    - ¬øCu√°nto cuestan tus servicios?
    - ¬øCu√°nto cobras por las sesiones?
    - ¬øCu√°l es el costo de una consulta?
    - ¬øCu√°nto cuesta una lectura de astrolog√≠a?
    - costo
    - costos
    - tarifa
    - tarifas
    - valor
    - valores
    - What are your package prices?
    - Show me the pricing options
    - I need pricing information
    - What are the costs for packages?
    - ¬øCu√°les son tus precios?
    - ¬øCu√°nto cobras?
    - ¬øCu√°les son tus tarifas?
    - ¬øCu√°nto cuesta?
    - ¬øCu√°l es el precio?
    - valor
    - valores
    - cu√°l es el valor
    - cu√°les son los valores
    - qu√© valor tiene
    - cu√°nto vale
    - cu√°nto valen
    - precio de
    - precio para
    - coste
    - costes
    - cu√°nto cuesta
    - cu√°nto cuestan
    - cu√°l es el coste
    - cu√°les son los costes
    - tarifario
    - lista de precios
    - tabla de precios
    - cat√°logo de precios
    - informaci√≥n de precios
    - detalles de precios
    - opciones de precios
    - rangos de precios
    - estructura de precios
    - pol√≠tica de precios
    - value
    - values
    - what's the value
    - what are the values
    - how much is it worth
    - what's it worth
    - pricing structure
    - price list
    - price range
    - price options
    - pricing details
    - pricing information
    - cost structure
    - fee structure
    - rate structure
    - pricing policy
    - price catalog
    - price table
    - cost breakdown
    - price breakdown
    - what does it cost
    - how much does it cost
    - what's the cost
    - what are the costs
    - pricing guide
    - price guide
    - cost guide
    - rate guide
    - fee guide
    - pricing sheet
    - price sheet
    - cost sheet
    - rate sheet
    - fee sheet
    - ¬øCu√°les son los costos?
    - ¬øCu√°nto por una lectura?
    - ¬øCu√°l es la tarifa?
    - ¬øCu√°les son tus tarifas?
    - ¬øCu√°nto cuestan las sesiones?
    - ¬øCu√°l es el precio?
    - Mu√©strame los precios
    - Quiero saber los precios
    - Cu√©ntame sobre los precios
    - ¬øCu√°les son las tarifas para lecturas?
    - ¬øCu√°nto cuestan tus servicios?
    - ¬øCu√°nto cobras por las sesiones?
    - ¬øCu√°l es el costo de una consulta?
    - ¬øCu√°nto por una lectura de astrolog√≠a?
    - ¬øCu√°les son los precios de los paquetes?
    - Mu√©strame las opciones de precios
    - Necesito informaci√≥n de precios
    - ¬øCu√°les son los costos de los paquetes?
    - ¬øCu√°nto vale cada paquete?
    - ¬øQu√© precio tienen?
    - ¬øCu√°nto sale?
    - ¬øCu√°l es el costo?
    - Dame los precios
    - Quiero ver los precios
    - Necesito saber los precios

- intent: ask_packages
  examples: |
    - Show me packages
    - I want to see packages
    - Can you show me available packages?
    - What packages are available?
    - Show available packages
    - I'd like to see your packages
    - Display packages
    - List packages
    - Show me what you offer
    - I want to see your offerings
    - Show me the packages
    - Can I see the packages?
    - What do you have available?
    - Show me your services
    - I want to see your services
    - Display your packages
    - List your packages
    - Show me all packages
    - I'd like to see all packages
    - Can you list all packages?
    - What packages do you offer?
    - Show me your reading packages
    - I want to see reading packages
    - Display reading packages
    - List reading packages
    - Show me yoga packages
    - I want to see yoga packages
    - Display yoga packages
    - List yoga packages
    - Dame los paquetes
    - Quiero ver los paquetes
    - Mu√©strame los paquetes
    - Dame la lista
    - Quiero ver paquetes
    - Mu√©strame paquetes
    - Dame la lista de paquetes
    - Quiero ver la lista
    - Mu√©strame la lista
    - ¬øQu√© paquetes tienes?
    - ¬øQu√© paquetes ofreces?
    - Dame los paquetes disponibles
    - Quiero ver los paquetes disponibles
    - Mu√©strame los paquetes disponibles

- intent: show_packages
  examples: |
    - Show me what's available
    - Display what's available
    - List what's available
    - Show me your offerings
    - Display your offerings
    - List your offerings
    - Show me your readings
    - Display your readings
    - List your readings
    - Show me your yoga services
    - Display your yoga services
    - List your yoga services

- intent: package_details
  examples: |
    - Tell me about the [Basic Reading](package_name)
    - What's in the [Premium Package](package_name)?
    - I want details about [package 1](package_name)
    - Can you explain the [Deluxe Reading](package_name)?
    - What does the [Standard Package](package_name) include?
    - I need more info about [package 2](package_name)
    - Tell me more about the [Comprehensive Reading](package_name)
    - What's included in [package 3](package_name)?
    - I want to know about the [Basic](package_name)
    - Can you tell me about [package 1](package_id)?
    - What's in [package 2](package_id)?
    - Tell me about [package 3](package_id)
    - I want details about [package 1](package_id)
    - Can you explain [package 2](package_id)?
    - What does [package 3](package_id) include?
    - I need more info about [package 1](package_id)
    - Tell me more about [package 2](package_id)
    - What's included in [package 3](package_id)?
    - I want to know about [package 1](package_id)
    - Can you tell me about [package 2](package_id)?
    - What's in [package 3](package_id)?
    - Tell me about [package 1](package_id)
    - I want details about [package 2](package_id)
    - Can you explain [package 3](package_id)?
    - What does [package 1](package_id) include?
    - I need more info about [package 2](package_id)
    - Tell me more about [package 3](package_id)
    - What's included in [package 1](package_id)?
    - I want to know about [package 2](package_id)
    - Can you tell me about [package 3](package_id)?

- intent: ask_name
  examples: |
    - What's your name?
    - What should I call you?
    - Who are you?
    - What is your name?
    - May I know your name?
    - ¬øCu√°l es tu nombre?
    - ¬øC√≥mo te llamas?
    - ¬øQui√©n eres?

- intent: ask_class_types
  examples: |
    - What types of yoga classes do you offer?
    - What yoga styles are available?
    - What can you help me with?
    - What do you offer?
    - Tell me about your classes
    - What kinds of yoga do you teach?
    - ¬øQu√© tipos de clases de yoga ofreces?
    - ¬øQu√© estilos de yoga est√°n disponibles?
    - ¬øCon qu√© puedes ayudarme?
    - ¬øQu√© ofreces?
    - Cu√©ntame sobre tus clases
    - What yoga classes do you have?
    - What styles of yoga do you teach?
    - Do you have Hatha yoga?
    - Do you offer Vinyasa classes?
    - What beginner classes do you have?

- intent: ask_payment
  examples: |
    - How do I pay?
    - What are the payment options?
    - How can I make payment?
    - What payment methods do you accept?
    - How do I pay for the session?
    - ¬øC√≥mo pago?
    - ¬øCu√°les son las opciones de pago?
    - ¬øC√≥mo puedo hacer el pago?
    - ¬øQu√© m√©todos de pago aceptas?
    - ¬øC√≥mo pago por la sesi√≥n?

- intent: ask_teachers
  examples: |
    - Who are your yoga teachers?
    - Tell me about your instructors
    - What teachers do you have?
    - Who teaches the classes?
    - Can I see your teacher profiles?
    - Who is available to teach?
    - ¬øQui√©nes son tus profesores de yoga?
    - Cu√©ntame sobre tus instructores
    - ¬øQu√© profesores tienes?
    - ¬øQui√©n ense√±a las clases?
    - ¬øPuedo ver los perfiles de los profesores?
    - ¬øQui√©n est√° disponible para ense√±ar?
    - I want to know about the teachers
    - Show me the instructors
    - Who can I book with?

- intent: teacher_info
  examples: |
    - Tell me about [Maria](teacher_name)
    - Who is [Carlos](teacher_name)?
    - What does [Ana](teacher_name) teach?
    - I want to know about [teacher name](teacher_name)
    - Tell me about [instructor name](teacher_name)
    - Cu√©ntame sobre [Mar√≠a](teacher_name)
    - ¬øQui√©n es [Carlos](teacher_name)?
    - ¬øQu√© ense√±a [Ana](teacher_name)?
    - Quiero saber sobre [nombre del profesor](teacher_name)
    - Cu√©ntame sobre [nombre del instructor](teacher_name)

- intent: class_schedule
  examples: |
    - What's the class schedule?
    - When are the classes?
    - Show me the schedule
    - What times are classes available?
    - When is the next class?
    - ¬øCu√°l es el horario de clases?
    - ¬øCu√°ndo son las clases?
    - Mu√©strame el horario
    - ¬øA qu√© horas hay clases disponibles?
    - ¬øCu√°ndo es la pr√≥xima clase?
    - I want to see the schedule
    - What classes are today?
    - What's available tomorrow?

- intent: ask_skill_level
  examples: |
    - What's my skill level?
    - How do I know my level?
    - What level am I?
    - How experienced am I?
    - ¬øCu√°l es mi nivel?
    - ¬øC√≥mo s√© mi nivel?
    - ¬øQu√© nivel tengo?
    - ¬øQu√© tan experimentado soy?

- intent: provide_skill_level
  examples: |
    - I'm a [beginner](skill_level)
    - I'm [intermediate](skill_level)
    - I'm [advanced](skill_level)
    - I'm a [novice](skill_level)
    - I'm [experienced](skill_level)
    - I'm [new to yoga](skill_level)
    - I've been practicing for [2 years](skill_level)
    - I'm [just starting](skill_level)
    - Soy [principiante](skill_level)
    - Soy [intermedio](skill_level)
    - Soy [avanzado](skill_level)
    - Soy [novato](skill_level)
    - Soy [experimentado](skill_level)
    - Soy [nuevo en yoga](skill_level)
    - He estado practicando por [2 a√±os](skill_level)
    - Estoy [empezando](skill_level)

- intent: select_package
  examples: |
    - I want the [Basic Reading](package_name)
    - I'll take the [Premium Package](package_name)
    - I choose the [Deluxe Reading](package_name)
    - I'd like the [Standard Package](package_name)
    - I want package [1](package_name)
    - I'll go with the [Comprehensive Reading](package_name)
    - I select the [Basic](package_name)
    - I want the [Premium](package_name)
    - I choose [package 2](package_name)
    - I'll take the [Deluxe](package_name)

- intent: select_timeslot
  examples: |
    - I want [Monday at 2 PM](date)
    - I'll take [Tuesday morning](date)
    - I choose [Wednesday at 3:30 PM](date)
    - I want [Thursday afternoon](date)
    - I'll go with [Friday at 10 AM](date)
    - I select [Saturday evening](date)
    - I want [next Monday](date)
    - I'll take [tomorrow at 2 PM](date)
    - I choose [this Friday](date)
    - I want [Monday morning](date)
    - Quiero [lunes a las 2 PM](date)
    - Tomar√© [ma√±ana por la ma√±ana](date)
    - Elijo [mi√©rcoles a las 3:30 PM](date)
    - Quiero [jueves por la tarde](date)
    - Me quedo con [viernes a las 10 AM](date)
    - Selecciono [s√°bado por la noche](date)
    - Quiero [el pr√≥ximo lunes](date)
    - Tomar√© [ma√±ana a las 2 PM](date)
    - Elijo [este viernes](date)
    - Quiero [lunes por la ma√±ana](date)

- intent: confirm_booking
  examples: |
    - Yes, please book it
    - Confirm the appointment
    - Yes, I want to proceed
    - Book it for me
    - Go ahead and schedule it
    - Yes, that's perfect
    - Proceed with the booking
    - Yes, book the session
    - Confirm my appointment
    - S√≠, por favor reserva
    - Confirma la cita
    - S√≠, quiero proceder
    - Res√©rvalo para m√≠
    - Adelante y progr√°malo
    - S√≠, es perfecto
    - Confirmo
    - Procede con la reserva
    - S√≠, reserva la sesi√≥n
    - Confirma mi cita
    - Quiero confirmar la reserva
    - S√≠, adelante con la cita

- intent: affirm
  examples: |
    - yes
    - yeah
    - yep
    - sure
    - absolutely
    - correct
    - right
    - that's right
    - exactly
    - of course
    - definitely
    - I agree
    - sounds good
    - okay
    - ok
    - alright
    - confirmed
    - s√≠
    - claro
    - por supuesto
    - definitivamente
    - estoy de acuerdo
    - suene bien

- intent: deny
  examples: |
    - no
    - nope
    - not really
    - I don't think so
    - that's not right
    - incorrect
    - wrong
    - I disagree
    - no thanks
    - not interested
    - I don't want to
    - cancel
    - stop
    - never mind
    - forget it
    - I changed my mind
    - never
    - no quiero
    - no me interesa
    - cancela
    - detente
    - olv√≠date

- intent: chitchat
  examples: |
    - What is yoga?
    - How does yoga work?
    - What can you tell me about the studio?
    - Who owns this studio?
    - What makes you different?
    - How long have you been open?
    - What should I expect?
    - Is yoga good for beginners?
    - How does this work?
    - What is a yoga class like?
    - Tell me about yourself
    - What do you do?
    - How are you?
    - What's the weather like?
    - How's your day?
    - What time is it?
    - Where are you located?
    - Do you have a website?
    - Can I call you?
    - What's your phone number?
    - ¬øQu√© es el yoga?
    - ¬øC√≥mo funciona el yoga?
    - ¬øQu√© me puedes contar sobre el estudio?
    - ¬øQui√©n es el due√±o de este estudio?
    - ¬øQu√© te hace diferente?
    - ¬øCu√°nto tiempo llevan abiertos?
    - ¬øQu√© debo esperar?
    - ¬øEs bueno el yoga para principiantes?
    - ¬øC√≥mo funciona esto?
    - ¬øC√≥mo es una clase de yoga?
    - Cu√©ntame sobre ti
    - ¬øQu√© haces?
    - ¬øC√≥mo est√°s?
    - ¬øQu√© tiempo hace?
    - ¬øC√≥mo est√° tu d√≠a?
    - ¬øQu√© hora es?
    - ¬øD√≥nde est√°n ubicados?
    - ¬øTienen un sitio web?
    - ¬øPuedo llamarte?
    - ¬øCu√°l es tu n√∫mero de tel√©fono?
    - ¬øQu√© opinas sobre el yoga?
    - ¬øC√≥mo es el yoga para principiantes?
    - ¬øQu√© significa Hatha yoga?
    - ¬øQu√© es Vinyasa?
    - ¬øCu√°ndo es la pr√≥xima clase?

- intent: nlu_fallback
  examples: |
    - asdfghjkl
    - random text
    - gibberish
    - 123456789
    - !@#$%^&*()
    - qwertyuiop
    - zxcvbnm
    - lorem ipsum
    - test test test
    - hello world hello world
    - what?
    - huh?
    - this doesn't make sense
    - I'm lost
    - help me understand
    - what are you talking about?
    - I don't get it
    - can you explain?
    - I'm not sure
    - maybe
    - possibly
    - I think so
    - I guess
    - perhaps
    - might be
    - could be
    - probably
    - likely
    - unlikely
    - definitely not
    - absolutely not
    - always
    - sometimes
    - often
    - rarely
    - usually
    - normally
    - typically
    - generally
    - specifically
    - particularly
    - especially
    - mainly
    - mostly
    - primarily
    - essentially
    - basically
    - fundamentally

# ============================================================================
# TEXT-TO-SPEECH INTENTS
# ============================================================================

- intent: enable_tts
  examples: |
    - habla conmigo
    - quiero que hables
    - activa la voz
    - enciende el audio
    - quiero escucharte
    - habla en voz alta
    - pon voz
    - activa el sonido
    - quiero audio
    - speak to me
    - turn on voice
    - enable audio
    - I want to hear you
    - speak out loud
    - turn on sound
    - enable sound
    - I want audio
    - can you speak?
    - do you have voice?
    - make it talk
    - use voice
    - activate voice
    - turn on TTS
    - enable TTS

- intent: disable_tts
  examples: |
    - desactiva la voz
    - apaga el audio
    - no quiero que hables
    - quita la voz
    - silencia
    - sin sonido
    - solo texto
    - desactiva el sonido
    - no audio
    - turn off voice
    - disable audio
    - I don't want you to speak
    - remove voice
    - silence
    - no sound
    - text only
    - disable sound
    - no audio
    - turn off TTS
    - disable TTS
    - stop speaking

- intent: change_voice
  examples: |
    - cambia la voz
    - quiero otra voz
    - voz femenina
    - voz masculina
    - voz en espa√±ol
    - voz en ingl√©s
    - cambia el tono
    - otra voz
    - voz mexicana
    - voz americana
    - change voice
    - I want another voice
    - female voice
    - male voice
    - Spanish voice
    - English voice
    - change tone
    - another voice
    - Mexican voice
    - American voice
    - different voice
    - new voice

- intent: speak_this
  examples: |
    - di esto
    - habla esto
    - lee esto
    - pronuncia esto
    - di en voz alta
    - habla en voz alta
    - lee en voz alta
    - say this
    - speak this
    - read this
    - pronounce this
    - say out loud
    - speak out loud
    - read out loud
    - tell me this
    - voice this

- intent: test_voice
  examples: |
    - prueba la voz
    - test de voz
    - prueba el audio
    - test de audio
    - ¬øfunciona la voz?
    - ¬øpuedes hablar?
    - prueba de sonido
    - test voice
    - voice test
    - test audio
    - audio test
    - does voice work?
    - can you speak?
    - sound test
    - test TTS
    - TTS test



================================================================================
FILE: backend/rasa/data/nlu_backup.yml
SIZE: 2.9KB
TYPE: .yml
================================================================================

version: "3.1"

nlu:
- intent: greet
  examples: |
    - hey
    - hello
    - hi
    - hello there
    - good morning
    - good evening
    - moin
    - hey there
    - let's go
    - hey dude
    - goodmorning
    - goodevening
    - good afternoon
    - hola
    - buenos d√≠as
    - buenas tardes
    - buenas noches
    - qu√© tal
    - saludos

- intent: goodbye
  examples: |
    - cu
    - good by
    - cee you later
    - good night
    - bye
    - goodbye
    - have a nice day
    - see you around
    - bye bye
    - see you later
    - adi√≥s
    - hasta luego
    - nos vemos
    - hasta pronto
    - que tengas buen d√≠a

- intent: affirm
  examples: |
    - yes
    - y
    - indeed
    - of course
    - that sounds good
    - correct

- intent: deny
  examples: |
    - no
    - n
    - never
    - I don't think so
    - don't like that
    - no way
    - not really

- intent: mood_great
  examples: |
    - perfect
    - great
    - amazing
    - feeling like a king
    - wonderful
    - I am feeling very good
    - I am great
    - I am amazing
    - I am going to save the world
    - super stoked
    - extremely good
    - so so perfect
    - so good
    - so perfect

- intent: mood_unhappy
  examples: |
    - my day was horrible
    - I am sad
    - I don't feel very well
    - I am disappointed
    - super sad
    - I'm so sad
    - sad
    - very sad
    - unhappy
    - not good
    - not very good
    - extremly sad
    - so saad
    - so sad

- intent: bot_challenge
  examples: |
    - are you a bot?
    - are you a human?
    - am I talking to a bot?
    - am I talking to a human?

- intent: provide_name
  examples: |
    - me llamo [Maria](name)
    - mi nombre es [Carlos](name)
    - soy [Ana](name)
    - I am [John](name)
    - my name is [Sarah](name)
    - I'm [Mike](name)
    - me llamo [Beto](name)
    - mi nombre es [Luis](name)
    - soy [Elena](name)

- intent: astrology_sign
  examples: |
    - mi signo
    - cu√°l es mi signo
    - what is my sign
    - my sign is [leo](sign)
    - soy [leo](sign)
    - soy [aries](sign)
    - soy [tauro](sign)
    - soy [g√©minis](sign)
    - soy [c√°ncer](sign)
    - soy [virgo](sign)
    - soy [libra](sign)
    - soy [escorpio](sign)
    - soy [sagitario](sign)
    - soy [capricornio](sign)
    - soy [acuario](sign)
    - soy [piscis](sign)
    - I am [leo](sign)
    - I am [aries](sign)
    - I am [taurus](sign)
    - I am [gemini](sign)
    - I am [cancer](sign)
    - I am [virgo](sign)
    - I am [libra](sign)
    - I am [scorpio](sign)
    - I am [sagittarius](sign)
    - I am [capricorn](sign)
    - I am [aquarius](sign)
    - I am [pisces](sign)

- intent: birth_date
  examples: |
    - nac√≠ el [15/03/1990](date)
    - nac√≠ en [1990](date)
    - mi fecha de nacimiento es [15/03/1990](date)
    - born on [March 15, 1990](date)
    - my birth date is [15/03/1990](date)
    - I was born on [15/03/1990](date)



================================================================================
FILE: backend/rasa/data/rules.yml
SIZE: 1.2KB
TYPE: .yml
================================================================================

version: "3.1"

rules:

- rule: Say goodbye anytime the user says goodbye
  steps:
  - intent: goodbye
  - action: utter_goodbye

- rule: Say 'I am a bot' anytime the user challenges
  steps:
  - intent: bot_challenge
  - action: utter_iamabot

- rule: Greet the user anytime they say hello
  steps:
  - intent: greet
  - action: utter_greet

- rule: Handle name provision
  steps:
  - intent: provide_name
  - action: action_handle_name_provision

- rule: Handle teacher info requests
  steps:
  - intent: ask_teachers
  - action: action_get_teachers_info

- rule: Handle class schedule requests
  steps:
  - intent: class_schedule
  - action: action_get_class_schedule

# Ensure pricing goes straight to packages API
- rule: Pricing triggers packages fetch
  steps:
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages

# Handle class types requests
- rule: Handle class types requests
  steps:
  - intent: ask_class_types
  - action: utter_class_types

# Handle skill level provision
- rule: Handle skill level provision
  steps:
  - intent: provide_skill_level
  - action: action_recommend_class

# Handle yoga class booking
- rule: Handle yoga class booking
  steps:
  - intent: book_yoga_class
  - action: utter_book_class



================================================================================
FILE: backend/rasa/data/stories.yml
SIZE: 7.5KB
TYPE: .yml
================================================================================

version: "3.1"

stories:

# ============================================================================
# BASIC CONVERSATION FLOWS
# ============================================================================

- story: happy path
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_great
  - action: utter_happy

- story: sad path 1
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - intent: affirm
  - action: utter_happy

- story: sad path 2
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - intent: deny
  - action: utter_goodbye

# ============================================================================
# YOGA CLASS BOOKING FLOWS
# ============================================================================

- story: complete booking flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: book_yoga_class
  - action: utter_book_class
  - intent: provide_info
  - action: action_handle_name_provision
  - intent: ask_class_types
  - action: utter_class_types
  - intent: select_package
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: select_timeslot
  - action: action_check_availability
  - intent: confirm_booking
  - action: utter_booking_confirmation

- story: simple booking flow
  steps:
  - intent: book_yoga_class
  - action: utter_book_class
  - intent: select_package
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: confirm_booking
  - action: utter_booking_confirmation

- story: booking with availability check
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_availability
  - action: action_check_availability
  - intent: book_yoga_class
  - action: utter_book_class
  - intent: confirm_booking
  - action: utter_booking_confirmation

# ============================================================================
# INFORMATION REQUEST FLOWS
# ============================================================================

- story: pricing information flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: chitchat
  - action: utter_help

- story: direct pricing flow
  steps:
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: package_details
  - action: utter_package_details
  - action: action_fetch_package_details
  - intent: select_package
  - action: utter_book_class

- story: contact information flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_contact
  - action: utter_contact
  - intent: ask_help
  - action: utter_help

- story: services information flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_class_types
  - action: utter_class_types
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages

- story: teacher information flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_teachers
  - action: action_get_teachers_info
  - intent: teacher_info
  - action: action_get_teachers_info
  - intent: book_yoga_class
  - action: utter_book_class

- story: class schedule flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: class_schedule
  - action: action_get_class_schedule
  - intent: book_yoga_class
  - action: utter_book_class

# ============================================================================
# CHITCHAT AND FALLBACK FLOWS
# ============================================================================

- story: chitchat flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: chitchat
  - action: utter_ask_class_types
  - intent: ask_skill_level
  - action: utter_ask_skill_level
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages

- story: fallback recovery flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: nlu_fallback
  - action: action_default_fallback
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages

- story: multiple fallback attempts
  steps:
  - intent: nlu_fallback
  - action: action_default_fallback
  - intent: nlu_fallback
  - action: utter_default
  - intent: ask_help
  - action: utter_help

# ============================================================================
# NAME AND INFORMATION FLOWS
# ============================================================================

- story: name provision flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: provide_name
  - action: action_handle_name_provision
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages

- story: skill level flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: ask_skill_level
  - action: utter_ask_skill_level
  - intent: provide_skill_level
  - action: action_recommend_class
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages

# ============================================================================
# COMPLEX INTERACTION FLOWS
# ============================================================================

- story: comprehensive consultation flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: chitchat
  - action: utter_ask_class_types
  - intent: ask_skill_level
  - action: utter_ask_skill_level
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: package_details
  - action: utter_package_details
  - action: action_fetch_package_details
  - intent: select_package
  - action: utter_book_class
  - intent: confirm_booking
  - action: utter_booking_confirmation

- story: information gathering flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: provide_info
  - action: action_handle_name_provision
  - intent: ask_skill_level
  - action: utter_ask_skill_level
  - intent: ask_package_info
  - action: utter_ask_packages
  - action: action_fetch_packages
  - intent: select_timeslot
  - action: action_check_availability
  - intent: confirm_booking
  - action: utter_booking_confirmation

# ============================================================================
# TEXT-TO-SPEECH FLOWS
# ============================================================================

- story: enable TTS flow
  steps:
  - intent: enable_tts
  - action: action_toggle_tts
  - intent: test_voice
  - action: action_text_to_speech

- story: disable TTS flow
  steps:
  - intent: disable_tts
  - action: action_toggle_tts

- story: change voice flow
  steps:
  - intent: change_voice
  - action: action_set_voice
  - intent: test_voice
  - action: action_text_to_speech

- story: test voice flow
  steps:
  - intent: test_voice
  - action: action_text_to_speech

- story: speak specific text flow
  steps:
  - intent: speak_this
  - action: action_text_to_speech

- story: TTS with package info flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: enable_tts
  - action: action_toggle_tts
  - intent: ask_packages
  - action: utter_ask_packages
  - action: action_fetch_packages
  - action: action_speak_response

- story: TTS with booking flow
  steps:
  - intent: greet
  - action: utter_greet
  - intent: enable_tts
  - action: action_toggle_tts
  - intent: book_yoga_class
  - action: utter_book_class
  - action: action_speak_response
  - intent: confirm_booking
  - action: utter_booking_confirmation
  - action: action_speak_response



================================================================================
FILE: backend/rasa/data/stories_backup.yml
SIZE: 0.5KB
TYPE: .yml
================================================================================

version: "3.1"

stories:

- story: happy path
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_great
  - action: utter_happy

- story: sad path 1
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - intent: affirm
  - action: utter_happy

- story: sad path 2
  steps:
  - intent: greet
  - action: utter_greet
  - intent: mood_unhappy
  - action: utter_cheer_up
  - action: utter_did_that_help
  - intent: deny
  - action: utter_goodbye



================================================================================
FILE: backend/rasa/data/test_nlu.yml
SIZE: 1.7KB
TYPE: .yml
================================================================================

version: "3.1"

nlu:
# Test cases for greeting
- intent: greet
  examples: |
    - hola buenos d√≠as
    - hey qu√© tal
    - hello there
    - saludos

# Test cases for booking
- intent: book_yoga_class
  examples: |
    - quiero agendar una clase de yoga
    - necesito reservar una sesi√≥n de yoga
    - me gustar√≠a programar una clase
    - can I book a yoga class

# Test cases for class types questions
- intent: ask_class_types
  examples: |
    - qu√© tipos de yoga ofrecen
    - cu√©ntame sobre las clases
    - qu√© significa Hatha yoga
    - I want to know about Vinyasa classes

# Test cases for pricing
- intent: ask_pricing
  examples: |
    - cu√°nto cuesta una sesi√≥n
    - qu√© precios tienen
    - how much does it cost
    - what are your rates
    - ¬øcu√°les son tus precios?
    - ¬øcu√°nto cobras?
    - ¬øcu√°nto vale cada paquete?
    - show me prices
    - I want to know the prices
    - what are your package prices?
    - ¬øcu√°nto cuestan los paquetes?
    - ¬øcu√°les son los costos?
    - dame los precios
    - necesito saber los precios

# Test cases for availability
- intent: ask_availability
  examples: |
    - cu√°ndo tienen disponibilidad
    - qu√© horarios manejan
    - when are you available
    - what's your schedule

# Test cases for contact
- intent: ask_contact
  examples: |
    - c√≥mo los contacto
    - cu√°l es su tel√©fono
    - how can I reach you
    - what's your phone number

# Test cases for help
- intent: ask_help
  examples: |
    - necesito ayuda
    - no entiendo
    - I need help
    - can you help me

# Test cases for goodbye
- intent: goodbye
  examples: |
    - adi√≥s gracias
    - hasta luego
    - goodbye
    - see you later



================================================================================
FILE: backend/rasa/data/test_stories.yml
SIZE: 2.9KB
TYPE: .yml
================================================================================

version: "3.1"

stories:
# Test story: Basic greeting flow
- story: test_greeting_flow
  steps:
  - user: |
      hola buenos d√≠as
  - intent: greet
  - action: utter_greet
  - user: |
      adi√≥s gracias
  - intent: goodbye
  - action: utter_goodbye

# Test story: Booking inquiry flow
- story: test_booking_inquiry
  steps:
  - user: |
      hola, quiero agendar una clase
  - intent: greet
  - action: utter_greet
  - user: |
      quiero reservar una clase de yoga
  - intent: book_yoga_class
  - action: utter_book_class

# Test story: Pricing inquiry flow
- story: test_pricing_inquiry
  steps:
  - user: |
      cu√°nto cuesta una clase
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - user: |
      me interesa el yoga
  - intent: book_yoga_class
  - action: utter_book_class

# Test story: Class types question flow
- story: test_class_types_question
  steps:
  - user: |
      qu√© tipos de yoga ofrecen
  - intent: ask_class_types
  - action: utter_class_types
  - user: |
      me gustar√≠a agendar una clase
  - intent: book_yoga_class
  - action: utter_book_class

# Test story: Help request flow
- story: test_help_request
  steps:
  - user: |
      necesito ayuda
  - intent: ask_help
  - action: utter_help
  - user: |
      qu√© servicios ofrecen
  - intent: ask_class_types
  - action: utter_class_types

# Test story: Contact inquiry flow
- story: test_contact_inquiry
  steps:
  - user: |
      c√≥mo los contacto
  - intent: ask_contact
  - action: utter_contact
  - user: |
      gracias, hasta luego
  - intent: goodbye
  - action: utter_goodbye

# Test story: Availability inquiry flow
- story: test_availability_inquiry
  steps:
  - user: |
      cu√°ndo tienen disponibilidad
  - intent: ask_availability
  - action: utter_availability
  - user: |
      perfecto, quiero agendar
  - intent: affirm
  - action: utter_happy

# Test story: Complex booking flow
- story: test_complex_booking
  steps:
  - user: |
      hola, qu√© servicios ofrecen
  - intent: greet
  - action: utter_greet
  - user: |
      qu√© tipos de clases tienen
  - intent: ask_class_types
  - action: utter_class_types
  - user: |
      cu√°nto cuesta el yoga
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - user: |
      me interesa agendar una clase
  - intent: book_yoga_class
  - action: utter_book_class

# Test story: English pricing inquiry
- story: test_english_pricing
  steps:
  - user: |
      what are your prices?
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - user: |
      I want to book a class
  - intent: book_yoga_class
  - action: utter_book_class

# Test story: Spanish pricing inquiry
- story: test_spanish_pricing
  steps:
  - user: |
      ¬øcu√°les son tus precios?
  - intent: ask_pricing
  - action: utter_ask_packages
  - action: action_fetch_packages
  - user: |
      quiero reservar una clase
  - intent: book_yoga_class
  - action: utter_book_class



================================================================================
FILE: backend/rasa/deploy-to-render.sh
SIZE: 1.7KB
TYPE: .sh
================================================================================

#!/bin/bash

# Render Deployment Script for Rasa
echo "üöÄ Preparing Rasa deployment to Render..."

# Check if required files exist
REQUIRED_FILES=("requirements.txt" "domain.yml" "config.yml" "credentials.yml" "endpoints.yml")
for file in "${REQUIRED_FILES[@]}"; do
    if [ ! -f "$file" ]; then
        echo "‚ùå Missing required file: $file"
        exit 1
    else
        echo "‚úÖ Found: $file"
    fi
done

# Check if model exists
if [ ! -d "models" ] || [ -z "$(ls -A models/*.tar.gz 2>/dev/null)" ]; then
    echo "‚ö†Ô∏è  Warning: No trained model found in models/ directory"
    echo "   Make sure to train your model first:"
    echo "   rasa train"
else
    MODEL_FILE=$(ls models/*.tar.gz | head -1)
    echo "‚úÖ Found model: $MODEL_FILE"
fi

# Check if actions file exists
if [ -f "actions.py" ]; then
    echo "‚úÖ Actions file found: actions.py"
elif [ -f "actions/actions.py" ]; then
    echo "‚úÖ Actions file found: actions/actions.py"
else
    echo "‚ö†Ô∏è  No actions file found"
fi

echo ""
echo "üéØ Render Deployment Ready!"
echo ""
echo "üìã Next Steps:"
echo "1. Push these changes to your GitHub repository"
echo "2. Go to https://render.com"
echo "3. Create a new Web Service"
echo "4. Connect your GitHub repository"
echo "5. Configure the service:"
echo "   - Runtime: Python 3"
echo "   - Build Command: pip install -r backend/rasa/requirements.txt"
echo "   - Start Command: cd backend/rasa && python -m rasa run --enable-api --cors \"*\" --port \$PORT --credentials credentials.yml --endpoints endpoints.yml"
echo "6. Add environment variables from env.example"
echo "7. Deploy!"
echo ""
echo "üìö For detailed instructions, see RENDER_DEPLOYMENT.md"



================================================================================
FILE: backend/rasa/domain.yml
SIZE: 13.0KB
TYPE: .yml
================================================================================

version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - provide_name
  - ask_name
  - book_class
  - ask_class_types
  - ask_pricing
  - ask_availability
  - ask_contact
  - ask_help
  - mood_great
  - mood_unhappy
  - bot_challenge
  - ask_packages
  - show_packages
  - package_details
  - select_package
  - ask_package_info
  - book_yoga_class
  - ask_teachers
  - teacher_info
  - class_schedule
  - ask_payment
  - ask_skill_level
  - provide_skill_level
  - chitchat
  - provide_info
  - select_timeslot
  - confirm_booking
  - nlu_fallback
  - enable_tts
  - disable_tts
  - change_voice
  - speak_this
  - test_voice

entities:
  - name
  - class_type
  - date
  - time
  - teacher_name
  - price
  - location
  - phone
  - email
  - package_name
  - package_id
  - voice_preference
  - text_to_speak
  - skill_level
  - duration

slots:
  name:
    type: text
    mappings:
    - type: from_entity
      entity: name
  class_type:
    type: text
    mappings:
    - type: from_entity
      entity: class_type
  date:
    type: text
    mappings:
    - type: from_entity
      entity: date
  time:
    type: text
    mappings:
    - type: from_entity
      entity: time
  teacher_name:
    type: text
    mappings:
    - type: from_entity
      entity: teacher_name
  skill_level:
    type: text
    mappings:
    - type: from_entity
      entity: skill_level
  package_name:
    type: text
    mappings:
    - type: from_entity
      entity: package_name
  package_id:
    type: text
    mappings:
    - type: from_entity
      entity: package_id
  available_packages:
    type: text
    mappings:
    - type: from_text
  selected_package:
    type: text
    mappings:
    - type: from_entity
      entity: package_name
  selected_timeslot:
    type: text
    mappings:
    - type: from_text
  sentiment:
    type: text
    mappings:
    - type: from_text
  missing_details:
    type: text
    mappings:
    - type: from_text
  tts_enabled:
    type: bool
    mappings:
    - type: from_text
  tts_voice:
    type: text
    mappings:
    - type: from_entity
      entity: voice_preference
  text_to_speak:
    type: text
    mappings:
    - type: from_entity
      entity: text_to_speak

responses:
  utter_greet:
    - text: "¬°Hola! Soy tu asistente del estudio de yoga. ¬øEn qu√© puedo ayudarte hoy?"
    - text: "¬°Buenos d√≠as! Bienvenido a nuestro estudio de yoga. ¬øC√≥mo puedo asistirte?"
    - text: "¬°Saludos! Estoy aqu√≠ para ayudarte con clases de yoga y bienestar. ¬øQu√© necesitas?"

  utter_goodbye:
    - text: "¬°Hasta luego! Que tengas un excelente d√≠a."
    - text: "¬°Adi√≥s! Que tengas una pr√°ctica maravillosa."
    - text: "¬°Nos vemos pronto! Que tengas mucha paz en tu camino."

  utter_happy:
    - text: "¬°Excelente! Me alegra poder ayudarte."
    - text: "¬°Perfecto! Estoy aqu√≠ para lo que necesites."
    - text: "¬°Genial! Me da mucho gusto poder asistirte."

  utter_ask_name:
    - text: "¬°Soy tu asistente del estudio de yoga! ¬øCu√°l es tu nombre?"
    - text: "¬°Hola! Bienvenido a nuestro estudio. ¬øC√≥mo te llamas?"
    - text: "¬°Saludos! ¬øCu√°l es tu nombre para poder dirigirme a ti personalmente?"

  utter_ask_class_types:
    - text: "¬°Me encantar√≠a ayudarte a encontrar la clase perfecta! ¬øQu√© tipo de yoga te interesa?"
    - text: "¬°Tenemos muchas opciones de clases! ¬øQu√© estilo de yoga prefieres?"
    - text: "¬°Perfecto! ¬øTe gustar√≠a probar Hatha, Vinyasa, Ashtanga, o alguna otra modalidad?"

  utter_ask_teachers:
    - text: "¬°Excelente! üåü Tenemos profesores incre√≠bles. ¬øTe gustar√≠a conocer m√°s sobre alguno en particular?"
    - text: "¬°Perfecto! Nuestros instructores son muy experimentados. ¬øQu√© nivel de experiencia buscas?"

  utter_ask_skill_level:
    - text: "¬°Perfecto! Para recomendarte la clase ideal, ¬øcu√°l es tu nivel de experiencia con yoga?"
    - text: "¬°Excelente! ¬øEres principiante, intermedio o avanzado en yoga?"

  utter_book_class:
    - text: "¬°Me encantar√≠a ayudarte a reservar una clase de yoga! ¬øQu√© tipo de clase te interesa?"
    - text: "¬°Excelente! Puedo ayudarte a programar una clase. ¬øQu√© estilo de yoga te gustar√≠a practicar?"
    - text: "¬°Perfecto! ¬øTe gustar√≠a reservar Hatha, Vinyasa, Ashtanga, o alguna otra modalidad?"

  utter_class_types:
    - text: "Ofrecemos varios tipos de clases: üßò Hatha Yoga, üåä Vinyasa Flow, üî• Ashtanga, üåÖ Yoga Matutino, üåô Yoga Nocturno, ü§∏ Yoga para Principiantes, üí™ Power Yoga, y üßò‚Äç‚ôÄÔ∏è Meditaci√≥n. ¬øCu√°l te interesa m√°s?"
    - text: "Tenemos estas modalidades disponibles: Hatha, Vinyasa, Ashtanga, Yoga Restaurativo, Hot Yoga, y Yoga para Principiantes. ¬øQu√© te llama la atenci√≥n?"
    - text: "Nuestros estilos incluyen: Hatha cl√°sico, Vinyasa din√°mico, Ashtanga tradicional, Yoga Restaurativo, y clases especializadas. ¬øCu√°l prefieres?"

  utter_pricing:
    - text: "Nuestras tarifas var√≠an seg√∫n el tipo de clase: Clases individuales desde $25, clases grupales desde $15, paquetes de 10 clases desde $120, y membres√≠a mensual desde $80. ¬øTe interesa alg√∫n tipo espec√≠fico?"
    - text: "Los precios van desde $15 hasta $50 dependiendo del tipo de clase y duraci√≥n. Tambi√©n tenemos paquetes especiales. ¬øQu√© tipo de clase te interesa?"
    - text: "Tenemos diferentes opciones de inversi√≥n seg√∫n tus necesidades. ¬øTe gustar√≠a que te d√© m√°s detalles sobre alg√∫n tipo espec√≠fico de clase?"

  utter_availability:
    - text: "Estamos disponibles de lunes a viernes de 9:00 AM a 7:00 PM, y s√°bados de 10:00 AM a 4:00 PM. ¬øQu√© d√≠a te funciona mejor?"
    - text: "Nuestros horarios son: Lunes a viernes 9:00-19:00, s√°bados 10:00-16:00. ¬øCu√°ndo te gustar√≠a agendar?"
    - text: "Trabajamos de lunes a viernes de 9 AM a 7 PM, y s√°bados de 10 AM a 4 PM. ¬øQu√© horario prefieres?"

  utter_contact:
    - text: "Puedes contactarnos por WhatsApp al +52 55 1234 5678, email: info@yogastudio.com, o visitarnos en nuestra ubicaci√≥n en Ciudad de M√©xico. ¬øPrefieres alg√∫n m√©todo espec√≠fico?"
    - text: "Nuestros datos de contacto: üì± WhatsApp: +52 55 1234 5678, üìß Email: info@yogastudio.com, üìç Ubicaci√≥n: Ciudad de M√©xico. ¬øC√≥mo te gustar√≠a comunicarte?"
    - text: "Te puedes comunicar con nosotros por WhatsApp, email o visitarnos. ¬øQu√© m√©todo prefieres para contactarte?"

  utter_help:
    - text: "¬°Por supuesto! Estoy aqu√≠ para ayudarte. Puedo asistirte con informaci√≥n sobre nuestras clases, agendar reservas, responder preguntas sobre yoga, o darte informaci√≥n de contacto. ¬øEn qu√© espec√≠ficamente necesitas ayuda?"
    - text: "¬°Claro que s√≠! Puedo ayudarte a: agendar clases, explicarte nuestros servicios, responder preguntas sobre yoga, darte informaci√≥n de precios y horarios. ¬øQu√© necesitas saber?"
    - text: "¬°Por supuesto! Estoy aqu√≠ para orientarte. ¬øTe gustar√≠a saber sobre nuestras clases, agendar una reserva, o tienes alguna pregunta espec√≠fica?"

  utter_booking_confirmation:
    - text: "¬°Perfecto! He registrado tu inter√©s en reservar una clase. Te contactaremos pronto para confirmar la fecha y hora. ¬øHay algo m√°s en lo que pueda ayudarte?"
    - text: "¬°Excelente! Tu solicitud de clase ha sido registrada. Nos pondremos en contacto contigo para finalizar los detalles. ¬øNecesitas algo m√°s?"
    - text: "¬°Genial! Hemos anotado tu solicitud. Te contactaremos para confirmar todos los detalles de tu clase. ¬øHay algo m√°s que pueda hacer por ti?"

  utter_iamabot:
    - text: "Soy un asistente del estudio de yoga creado con Rasa."

  utter_cheer_up:
    - text: "¬°Aqu√≠ tienes algo para animarte!"
      image: "https://i.imgur.com/nGF1K8f.jpg"

  utter_did_that_help:
    - text: "¬øTe ayud√≥ eso?"

  utter_ask_packages:
    - text: "¬°Excelente! Te mostrar√© nuestros paquetes disponibles. D√©jame obtener la informaci√≥n m√°s actualizada para ti."
    - text: "¬°Perfecto! Tengo varios paquetes de astrolog√≠a y bienestar. Te los muestro enseguida."

  utter_show_packages:
    - text: "Aqu√≠ tienes nuestros paquetes disponibles. ¬øTe gustar√≠a saber m√°s detalles sobre alguno?"
    - text: "Estos son nuestros paquetes actuales. ¬øCu√°l te interesa m√°s?"

  utter_package_details:
    - text: "¬°Claro! Te dar√© m√°s detalles sobre ese paquete. D√©jame obtener la informaci√≥n espec√≠fica."
    - text: "Excelente elecci√≥n. Te proporciono toda la informaci√≥n detallada sobre ese paquete."

  utter_default:
    - text: "Disculpa, no entend√≠ completamente tu mensaje. ¬øPodr√≠as reformularlo o decirme en qu√© puedo ayudarte?"
    - text: "Lo siento, no pude procesar eso correctamente. ¬øMe puedes explicar de otra manera?"

  utter_fallback:
    - text: "No estoy seguro de entender exactamente lo que necesitas. ¬øPodr√≠as darme m√°s detalles?"
    - text: "Disculpa, esa consulta es un poco compleja para m√≠. ¬øPuedes ser m√°s espec√≠fico?"

  utter_ask_session_type:
    - text: "¬øQu√© tipo de sesi√≥n te interesa? Ofrecemos astrolog√≠a, tarot, numerolog√≠a, meditaci√≥n, terapia y coaching espiritual."
    - text: "¬øQu√© tipo de lectura prefieres? Tengo disponibles: astrolog√≠a, tarot, numerolog√≠a, meditaci√≥n, terapia hol√≠stica y coaching."

  utter_ask_birth_date:
    - text: "Para darte una lectura precisa, necesito tu fecha de nacimiento completa (d√≠a, mes y a√±o). ¬øPodr√≠as compartirla conmigo?"
    - text: "Para crear tu carta natal necesito tu fecha de nacimiento. ¬øCu√°l es?"

  utter_ask_preferred_time:
    - text: "¬øQu√© horario te queda mejor? Puedo revisar la disponibilidad para ti."
    - text: "¬øEn qu√© momento del d√≠a prefieres tu sesi√≥n?"

  utter_availability_options:
    - text: "Estos son nuestros horarios disponibles esta semana. ¬øCu√°l prefieres?"
    - text: "Aqu√≠ tienes las opciones de horario disponibles. ¬øCu√°ndo te conviene?"

  utter_ask_payment:
    - text: "¬øC√≥mo prefieres hacer el pago? Aceptamos diferentes m√©todos de pago."
    - text: "¬øQu√© m√©todo de pago te resulta m√°s conveniente?"

  utter_pricing_info:
    - text: "Nuestros precios var√≠an seg√∫n el tipo de sesi√≥n. ¬øTe gustar√≠a saber m√°s sobre alg√∫n servicio espec√≠fico?"
    - text: "Los precios dependen del tipo de lectura. ¬øSobre cu√°l quieres informaci√≥n?"

  utter_payment_methods:
    - text: "Aceptamos pagos por transferencia bancaria, tarjetas de cr√©dito y efectivo. ¬øCu√°l prefieres?"
    - text: "Puedes pagar mediante transferencia, tarjeta o en efectivo seg√∫n tu preferencia."

  utter_booking_success:
    - text: "¬°Excelente! Tu cita ha sido agendada exitosamente. Te enviaremos los detalles por email."
    - text: "¬°Perfecto! Tu reserva est√° confirmada. Recibir√°s toda la informaci√≥n necesaria."

  utter_contact_info:
    - text: "Puedes contactarnos por WhatsApp al +52 55 1234 5678, email: info@soulpath.lat, o visitarnos en Ciudad de M√©xico."
    - text: "Nuestros datos de contacto: üì± WhatsApp: +52 55 1234 5678, üìß Email: info@soulpath.lat"

  utter_help_info:
    - text: "¬°Claro que te ayudo! Puedo agendar citas, dar informaci√≥n sobre servicios, precios y horarios. ¬øQu√© necesitas?"
    - text: "Estoy aqu√≠ para ayudarte. Puedo asistirte con reservas, informaci√≥n de servicios o cualquier pregunta que tengas."

  utter_bot_challenge_response:
    - text: "Soy un asistente de IA especializado en astrolog√≠a y bienestar espiritual. ¬øEn qu√© puedo ayudarte?"
    - text: "Soy tu asistente virtual para consultas astrol√≥gicas y bienestar. ¬øQu√© te gustar√≠a saber?"

  utter_understand_denial:
    - text: "Entiendo que ahora mismo no es el mejor momento. ¬øHay algo m√°s en lo que pueda ayudarte?"
    - text: "No hay problema. ¬øTe gustar√≠a informaci√≥n sobre nuestros servicios o tienes alguna otra pregunta?"

  # TTS Responses
  utter_tts_enabled:
    - text: "üîä ¬°Perfecto! He activado la funci√≥n de voz. Ahora te hablar√© en mis respuestas."
    - text: "üé§ ¬°Excelente! La funci√≥n de voz est√° activada. Podr√°s escucharme hablar."

  utter_tts_disabled:
    - text: "üîá He desactivado la funci√≥n de voz. Solo te enviar√© texto a partir de ahora."
    - text: "üîá La funci√≥n de voz est√° desactivada. Te enviar√© solo mensajes de texto."

  utter_voice_changed:
    - text: "üé§ ¬°Perfecto! He cambiado la voz. Ahora usar√© esta nueva voz para hablarte."
    - text: "üéµ ¬°Excelente! La voz ha sido actualizada. ¬øTe gusta c√≥mo suena?"

  utter_voice_test:
    - text: "üé§ ¬°Hola! Esta es una prueba de voz. ¬øPuedes escucharme claramente?"
    - text: "üîä Probando la funci√≥n de voz... ¬øC√≥mo sueno?"

  utter_tts_error:
    - text: "‚ö†Ô∏è Lo siento, hay un problema con la funci√≥n de voz. Te enviar√© solo texto por ahora."
    - text: "üîß Hay un error t√©cnico con el audio. Continuar√© con mensajes de texto."

actions:
  - action_default_fallback
  - action_handle_name_provision
  - action_get_teachers_info
  - action_book_class_form
  - action_check_availability
  - action_get_pricing
  - action_sentiment_analysis
  - action_validate_booking
  - action_save_user_info
  - action_fetch_packages
  - action_fetch_package_details
  - action_text_to_speech
  - action_speak_response
  - action_toggle_tts
  - action_set_voice
  - action_get_class_schedule
  - action_recommend_class

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true



================================================================================
FILE: backend/rasa/domain_backup.yml
SIZE: 6.9KB
TYPE: .yml
================================================================================

version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - provide_name
  - ask_name
  - astrology_question
  - astrology_sign
  - birth_date
  - book_session
  - ask_session_types
  - ask_pricing
  - ask_availability
  - ask_contact
  - ask_help
  - mood_great
  - mood_unhappy
  - bot_challenge

entities:
  - name
  - sign
  - date
  - time
  - session_type
  - price
  - location
  - phone
  - email

slots:
  name:
    type: text
    mappings:
    - type: from_entity
      entity: name
  sign:
    type: text
    mappings:
    - type: from_entity
      entity: sign
  date:
    type: text
    mappings:
    - type: from_entity
      entity: date
  time:
    type: text
    mappings:
    - type: from_entity
      entity: time
  session_type:
    type: text
    mappings:
    - type: from_entity
      entity: session_type

responses:
  utter_greet:
    - text: "¬°Hola! Soy tu asistente de astrolog√≠a y bienestar. ¬øEn qu√© puedo ayudarte hoy?"
    - text: "¬°Buenos d√≠as! Soy tu gu√≠a c√≥smica. ¬øC√≥mo puedo asistirte?"
    - text: "¬°Saludos! Estoy aqu√≠ para brindarte orientaci√≥n astrol√≥gica. ¬øQu√© necesitas?"

  utter_goodbye:
    - text: "¬°Hasta luego! Que tengas un excelente d√≠a."
    - text: "¬°Adi√≥s! Que las estrellas te gu√≠en."
    - text: "¬°Nos vemos pronto! Que tengas mucha luz en tu camino."

  utter_happy:
    - text: "¬°Excelente! Me alegra poder ayudarte."
    - text: "¬°Perfecto! Estoy aqu√≠ para lo que necesites."
    - text: "¬°Genial! Me da mucho gusto poder asistirte."

  utter_ask_name:
    - text: "¬°Soy tu asistente de astrolog√≠a! Puedes llamarme tu gu√≠a c√≥smica. ¬øCu√°l es tu nombre?"
    - text: "¬°Hola! Soy tu gu√≠a espiritual. ¬øC√≥mo te llamas?"
    - text: "¬°Saludos! ¬øCu√°l es tu nombre para poder dirigirme a ti personalmente?"

  utter_astrology_question:
    - text: "¬°Me encantar√≠a ayudarte con tus preguntas astrol√≥gicas! ¬øQu√© orientaci√≥n espec√≠fica buscas?"
    - text: "¬°Las estrellas tienen mucho que contarnos! ¬øQu√© aspecto de la astrolog√≠a te interesa m√°s?"
    - text: "¬°Perfecto! La astrolog√≠a es mi especialidad. ¬øQu√© te gustar√≠a saber sobre tu signo o carta natal?"

  utter_astrology_sign:
    - text: "¬°Excelente! üåü Para darte una lectura precisa de tu signo, necesito tu fecha de nacimiento completa (d√≠a, mes y a√±o). ¬øPodr√≠as compartirla conmigo?"
    - text: "¬°Perfecto! Con tu signo puedo ayudarte mejor. ¬øPodr√≠as darme tu fecha de nacimiento para una lectura m√°s precisa?"

  utter_birth_date:
    - text: "¬°Perfecto! üåü Con tu fecha de nacimiento puedo crear tu carta natal completa. ¬øTe gustar√≠a que te haga una lectura personalizada?"
    - text: "¬°Excelente! Ahora puedo darte una lectura mucho m√°s precisa. ¬øQu√© aspecto de tu carta natal te interesa m√°s?"

  utter_book_session:
    - text: "¬°Me encantar√≠a ayudarte a agendar una sesi√≥n con Jos√© Garfias! ¬øQu√© tipo de lectura te interesa?"
    - text: "¬°Excelente! Puedo ayudarte a programar una consulta. ¬øQu√© tipo de sesi√≥n astrol√≥gica te gustar√≠a reservar?"
    - text: "¬°Perfecto! ¬øTe gustar√≠a agendar una sesi√≥n de astrolog√≠a, tarot, numerolog√≠a o meditaci√≥n?"

  utter_session_types:
    - text: "Ofrecemos varios tipos de sesiones: üìø Astrolog√≠a y carta natal, üîÆ Lectura de tarot, üî¢ Numerolog√≠a, üßò Meditaci√≥n guiada, üíÜ Terapia hol√≠stica, y üéØ Coaching espiritual. ¬øCu√°l te interesa m√°s?"
    - text: "Tenemos estas modalidades disponibles: Consultas astrol√≥gicas, lecturas de tarot, sesiones de numerolog√≠a, meditaci√≥n, terapia hol√≠stica y coaching. ¬øQu√© te llama la atenci√≥n?"
    - text: "Nuestros servicios incluyen: An√°lisis de carta natal, lecturas de tarot, numerolog√≠a, meditaci√≥n, terapia y coaching espiritual. ¬øCu√°l prefieres?"

  utter_pricing:
    - text: "Nuestras tarifas var√≠an seg√∫n el tipo de sesi√≥n: Consultas astrol√≥gicas desde $50, lecturas de tarot desde $40, numerolog√≠a desde $45, y sesiones de meditaci√≥n desde $35. ¬øTe interesa alg√∫n servicio espec√≠fico?"
    - text: "Los precios van desde $35 hasta $80 dependiendo del tipo de sesi√≥n y duraci√≥n. Tambi√©n tenemos paquetes especiales. ¬øQu√© tipo de consulta te interesa?"
    - text: "Tenemos diferentes opciones de inversi√≥n seg√∫n el servicio. ¬øTe gustar√≠a que te d√© m√°s detalles sobre alg√∫n tipo espec√≠fico de sesi√≥n?"

  utter_availability:
    - text: "Estamos disponibles de lunes a viernes de 9:00 AM a 7:00 PM, y s√°bados de 10:00 AM a 4:00 PM. ¬øQu√© d√≠a te funciona mejor?"
    - text: "Nuestros horarios son: Lunes a viernes 9:00-19:00, s√°bados 10:00-16:00. ¬øCu√°ndo te gustar√≠a agendar?"
    - text: "Trabajamos de lunes a viernes de 9 AM a 7 PM, y s√°bados de 10 AM a 4 PM. ¬øQu√© horario prefieres?"

  utter_contact:
    - text: "Puedes contactarnos por WhatsApp al +52 55 1234 5678, email: info@josegarfias.com, o visitarnos en nuestra ubicaci√≥n en Ciudad de M√©xico. ¬øPrefieres alg√∫n m√©todo espec√≠fico?"
    - text: "Nuestros datos de contacto: üì± WhatsApp: +52 55 1234 5678, üìß Email: info@josegarfias.com, üìç Ubicaci√≥n: Ciudad de M√©xico. ¬øC√≥mo te gustar√≠a comunicarte?"
    - text: "Te puedes comunicar con nosotros por WhatsApp, email o visitarnos. ¬øQu√© m√©todo prefieres para contactarte?"

  utter_help:
    - text: "¬°Por supuesto! Estoy aqu√≠ para ayudarte. Puedo asistirte con informaci√≥n sobre nuestros servicios, agendar citas, responder preguntas astrol√≥gicas, o darte informaci√≥n de contacto. ¬øEn qu√© espec√≠ficamente necesitas ayuda?"
    - text: "¬°Claro que s√≠! Puedo ayudarte a: agendar sesiones, explicarte nuestros servicios, responder preguntas astrol√≥gicas, darte informaci√≥n de precios y horarios. ¬øQu√© necesitas saber?"
    - text: "¬°Por supuesto! Estoy aqu√≠ para orientarte. ¬øTe gustar√≠a saber sobre nuestros servicios, agendar una cita, o tienes alguna pregunta espec√≠fica?"

  utter_booking_confirmation:
    - text: "¬°Perfecto! He registrado tu inter√©s en agendar una sesi√≥n. Te contactaremos pronto para confirmar la fecha y hora. ¬øHay algo m√°s en lo que pueda ayudarte?"
    - text: "¬°Excelente! Tu solicitud de cita ha sido registrada. Nos pondremos en contacto contigo para finalizar los detalles. ¬øNecesitas algo m√°s?"
    - text: "¬°Genial! Hemos anotado tu solicitud. Te contactaremos para confirmar todos los detalles de tu sesi√≥n. ¬øHay algo m√°s que pueda hacer por ti?"

  utter_iamabot:
    - text: "Soy un asistente de astrolog√≠a y bienestar creado con Rasa."

  utter_cheer_up:
    - text: "¬°Aqu√≠ tienes algo para animarte!"
      image: "https://i.imgur.com/nGF1K8f.jpg"

  utter_did_that_help:
    - text: "¬øTe ayud√≥ eso?"

actions:
  - action_default_fallback
  - action_handle_name_provision
  - action_extract_astrology_info
  - action_book_session_form
  - action_check_availability
  - action_get_pricing
  - action_sentiment_analysis
  - action_validate_booking
  - action_save_user_info

session_config:
  session_expiration_time: 60
  carry_over_slots_to_new_session: true



================================================================================
FILE: backend/rasa/domain_enhanced.yml
SIZE: 9.7KB
TYPE: .yml
================================================================================

version: "3.1"

intents:
  - greet
  - goodbye
  - affirm
  - deny
  - provide_name
  - provide_birth_date
  - book_session
  - ask_session_types
  - ask_pricing
  - ask_availability
  - ask_contact
  - ask_payment
  - ask_help
  - bot_challenge

entities:
  - name
  - date
  - time
  - session_type
  - price
  - location
  - phone
  - email

slots:
  name:
    type: text
    mappings:
    - type: from_entity
      entity: name
  birth_date:
    type: text
    mappings:
    - type: from_entity
      entity: date
  preferred_time:
    type: text
    mappings:
    - type: from_entity
      entity: time
  session_type:
    type: text
    mappings:
    - type: from_entity
      entity: session_type

responses:
  # GREETINGS - Natural and warm
  utter_greet:
    - text: "¬°Hola! Soy tu asistente de SoulPath Wellness. ¬øEn qu√© puedo ayudarte hoy?"
    - text: "¬°Buenos d√≠as! Estoy aqu√≠ para ayudarte a reservar una sesi√≥n con Jos√© Garfias. ¬øC√≥mo puedo asistirte?"
    - text: "¬°Saludos! Bienvenido a SoulPath Wellness. ¬øTe gustar√≠a agendar una consulta astrol√≥gica?"
    - text: "Hello! I'm your SoulPath Wellness assistant. How can I help you today?"
    - text: "Good morning! I'm here to help you book a session with Jose Garfias. How can I assist you?"
    - text: "Welcome to SoulPath Wellness! Would you like to schedule an astrology consultation?"

  # SESSION TYPE INQUIRY
  utter_ask_session_type:
    - text: "¬°Perfecto! ¬øQu√© tipo de sesi√≥n te interesa? Tenemos lecturas de carta natal, consultas de relaciones, y sesiones de crecimiento personal."
    - text: "Excelente! ¬øQu√© tipo de lectura te gustar√≠a reservar? Puedo ayudarte con carta natal, tarot, o numerolog√≠a."
    - text: "Great! What type of session interests you? We offer natal chart readings, relationship consultations, and personal growth sessions."
    - text: "Perfect! What kind of reading would you like to book? I can help you with natal charts, tarot, or numerology."

  utter_session_types:
    - text: "Ofrecemos varios tipos de sesiones:\n\nüåü **Carta Natal** - An√°lisis completo de tu personalidad y destino\nüíï **Consultas de Relaciones** - Orientaci√≥n sobre amor y conexiones\nüå± **Crecimiento Personal** - Desarrollo espiritual y autoconocimiento\nüîÆ **Tarot** - Lecturas de cartas para orientaci√≥n\nüìä **Numerolog√≠a** - An√°lisis basado en n√∫meros\n\n¬øCu√°l te interesa m√°s?"
    - text: "We offer several types of sessions:\n\nüåü **Natal Chart** - Complete analysis of your personality and destiny\nüíï **Relationship Consultations** - Guidance on love and connections\nüå± **Personal Growth** - Spiritual development and self-knowledge\nüîÆ **Tarot** - Card readings for guidance\nüìä **Numerology** - Analysis based on numbers\n\nWhich one interests you most?"

  # NAME COLLECTION
  utter_ask_name:
    - text: "¬°Excelente elecci√≥n! Para personalizar tu sesi√≥n, ¬øpodr√≠as decirme tu nombre?"
    - text: "Perfecto! ¬øC√≥mo te llamas? Quiero poder dirigirme a ti personalmente durante la consulta."
    - text: "Great choice! To personalize your session, could you tell me your name?"
    - text: "Perfect! What's your name? I'd like to address you personally during the consultation."

  # BIRTH DATE COLLECTION
  utter_ask_birth_date:
    - text: "¬°Gracias {name}! Para crear tu carta natal precisa, necesito tu fecha de nacimiento completa (d√≠a, mes y a√±o). ¬øPodr√≠as compartirla conmigo?"
    - text: "Perfecto {name}! Para una lectura astrol√≥gica precisa, necesito tu fecha de nacimiento. ¬øCu√°ndo naciste?"
    - text: "Thank you {name}! To create your precise natal chart, I need your complete birth date (day, month, and year). Could you share it with me?"
    - text: "Perfect {name}! For an accurate astrological reading, I need your birth date. When were you born?"

  # TIME PREFERENCE
  utter_ask_preferred_time:
    - text: "¬°Excelente! Con tu fecha de nacimiento puedo preparar una lectura muy precisa. ¬øTienes alguna preferencia de horario? Jos√© est√° disponible de lunes a viernes de 9 AM a 6 PM."
    - text: "Perfecto! Ahora puedo crear tu carta natal. ¬øQu√© horario te funciona mejor? Tenemos disponibilidad de lunes a viernes."
    - text: "Excellent! With your birth date I can prepare a very precise reading. Do you have any time preference? Jose is available Monday to Friday from 9 AM to 6 PM."
    - text: "Perfect! Now I can create your natal chart. What time works best for you? We have availability Monday through Friday."

  # AVAILABILITY
  utter_availability_options:
    - text: "Tenemos los siguientes horarios disponibles esta semana:\n\nüìÖ **Lunes**: 10:00 AM, 2:00 PM, 4:00 PM\nüìÖ **Martes**: 9:00 AM, 11:00 AM, 3:00 PM\nüìÖ **Mi√©rcoles**: 10:00 AM, 1:00 PM, 5:00 PM\nüìÖ **Jueves**: 9:00 AM, 2:00 PM, 4:00 PM\nüìÖ **Viernes**: 11:00 AM, 3:00 PM, 5:00 PM\n\n¬øCu√°l te conviene m√°s?"
    - text: "We have the following times available this week:\n\nüìÖ **Monday**: 10:00 AM, 2:00 PM, 4:00 PM\nüìÖ **Tuesday**: 9:00 AM, 11:00 AM, 3:00 PM\nüìÖ **Wednesday**: 10:00 AM, 1:00 PM, 5:00 PM\nüìÖ **Thursday**: 9:00 AM, 2:00 PM, 4:00 PM\nüìÖ **Friday**: 11:00 AM, 3:00 PM, 5:00 PM\n\nWhich works best for you?"

  # PRICING INFORMATION
  utter_pricing_info:
    - text: "Los precios de nuestras sesiones son:\n\nüåü **Carta Natal (60 min)**: $80 USD\nüíï **Consulta de Relaciones (45 min)**: $60 USD\nüå± **Crecimiento Personal (90 min)**: $120 USD\nüîÆ **Tarot (30 min)**: $40 USD\nüìä **Numerolog√≠a (45 min)**: $60 USD\n\n¬øTe parece bien el precio?"
    - text: "Our session prices are:\n\nüåü **Natal Chart (60 min)**: $80 USD\nüíï **Relationship Consultation (45 min)**: $60 USD\nüå± **Personal Growth (90 min)**: $120 USD\nüîÆ **Tarot (30 min)**: $40 USD\nüìä **Numerology (45 min)**: $60 USD\n\nDoes the price work for you?"

  # PAYMENT METHODS
  utter_payment_methods:
    - text: "Aceptamos los siguientes m√©todos de pago:\n\nüí≥ **Tarjeta de Cr√©dito/D√©bito** (Visa, Mastercard, American Express)\nüí∞ **PayPal**\nüè¶ **Transferencia Bancaria**\nüíµ **Efectivo** (solo para sesiones presenciales)\n\n¬øCu√°l prefieres usar?"
    - text: "We accept the following payment methods:\n\nüí≥ **Credit/Debit Card** (Visa, Mastercard, American Express)\nüí∞ **PayPal**\nüè¶ **Bank Transfer**\nüíµ **Cash** (for in-person sessions only)\n\nWhich would you prefer to use?"

  # BOOKING CONFIRMATION
  utter_booking_confirmation:
    - text: "¬°Perfecto! Resumiendo tu reserva:\n\nüë§ **Nombre**: {name}\nüìÖ **Fecha de Nacimiento**: {birth_date}\n‚è∞ **Horario Preferido**: {preferred_time}\nüí∞ **Precio**: $80 USD\n\n¬øConfirmas esta reserva?"
    - text: "Perfect! Summarizing your booking:\n\nüë§ **Name**: {name}\nüìÖ **Birth Date**: {birth_date}\n‚è∞ **Preferred Time**: {preferred_time}\nüí∞ **Price**: $80 USD\n\nDo you confirm this booking?"

  # BOOKING SUCCESS
  utter_booking_success:
    - text: "¬°Excelente! Tu sesi√≥n ha sido confirmada. Jos√© se pondr√° en contacto contigo en las pr√≥ximas 24 horas para coordinar los detalles finales. ¬°Gracias por elegir SoulPath Wellness!"
    - text: "Excellent! Your session has been confirmed. Jose will contact you within the next 24 hours to coordinate final details. Thank you for choosing SoulPath Wellness!"

  # CONTACT INFORMATION
  utter_contact_info:
    - text: "Puedes contactarnos de las siguientes maneras:\n\nüìû **Tel√©fono**: +1 (555) 123-4567\nüìß **Email**: info@soulpathwellness.com\nüåê **Website**: www.soulpathwellness.com\nüìç **Direcci√≥n**: 123 Wellness St, City, State\n\n¬øTe gustar√≠a agendar una sesi√≥n?"
    - text: "You can contact us in the following ways:\n\nüìû **Phone**: +1 (555) 123-4567\nüìß **Email**: info@soulpathwellness.com\nüåê **Website**: www.soulpathwellness.com\nüìç **Address**: 123 Wellness St, City, State\n\nWould you like to schedule a session?"

  # HELP INFORMATION
  utter_help_info:
    - text: "¬°Estoy aqu√≠ para ayudarte! Puedo asistirte con:\n\nüìÖ **Reservar sesiones** con Jos√© Garfias\nüí∞ **Informaci√≥n de precios** y paquetes\n‚è∞ **Disponibilidad** y horarios\nüìû **Informaci√≥n de contacto**\nüîÆ **Tipos de sesiones** disponibles\n\n¬øEn qu√© te puedo ayudar espec√≠ficamente?"
    - text: "I'm here to help you! I can assist you with:\n\nüìÖ **Booking sessions** with Jose Garfias\nüí∞ **Pricing information** and packages\n‚è∞ **Availability** and schedules\nüìû **Contact information**\nüîÆ **Types of sessions** available\n\nWhat can I help you with specifically?"

  # BOT CHALLENGE RESPONSE
  utter_bot_challenge_response:
    - text: "Soy un asistente virtual dise√±ado para ayudarte a reservar sesiones con Jos√© Garfias. Aunque no soy humano, estoy aqu√≠ para hacer que tu experiencia de reserva sea f√°cil y agradable. ¬øTe gustar√≠a agendar una consulta?"
    - text: "I'm a virtual assistant designed to help you book sessions with Jose Garfias. While I'm not human, I'm here to make your booking experience easy and pleasant. Would you like to schedule a consultation?"

  # DENIAL RESPONSE
  utter_understand_denial:
    - text: "Entiendo perfectamente. No hay problema. Si cambias de opini√≥n m√°s tarde, estar√© aqu√≠ para ayudarte. ¬øHay algo m√°s en lo que pueda asistirte?"
    - text: "I understand perfectly. No problem at all. If you change your mind later, I'll be here to help you. Is there anything else I can assist you with?"

  # GOODBYES
  utter_goodbye:
    - text: "¬°Hasta luego! Que tengas un excelente d√≠a. Si necesitas algo m√°s, no dudes en contactarnos."
    - text: "Goodbye! Have an excellent day. If you need anything else, don't hesitate to contact us."
    - text: "¬°Adi√≥s! Que las estrellas te gu√≠en en tu camino."
    - text: "Farewell! May the stars guide you on your path."

actions:
  - action_booking_confirmation
  - action_send_booking_email
  - action_validate_birth_date
  - action_calculate_pricing



================================================================================
FILE: backend/rasa/endpoints.generated.yml
SIZE: 0.1KB
TYPE: .yml
================================================================================

# Autogenerated by start-rasa.sh
action_endpoint:
  url: "http://localhost:5055/webhook"



================================================================================
FILE: backend/rasa/endpoints.yml
SIZE: 1.2KB
TYPE: .yml
================================================================================

# This file contains the different endpoints your bot can use.

# Server where the models are pulled from.
# https://rasa.com/docs/rasa/model-storage#fetching-models-from-a-server

#models:
#  url: http://my-server.com/models/default_core@latest
#  wait_time_between_pulls:  10   # [optional](default: 100)

# Server which runs your custom actions.
# https://rasa.com/docs/rasa/custom-actions

action_endpoint:
  url: "${ACTION_ENDPOINT_URL:http://localhost:5055/webhook}"

# Tracker store which is used to store the conversations.
# By default the conversations are stored in memory.
# https://rasa.com/docs/rasa/tracker-stores

tracker_store:
  type: SQL
  dialect: postgresql
  # Use DATABASE_URL provided by environment. Do not include default fallback to avoid literal string parsing issues.
  url: "${DATABASE_URL}"
  login_db: "${POSTGRES_DB:rasa}"
  pool_size: 10
  pool_recycle: 300
  echo: false

# Note: tracker store uses PostgreSQL when DATABASE_URL is provided.

# Event broker which all conversation events should be streamed to.
# https://rasa.com/docs/rasa/event-brokers

#event_broker:
#  url: localhost
#  username: username
#  password: password
#  queue: queue



================================================================================
FILE: backend/rasa/env.example
SIZE: 0.9KB
TYPE: .example
================================================================================

# Environment Variables for Render Deployment

# Render automatically provides PORT
PORT=5005

# Actions server port (if deploying separately)
ACTIONS_PORT=5055

# Cross-service communication (Render internal URL)
ACTIONS_SERVICE_URL=https://your-actions-service.onrender.com

# Action endpoint URL (auto-configured)
ACTION_ENDPOINT_URL=https://your-actions-service.onrender.com/webhook

# Rasa Configuration
RASA_MODEL_SERVER=null
RASA_CORE_ENDPOINTS=endpoints.yml
RASA_NLU_ENDPOINTS=endpoints.yml

# Python path
PYTHONPATH=/opt/render/project/src

# Optional: Database configuration for tracker store
TRACKER_STORE_TYPE=postgres
# DATABASE_URL format: postgresql://USER:PASSWORD@HOST:PORT/DBNAME
DATABASE_URL=postgresql://postgres:postgres@localhost:5432/rasa
POSTGRES_DB=rasa

# Optional: Redis for tracker store
# REDIS_URL=redis://your-redis-url
# REDIS_PASSWORD=your-redis-password

# Optional: Logging configuration
LOG_LEVEL=INFO
LOG_FILE=null



================================================================================
FILE: backend/rasa/fix_and_retrain.sh
SIZE: 1.1KB
TYPE: .sh
================================================================================

#!/bin/bash

# Quick fix and retrain script for the slot interpolation error
echo "üîß Fixing slot interpolation error and retraining model..."

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Validate the fixed configuration
print_status "Validating fixed configuration..."
rasa data validate --domain domain.yml --data data/ --config config.yml

if [ $? -eq 0 ]; then
    print_success "Configuration validation passed!"
else
    echo "‚ùå Configuration validation failed!"
    exit 1
fi

# Train the model with fixes
print_status "Retraining model with fixes..."
rasa train \
    --config config.yml \
    --domain domain.yml \
    --data data/ \
    --out models/ \
    --force

if [ $? -eq 0 ]; then
    print_success "Model retrained successfully!"
    print_status "The slot interpolation error has been fixed."
    print_status "You can now run the model with: rasa run --model models/ --enable-api --cors '*'"
else
    echo "‚ùå Model training failed!"
    exit 1
fi



================================================================================
FILE: backend/rasa/generate_audio.py
SIZE: 3.6KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Generate MP3 audio file using TTS service
"""
import requests
import base64
import os
from datetime import datetime

def generate_audio(text, voice="en-US-AvaNeural", filename=None):
    """Generate MP3 audio from text using TTS service"""
    
    # TTS Service configuration
    tts_url = "https://openai-edge-tts-k05k.onrender.com/v1/audio/speech"
    api_key = "sdfsdfdsfsdfsdf"
    
    # Prepare the request payload
    payload = {
        "model": "tts-1",
        "input": text,
        "voice": voice,
        "response_format": "mp3",
        "speed": 1.0
    }
    
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }
    
    print(f"üé§ Generating audio for: '{text}'")
    print(f"üéµ Using voice: {voice}")
    
    try:
        response = requests.post(tts_url, json=payload, headers=headers, timeout=15)
        
        if response.status_code == 200:
            # Generate filename if not provided
            if not filename:
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"generated_audio_{timestamp}.mp3"
            
            # Save audio file
            with open(filename, "wb") as f:
                f.write(response.content)
            
            print(f"‚úÖ Audio generated successfully!")
            print(f"üìÅ File saved as: {filename}")
            print(f"üìä File size: {len(response.content)} bytes")
            print(f"üìç Full path: {os.path.abspath(filename)}")
            
            return filename, response.content
            
        else:
            print(f"‚ùå Error: {response.status_code} - {response.text}")
            return None, None
            
    except requests.exceptions.RequestException as e:
        print(f"‚ùå Request error: {e}")
        return None, None
    except Exception as e:
        print(f"‚ùå Unexpected error: {e}")
        return None, None

def main():
    """Main function to generate audio files"""
    
    print("üéµ TTS Audio Generator")
    print("=" * 50)
    
    # Sample texts to generate
    sample_texts = [
        {
            "text": "Hello! I'm your astrology assistant. How can I help you today?",
            "voice": "en-US-AvaNeural",
            "filename": "welcome_english.mp3"
        },
        {
            "text": "¬°Hola! Soy tu asistente de astrolog√≠a. ¬øEn qu√© puedo ayudarte hoy?",
            "voice": "es-MX-DaliaNeural", 
            "filename": "welcome_spanish.mp3"
        },
        {
            "text": "Welcome to Soul Path Wellness. We offer astrology readings, tarot sessions, and spiritual guidance.",
            "voice": "en-US-AvaNeural",
            "filename": "services_english.mp3"
        },
        {
            "text": "Bienvenido a Soul Path Wellness. Ofrecemos lecturas de astrolog√≠a, sesiones de tarot y orientaci√≥n espiritual.",
            "voice": "es-MX-DaliaNeural",
            "filename": "services_spanish.mp3"
        }
    ]
    
    generated_files = []
    
    for i, sample in enumerate(sample_texts, 1):
        print(f"\n{i}. Generating: {sample['filename']}")
        filename, audio_data = generate_audio(
            sample['text'], 
            sample['voice'], 
            sample['filename']
        )
        
        if filename:
            generated_files.append(filename)
    
    print(f"\n" + "=" * 50)
    print(f"‚úÖ Generated {len(generated_files)} audio files:")
    for filename in generated_files:
        print(f"   üìÅ {filename}")
    
    print(f"\nüéß You can now play these audio files to test the TTS quality!")

if __name__ == "__main__":
    main()



================================================================================
FILE: backend/rasa/render.yaml
SIZE: 1.0KB
TYPE: .yaml
================================================================================

services:
  - type: web
    name: rasa-server
    runtime: docker
    dockerfilePath: ./Dockerfile.rasa
    dockerContext: .
    dockerBuildArgs:
      - BUILDKIT_INLINE_CACHE=1
    envVars:
      - key: PORT
        generateValue: true
      - key: RASA_MODEL_SERVER
        value: null
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: TF_CPP_MIN_LOG_LEVEL
        value: "2"
      - key: OMP_NUM_THREADS
        value: "1"
      - key: MKL_NUM_THREADS
        value: "1"
      - key: NUMEXPR_NUM_THREADS
        value: "1"
      - key: OPENBLAS_NUM_THREADS
        value: "1"
    healthCheckPath: /webhooks/rest/
    plan: starter

  - type: web
    name: rasa-actions
    runtime: docker
    dockerfilePath: ./Dockerfile.rasa
    dockerContext: .
    command: python -m rasa run actions --port $ACTIONS_PORT
    envVars:
      - key: ACTIONS_PORT
        value: 5055
      - key: PYTHONUNBUFFERED
        value: "1"
      - key: RASA_MODEL_SERVER
        value: null
    plan: starter



================================================================================
FILE: backend/rasa/requirements.txt
SIZE: 0.8KB
TYPE: .txt
================================================================================

# Core Rasa dependencies
rasa==3.6.21
rasa-sdk==3.6.2

# HTTP and async libraries
requests==2.31.0
aiohttp==3.8.6
httpx==0.24.1
sanic==23.6.0
uvloop==0.17.0

# Telegram integration
python-telegram-bot==20.7

# Web framework dependencies
fastapi==0.104.1
uvicorn==0.24.0
gunicorn==21.2.0
python-multipart==0.0.6

# Data processing and validation
pydantic==1.10.13
typing-extensions==4.8.0

# Environment and configuration
python-dotenv==1.0.0
pytz==2023.3

# Build tools
setuptools==70.3.0
SQLAlchemy<2.0
psycopg2-binary==2.9.9
ruamel.yaml==0.17.21
wheel==0.41.2

# TensorFlow for ML (CPU version for Render)
tensorflow-cpu==2.13.0

# spaCy for NLP
spacy>=3.6.0

# Additional utilities
numpy>=1.21.0
scikit-learn>=1.0.0
matplotlib>=3.5.0
seaborn>=0.11.0

# Security and monitoring
cryptography>=3.4.8
psutil>=5.8.0



================================================================================
FILE: backend/rasa/results/DIETClassifier_errors.json
SIZE: 1.5KB
TYPE: .json
================================================================================

[
  {
    "text": "I want details about package 1",
    "entities": [
      {
        "start": 21,
        "end": 30,
        "value": "package 1",
        "entity": "package_name"
      }
    ],
    "predicted_entities": [
      {
        "entity": "package_id",
        "start": 21,
        "end": 30,
        "confidence_entity": 0.8411823511123657,
        "value": "package 1",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  },
  {
    "text": "I need more info about package 2",
    "entities": [
      {
        "start": 23,
        "end": 32,
        "value": "package 2",
        "entity": "package_name"
      }
    ],
    "predicted_entities": [
      {
        "entity": "package_id",
        "start": 23,
        "end": 32,
        "confidence_entity": 0.7666622400283813,
        "value": "package 2",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  },
  {
    "text": "What's included in package 3?",
    "entities": [
      {
        "start": 19,
        "end": 28,
        "value": "package 3",
        "entity": "package_name"
      }
    ],
    "predicted_entities": [
      {
        "entity": "package_id",
        "start": 19,
        "end": 28,
        "confidence_entity": 0.8146856427192688,
        "value": "package 3",
        "extractor": "DIETClassifier",
        "processors": [
          "EntitySynonymMapper"
        ]
      }
    ]
  }
]


================================================================================
FILE: backend/rasa/results/DIETClassifier_report.json
SIZE: 2.1KB
TYPE: .json
================================================================================

{
  "date": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 102,
    "confused_with": {}
  },
  "name": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 9,
    "confused_with": {}
  },
  "sign": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 25,
    "confused_with": {}
  },
  "email_address": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 2,
    "confused_with": {}
  },
  "language_preference": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 2,
    "confused_with": {}
  },
  "package_name": {
    "precision": 1.0,
    "recall": 0.8181818181818182,
    "f1-score": 0.9,
    "support": 33,
    "confused_with": {
      "package_id": 6
    }
  },
  "phone_number": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 2,
    "confused_with": {}
  },
  "question_text": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 7,
    "confused_with": {}
  },
  "person_name": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 6,
    "confused_with": {}
  },
  "package_id": {
    "precision": 0.875,
    "recall": 1.0,
    "f1-score": 0.9333333333333333,
    "support": 42,
    "confused_with": {}
  },
  "birth_place": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 6,
    "confused_with": {}
  },
  "birth_date": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 6,
    "confused_with": {}
  },
  "birth_time": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4,
    "confused_with": {}
  },
  "micro avg": {
    "precision": 0.975609756097561,
    "recall": 0.975609756097561,
    "f1-score": 0.975609756097561,
    "support": 246
  },
  "macro avg": {
    "precision": 0.9903846153846154,
    "recall": 0.986013986013986,
    "f1-score": 0.9871794871794872,
    "support": 246
  },
  "weighted avg": {
    "precision": 0.9786585365853658,
    "recall": 0.975609756097561,
    "f1-score": 0.9752032520325202,
    "support": 246
  },
  "accuracy": 0.9973214285714286
}


================================================================================
FILE: backend/rasa/results/TEDPolicy_report.json
SIZE: 0.0KB
TYPE: .json
================================================================================

{}


================================================================================
FILE: backend/rasa/results/intent_errors.json
SIZE: 9.7KB
TYPE: .json
================================================================================

[
  {
    "text": "asdfghjkl",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 3.414840830373578e-05
    }
  },
  {
    "text": "random text",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.2729209629469551e-05
    }
  },
  {
    "text": "gibberish",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.5419420378748327e-05
    }
  },
  {
    "text": "123456789",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 3.233157258364372e-05
    }
  },
  {
    "text": "!@#$%^&*()",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.4184582141751889e-05
    }
  },
  {
    "text": "qwertyuiop",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.5114596862986218e-05
    }
  },
  {
    "text": "zxcvbnm",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.3028391549596563e-05
    }
  },
  {
    "text": "lorem ipsum",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.1203533176740166e-05
    }
  },
  {
    "text": "test test test",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 2.5812994863372296e-05
    }
  },
  {
    "text": "hello world hello world",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 4.214096406940371e-05
    }
  },
  {
    "text": "what?",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "affirm",
      "confidence": 0.00016694534861017019
    }
  },
  {
    "text": "huh?",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.5120468560780864e-05
    }
  },
  {
    "text": "this doesn't make sense",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 4.585215719998814e-05
    }
  },
  {
    "text": "I'm lost",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.9305362002342008e-05
    }
  },
  {
    "text": "help me understand",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 2.0278435840737075e-05
    }
  },
  {
    "text": "what are you talking about?",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 5.631137537420727e-05
    }
  },
  {
    "text": "I don't get it",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 4.369818634586409e-05
    }
  },
  {
    "text": "can you explain?",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 5.924406650592573e-05
    }
  },
  {
    "text": "I'm not sure",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 2.7468151529319584e-05
    }
  },
  {
    "text": "maybe",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.4515831026074011e-05
    }
  },
  {
    "text": "possibly",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 2.711400702537503e-05
    }
  },
  {
    "text": "I think so",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 2.0094026695005596e-05
    }
  },
  {
    "text": "I guess",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.2821369637094904e-05
    }
  },
  {
    "text": "perhaps",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.7450618543080054e-05
    }
  },
  {
    "text": "might be",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.7439539078623056e-05
    }
  },
  {
    "text": "could be",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.2315211279201321e-05
    }
  },
  {
    "text": "probably",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.4866461242490914e-05
    }
  },
  {
    "text": "likely",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.4875539818604011e-05
    }
  },
  {
    "text": "unlikely",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.3205288269091398e-05
    }
  },
  {
    "text": "definitely not",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 5.0838505558203906e-05
    }
  },
  {
    "text": "absolutely not",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.8682487279875204e-05
    }
  },
  {
    "text": "always",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.5633137081749737e-05
    }
  },
  {
    "text": "sometimes",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.4692916010972112e-05
    }
  },
  {
    "text": "often",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.647511453484185e-05
    }
  },
  {
    "text": "rarely",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.3968176062917337e-05
    }
  },
  {
    "text": "usually",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.8707485651248135e-05
    }
  },
  {
    "text": "normally",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.6195897842408158e-05
    }
  },
  {
    "text": "typically",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.6568648788961582e-05
    }
  },
  {
    "text": "generally",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.560679629619699e-05
    }
  },
  {
    "text": "specifically",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.3487371688825078e-05
    }
  },
  {
    "text": "particularly",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.90667142305756e-05
    }
  },
  {
    "text": "especially",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.644340591155924e-05
    }
  },
  {
    "text": "mainly",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.2366063856461551e-05
    }
  },
  {
    "text": "mostly",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "astrology_sign",
      "confidence": 1.2582640010805335e-05
    }
  },
  {
    "text": "primarily",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.560387318022549e-05
    }
  },
  {
    "text": "essentially",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.7188720448757522e-05
    }
  },
  {
    "text": "basically",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 2.3510407118010335e-05
    }
  },
  {
    "text": "fundamentally",
    "intent": "nlu_fallback",
    "intent_prediction": {
      "name": "select_package",
      "confidence": 1.7184329408337362e-05
    }
  },
  {
    "text": "am I talking to a human?",
    "intent": "bot_challenge",
    "intent_prediction": {
      "name": "ask_payment",
      "confidence": 0.36664679646492004
    }
  },
  {
    "text": "nac√≠ el 15/03/1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.5436053276062012
    }
  },
  {
    "text": "nac√≠ en 1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.6236969232559204
    }
  },
  {
    "text": "mi fecha de nacimiento es 15/03/1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.6288670897483826
    }
  },
  {
    "text": "born on March 15, 1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.5715257525444031
    }
  },
  {
    "text": "my birth date is 15/03/1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.6031849980354309
    }
  },
  {
    "text": "I was born on 15/03/1990",
    "intent": "birth_date",
    "intent_prediction": {
      "name": "provide_birth_date",
      "confidence": 0.5533006191253662
    }
  },
  {
    "text": "how can I reach you",
    "intent": "ask_contact",
    "intent_prediction": {
      "name": "astrology_question",
      "confidence": 0.28161337971687317
    }
  },
  {
    "text": "what's your phone number",
    "intent": "ask_contact",
    "intent_prediction": {
      "name": "chitchat",
      "confidence": 0.8283300995826721
    }
  }
]


================================================================================
FILE: backend/rasa/results/intent_report.json
SIZE: 4.8KB
TYPE: .json
================================================================================

{
  "nlu_fallback": {
    "precision": 0.0,
    "recall": 0.0,
    "f1-score": 0.0,
    "support": 48,
    "confused_with": {
      "select_package": 38,
      "astrology_sign": 9,
      "affirm": 1
    }
  },
  "greet": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 29,
    "confused_with": {}
  },
  "select_timeslot": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 20,
    "confused_with": {}
  },
  "provide_info": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 18,
    "confused_with": {}
  },
  "select_package": {
    "precision": 0.20833333333333334,
    "recall": 1.0,
    "f1-score": 0.3448275862068966,
    "support": 10,
    "confused_with": {}
  },
  "astrology_sign": {
    "precision": 0.7567567567567568,
    "recall": 1.0,
    "f1-score": 0.8615384615384616,
    "support": 28,
    "confused_with": {}
  },
  "goodbye": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 20,
    "confused_with": {}
  },
  "ask_session_types": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 11,
    "confused_with": {}
  },
  "ask_name": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 8,
    "confused_with": {}
  },
  "book_reading": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 20,
    "confused_with": {}
  },
  "astrology_question": {
    "precision": 0.8,
    "recall": 1.0,
    "f1-score": 0.888888888888889,
    "support": 4,
    "confused_with": {}
  },
  "provide_birth_date": {
    "precision": 0.625,
    "recall": 1.0,
    "f1-score": 0.7692307692307693,
    "support": 10,
    "confused_with": {}
  },
  "show_packages": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 12,
    "confused_with": {}
  },
  "bot_challenge": {
    "precision": 1.0,
    "recall": 0.75,
    "f1-score": 0.8571428571428571,
    "support": 4,
    "confused_with": {
      "ask_payment": 1
    }
  },
  "birth_date": {
    "precision": 0.0,
    "recall": 0.0,
    "f1-score": 0.0,
    "support": 6,
    "confused_with": {
      "provide_birth_date": 6
    }
  },
  "ask_package_info": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 25,
    "confused_with": {}
  },
  "package_details": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 30,
    "confused_with": {}
  },
  "affirm": {
    "precision": 0.9629629629629629,
    "recall": 1.0,
    "f1-score": 0.9811320754716981,
    "support": 26,
    "confused_with": {}
  },
  "ask_pricing": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 81,
    "confused_with": {}
  },
  "ask_contact": {
    "precision": 1.0,
    "recall": 0.5,
    "f1-score": 0.6666666666666666,
    "support": 4,
    "confused_with": {
      "astrology_question": 1,
      "chitchat": 1
    }
  },
  "chitchat": {
    "precision": 0.9782608695652174,
    "recall": 1.0,
    "f1-score": 0.989010989010989,
    "support": 45,
    "confused_with": {}
  },
  "book_session": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4,
    "confused_with": {}
  },
  "confirm_booking": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 21,
    "confused_with": {}
  },
  "mood_unhappy": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 14,
    "confused_with": {}
  },
  "ask_help": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4,
    "confused_with": {}
  },
  "ask_availability": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4,
    "confused_with": {}
  },
  "ask_packages": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 43,
    "confused_with": {}
  },
  "deny": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 25,
    "confused_with": {}
  },
  "provide_name": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 9,
    "confused_with": {}
  },
  "mood_great": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 14,
    "confused_with": {}
  },
  "ask_payment": {
    "precision": 0.9090909090909091,
    "recall": 1.0,
    "f1-score": 0.9523809523809523,
    "support": 10,
    "confused_with": {}
  },
  "accuracy": 0.9060955518945635,
  "macro avg": {
    "precision": 0.8787227365067478,
    "recall": 0.9112903225806451,
    "f1-score": 0.8809941692431671,
    "support": 607
  },
  "weighted avg": {
    "precision": 0.8745835383540419,
    "recall": 0.9060955518945635,
    "f1-score": 0.8837779112352807,
    "support": 607
  },
  "micro avg": {
    "precision": 0.9060955518945635,
    "recall": 0.9060955518945635,
    "f1-score": 0.9060955518945635,
    "support": 607
  }
}


================================================================================
FILE: backend/rasa/results/story_report.json
SIZE: 1.7KB
TYPE: .json
================================================================================

{
  "utter_ask_packages": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4
  },
  "action_fetch_packages": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 4
  },
  "utter_contact": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 1
  },
  "utter_goodbye": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 2
  },
  "utter_session_types": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 2
  },
  "action_listen": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 44
  },
  "utter_book_session": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 6
  },
  "utter_help": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 1
  },
  "utter_availability": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 1
  },
  "utter_happy": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 1
  },
  "utter_astrology_question": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 1
  },
  "utter_greet": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 3
  },
  "accuracy": 1.0,
  "macro avg": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 70
  },
  "weighted avg": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 70
  },
  "micro avg": {
    "precision": 1.0,
    "recall": 1.0,
    "f1-score": 1.0,
    "support": 70
  },
  "conversation_accuracy": {
    "accuracy": 1.0,
    "correct": 10,
    "with_warnings": 0,
    "total": 10
  }
}


================================================================================
FILE: backend/rasa/run_whatsapp.py
SIZE: 1.8KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Rasa server startup script with WhatsApp Business API integration
"""

import os
import sys
import asyncio
import logging
from pathlib import Path

# Add the connectors directory to the Python path
sys.path.insert(0, str(Path(__file__).parent / "connectors"))

from rasa.core.run import serve_application
from rasa.core.channels import channel
from connectors.whatsapp_connector import WhatsAppInput

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def main():
    """Main function to start Rasa with WhatsApp integration"""
    
    # Load environment variables
    access_token = os.getenv("WHATSAPP_ACCESS_TOKEN")
    phone_number_id = os.getenv("WHATSAPP_PHONE_NUMBER_ID")
    business_account_id = os.getenv("WHATSAPP_BUSINESS_ACCOUNT_ID")
    webhook_url = os.getenv("WHATSAPP_WEBHOOK_URL")
    
    if not all([access_token, phone_number_id, business_account_id]):
        logger.error("Missing required WhatsApp environment variables:")
        logger.error("- WHATSAPP_ACCESS_TOKEN")
        logger.error("- WHATSAPP_PHONE_NUMBER_ID") 
        logger.error("- WHATSAPP_BUSINESS_ACCOUNT_ID")
        sys.exit(1)
    
    # Register WhatsApp input channel
    whatsapp_input = WhatsAppInput(
        access_token=access_token,
        phone_number_id=phone_number_id,
        business_account_id=business_account_id,
        webhook_url=webhook_url
    )
    
    # Register the channel
    channel.register([whatsapp_input])
    
    logger.info("WhatsApp Business API connector registered successfully")
    logger.info(f"Phone Number ID: {phone_number_id}")
    logger.info(f"Business Account ID: {business_account_id}")
    
    # Start Rasa server
    serve_application()

if __name__ == "__main__":
    main()



================================================================================
FILE: backend/rasa/runtime.txt
SIZE: 0.0KB
TYPE: .txt
================================================================================

python-3.10.18



================================================================================
FILE: backend/rasa-supabase/.vscode/extensions.json
SIZE: 0.0KB
TYPE: .json
================================================================================

{
  "recommendations": ["denoland.vscode-deno"]
}



================================================================================
FILE: backend/rasa-supabase/.vscode/settings.json
SIZE: 0.4KB
TYPE: .json
================================================================================

{
  "deno.enablePaths": [
    "supabase/functions"
  ],
  "deno.lint": true,
  "deno.unstable": [
    "bare-node-builtins",
    "byonm",
    "sloppy-imports",
    "unsafe-proto",
    "webgpu",
    "broadcast-channel",
    "worker-options",
    "cron",
    "kv",
    "ffi",
    "fs",
    "http",
    "net"
  ],
  "[typescript]": {
    "editor.defaultFormatter": "denoland.vscode-deno"
  }
}



================================================================================
FILE: backend/rasa-supabase/supabase/config.toml
SIZE: 12.2KB
TYPE: .toml
================================================================================

# For detailed configuration reference documentation, visit:
# https://supabase.com/docs/guides/local-development/cli/config
# A string used to distinguish different Supabase projects on the same host. Defaults to the
# working directory name when running `supabase init`.
project_id = "rasa-supabase"

[api]
enabled = true
# Port to use for the API URL.
port = 54321
# Schemas to expose in your API. Tables, views and stored procedures in this schema will get API
# endpoints. `public` and `graphql_public` schemas are included by default.
schemas = ["public", "graphql_public"]
# Extra schemas to add to the search_path of every request.
extra_search_path = ["public", "extensions"]
# The maximum number of rows returns from a view, table, or stored procedure. Limits payload size
# for accidental or malicious requests.
max_rows = 1000

[api.tls]
# Enable HTTPS endpoints locally using a self-signed certificate.
enabled = false

[db]
# Port to use for the local database URL.
port = 54322
# Port used by db diff command to initialize the shadow database.
shadow_port = 54320
# The database major version to use. This has to be the same as your remote database's. Run `SHOW
# server_version;` on the remote database to check.
major_version = 17

[db.pooler]
enabled = false
# Port to use for the local connection pooler.
port = 54329
# Specifies when a server connection can be reused by other clients.
# Configure one of the supported pooler modes: `transaction`, `session`.
pool_mode = "transaction"
# How many server connections to allow per user/database pair.
default_pool_size = 20
# Maximum number of client connections allowed.
max_client_conn = 100

# [db.vault]
# secret_key = "env(SECRET_VALUE)"

[db.migrations]
# If disabled, migrations will be skipped during a db push or reset.
enabled = true
# Specifies an ordered list of schema files that describe your database.
# Supports glob patterns relative to supabase directory: "./schemas/*.sql"
schema_paths = []

[db.seed]
# If enabled, seeds the database after migrations during a db reset.
enabled = true
# Specifies an ordered list of seed files to load during db reset.
# Supports glob patterns relative to supabase directory: "./seeds/*.sql"
sql_paths = ["./seed.sql"]

[db.network_restrictions]
# Enable management of network restrictions.
enabled = false
# List of IPv4 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv4 connections. Set empty array to block all IPs.
allowed_cidrs = ["0.0.0.0/0"]
# List of IPv6 CIDR blocks allowed to connect to the database.
# Defaults to allow all IPv6 connections. Set empty array to block all IPs.
allowed_cidrs_v6 = ["::/0"]

[realtime]
enabled = true
# Bind realtime via either IPv4 or IPv6. (default: IPv4)
# ip_version = "IPv6"
# The maximum length in bytes of HTTP request headers. (default: 4096)
# max_header_length = 4096

[studio]
enabled = true
# Port to use for Supabase Studio.
port = 54323
# External URL of the API server that frontend connects to.
api_url = "http://127.0.0.1"
# OpenAI API Key to use for Supabase AI in the Supabase Studio.
openai_api_key = "env(OPENAI_API_KEY)"

# Email testing server. Emails sent with the local dev setup are not actually sent - rather, they
# are monitored, and you can view the emails that would have been sent from the web interface.
[inbucket]
enabled = true
# Port to use for the email testing server web interface.
port = 54324
# Uncomment to expose additional ports for testing user applications that send emails.
# smtp_port = 54325
# pop3_port = 54326
# admin_email = "admin@email.com"
# sender_name = "Admin"

[storage]
enabled = true
# The maximum file size allowed (e.g. "5MB", "500KB").
file_size_limit = "50MiB"

# Image transformation API is available to Supabase Pro plan.
# [storage.image_transformation]
# enabled = true

# Uncomment to configure local storage buckets
# [storage.buckets.images]
# public = false
# file_size_limit = "50MiB"
# allowed_mime_types = ["image/png", "image/jpeg"]
# objects_path = "./images"

[auth]
enabled = true
# The base URL of your website. Used as an allow-list for redirects and for constructing URLs used
# in emails.
site_url = "http://127.0.0.1:3000"
# A list of *exact* URLs that auth providers are permitted to redirect to post authentication.
additional_redirect_urls = ["https://127.0.0.1:3000"]
# How long tokens are valid for, in seconds. Defaults to 3600 (1 hour), maximum 604,800 (1 week).
jwt_expiry = 3600
# Path to JWT signing key. DO NOT commit your signing keys file to git.
# signing_keys_path = "./signing_keys.json"
# If disabled, the refresh token will never expire.
enable_refresh_token_rotation = true
# Allows refresh tokens to be reused after expiry, up to the specified interval in seconds.
# Requires enable_refresh_token_rotation = true.
refresh_token_reuse_interval = 10
# Allow/disallow new user signups to your project.
enable_signup = true
# Allow/disallow anonymous sign-ins to your project.
enable_anonymous_sign_ins = false
# Allow/disallow testing manual linking of accounts
enable_manual_linking = false
# Passwords shorter than this value will be rejected as weak. Minimum 6, recommended 8 or more.
minimum_password_length = 6
# Passwords that do not meet the following requirements will be rejected as weak. Supported values
# are: `letters_digits`, `lower_upper_letters_digits`, `lower_upper_letters_digits_symbols`
password_requirements = ""

[auth.rate_limit]
# Number of emails that can be sent per hour. Requires auth.email.smtp to be enabled.
email_sent = 2
# Number of SMS messages that can be sent per hour. Requires auth.sms to be enabled.
sms_sent = 30
# Number of anonymous sign-ins that can be made per hour per IP address. Requires enable_anonymous_sign_ins = true.
anonymous_users = 30
# Number of sessions that can be refreshed in a 5 minute interval per IP address.
token_refresh = 150
# Number of sign up and sign-in requests that can be made in a 5 minute interval per IP address (excludes anonymous users).
sign_in_sign_ups = 30
# Number of OTP / Magic link verifications that can be made in a 5 minute interval per IP address.
token_verifications = 30
# Number of Web3 logins that can be made in a 5 minute interval per IP address.
web3 = 30

# Configure one of the supported captcha providers: `hcaptcha`, `turnstile`.
# [auth.captcha]
# enabled = true
# provider = "hcaptcha"
# secret = ""

[auth.email]
# Allow/disallow new user signups via email to your project.
enable_signup = true
# If enabled, a user will be required to confirm any email change on both the old, and new email
# addresses. If disabled, only the new email is required to confirm.
double_confirm_changes = true
# If enabled, users need to confirm their email address before signing in.
enable_confirmations = false
# If enabled, users will need to reauthenticate or have logged in recently to change their password.
secure_password_change = false
# Controls the minimum amount of time that must pass before sending another signup confirmation or password reset email.
max_frequency = "1s"
# Number of characters used in the email OTP.
otp_length = 6
# Number of seconds before the email OTP expires (defaults to 1 hour).
otp_expiry = 3600

# Use a production-ready SMTP server
# [auth.email.smtp]
# enabled = true
# host = "smtp.sendgrid.net"
# port = 587
# user = "apikey"
# pass = "env(SENDGRID_API_KEY)"
# admin_email = "admin@email.com"
# sender_name = "Admin"

# Uncomment to customize email template
# [auth.email.template.invite]
# subject = "You have been invited"
# content_path = "./supabase/templates/invite.html"

[auth.sms]
# Allow/disallow new user signups via SMS to your project.
enable_signup = false
# If enabled, users need to confirm their phone number before signing in.
enable_confirmations = false
# Template for sending OTP to users
template = "Your code is {{ .Code }}"
# Controls the minimum amount of time that must pass before sending another sms otp.
max_frequency = "5s"

# Use pre-defined map of phone number to OTP for testing.
# [auth.sms.test_otp]
# 4152127777 = "123456"

# Configure logged in session timeouts.
# [auth.sessions]
# Force log out after the specified duration.
# timebox = "24h"
# Force log out if the user has been inactive longer than the specified duration.
# inactivity_timeout = "8h"

# This hook runs before a new user is created and allows developers to reject the request based on the incoming user object.
# [auth.hook.before_user_created]
# enabled = true
# uri = "pg-functions://postgres/auth/before-user-created-hook"

# This hook runs before a token is issued and allows you to add additional claims based on the authentication method used.
# [auth.hook.custom_access_token]
# enabled = true
# uri = "pg-functions://<database>/<schema>/<hook_name>"

# Configure one of the supported SMS providers: `twilio`, `twilio_verify`, `messagebird`, `textlocal`, `vonage`.
[auth.sms.twilio]
enabled = false
account_sid = ""
message_service_sid = ""
# DO NOT commit your Twilio auth token to git. Use environment variable substitution instead:
auth_token = "env(SUPABASE_AUTH_SMS_TWILIO_AUTH_TOKEN)"

# Multi-factor-authentication is available to Supabase Pro plan.
[auth.mfa]
# Control how many MFA factors can be enrolled at once per user.
max_enrolled_factors = 10

# Control MFA via App Authenticator (TOTP)
[auth.mfa.totp]
enroll_enabled = false
verify_enabled = false

# Configure MFA via Phone Messaging
[auth.mfa.phone]
enroll_enabled = false
verify_enabled = false
otp_length = 6
template = "Your code is {{ .Code }}"
max_frequency = "5s"

# Configure MFA via WebAuthn
# [auth.mfa.web_authn]
# enroll_enabled = true
# verify_enabled = true

# Use an external OAuth provider. The full list of providers are: `apple`, `azure`, `bitbucket`,
# `discord`, `facebook`, `github`, `gitlab`, `google`, `keycloak`, `linkedin_oidc`, `notion`, `twitch`,
# `twitter`, `slack`, `spotify`, `workos`, `zoom`.
[auth.external.apple]
enabled = false
client_id = ""
# DO NOT commit your OAuth provider secret to git. Use environment variable substitution instead:
secret = "env(SUPABASE_AUTH_EXTERNAL_APPLE_SECRET)"
# Overrides the default auth redirectUrl.
redirect_uri = ""
# Overrides the default auth provider URL. Used to support self-hosted gitlab, single-tenant Azure,
# or any other third-party OIDC providers.
url = ""
# If enabled, the nonce check will be skipped. Required for local sign in with Google auth.
skip_nonce_check = false

# Allow Solana wallet holders to sign in to your project via the Sign in with Solana (SIWS, EIP-4361) standard.
# You can configure "web3" rate limit in the [auth.rate_limit] section and set up [auth.captcha] if self-hosting.
[auth.web3.solana]
enabled = false

# Use Firebase Auth as a third-party provider alongside Supabase Auth.
[auth.third_party.firebase]
enabled = false
# project_id = "my-firebase-project"

# Use Auth0 as a third-party provider alongside Supabase Auth.
[auth.third_party.auth0]
enabled = false
# tenant = "my-auth0-tenant"
# tenant_region = "us"

# Use AWS Cognito (Amplify) as a third-party provider alongside Supabase Auth.
[auth.third_party.aws_cognito]
enabled = false
# user_pool_id = "my-user-pool-id"
# user_pool_region = "us-east-1"

# Use Clerk as a third-party provider alongside Supabase Auth.
[auth.third_party.clerk]
enabled = false
# Obtain from https://clerk.com/setup/supabase
# domain = "example.clerk.accounts.dev"

[edge_runtime]
enabled = true
# Supported request policies: `oneshot`, `per_worker`.
# `per_worker` (default) ‚Äî enables hot reload during local development.
# `oneshot` ‚Äî fallback mode if hot reload causes issues (e.g. in large repos or with symlinks).
policy = "per_worker"
# Port to attach the Chrome inspector for debugging edge functions.
inspector_port = 8083
# The Deno major version to use.
deno_version = 2

# [edge_runtime.secrets]
# secret_key = "env(SECRET_VALUE)"

[analytics]
enabled = true
port = 54327
# Configure one of the supported backends: `postgres`, `bigquery`.
backend = "postgres"

# Experimental features may be deprecated any time
[experimental]
# Configures Postgres storage engine to use OrioleDB (S3)
orioledb_version = ""
# Configures S3 bucket URL, eg. <bucket_name>.s3-<region>.amazonaws.com
s3_host = "env(S3_HOST)"
# Configures S3 bucket region, eg. us-east-1
s3_region = "env(S3_REGION)"
# Configures AWS_ACCESS_KEY_ID for S3 bucket
s3_access_key = "env(S3_ACCESS_KEY)"
# Configures AWS_SECRET_ACCESS_KEY for S3 bucket
s3_secret_key = "env(S3_SECRET_KEY)"



================================================================================
FILE: backend/rasa-supabase/supabase/.gitignore
SIZE: 0.1KB
TYPE: 
================================================================================

# Supabase
.branches
.temp

# dotenvx
.env.keys
.env.local
.env.*.local



================================================================================
FILE: backend/render.yaml
SIZE: 0.5KB
TYPE: .yaml
================================================================================

services:
  - type: web
    name: wellness-rasa-backend
    env: python
    plan: free
    buildCommand: |
      pip install -r rasa/requirements.txt
      cd rasa && rasa train
    startCommand: |
      cd rasa && rasa run --enable-api --cors "*" --port $PORT
    envVars:
      - key: PORT
        value: 10000
      - key: RASA_ENDPOINT
        value: https://wellness-rasa-backend.onrender.com
    healthCheckPath: /health
    autoDeploy: true
    branch: main
    rootDir: .


================================================================================
FILE: backend/setup-meta-whatsapp.py
SIZE: 13.3KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Meta WhatsApp Business API Setup Script
This script helps configure WhatsApp Business API using Meta's Graph API
"""

import os
import sys
import json
import requests
import argparse
from pathlib import Path
from typing import Dict, Any, Optional

class MetaWhatsAppSetup:
    def __init__(self):
        self.base_url = "https://graph.facebook.com/v18.0"
        self.access_token = None
        self.app_id = None
        self.app_secret = None
        self.phone_number_id = None
        self.business_account_id = None
        self.webhook_url = None
        self.verify_token = None

    def load_credentials(self, credentials_file: str = None) -> bool:
        """Load credentials from file or environment variables"""
        if credentials_file and Path(credentials_file).exists():
            with open(credentials_file) as f:
                for line in f:
                    if line.strip() and not line.startswith('#'):
                        key, value = line.strip().split('=', 1)
                        os.environ[key] = value

        self.access_token = os.getenv("META_ACCESS_TOKEN")
        self.app_id = os.getenv("META_APP_ID")
        self.app_secret = os.getenv("META_APP_SECRET")
        self.phone_number_id = os.getenv("WHATSAPP_PHONE_NUMBER_ID")
        self.business_account_id = os.getenv("WHATSAPP_BUSINESS_ACCOUNT_ID")
        self.webhook_url = os.getenv("WHATSAPP_WEBHOOK_URL")
        self.verify_token = os.getenv("WHATSAPP_VERIFY_TOKEN")

        if not self.access_token:
            print("‚ùå META_ACCESS_TOKEN not found")
            return False
        
        return True

    def test_connection(self) -> bool:
        """Test connection to Meta Graph API"""
        print("üîç Testing Meta Graph API connection...")
        
        try:
            response = requests.get(
                f"{self.base_url}/me",
                params={"access_token": self.access_token}
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ Connected successfully! App: {data.get('name', 'Unknown')}")
                return True
            else:
                print(f"‚ùå Connection failed: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Connection error: {e}")
            return False

    def get_app_info(self) -> Optional[Dict[str, Any]]:
        """Get app information"""
        try:
            response = requests.get(
                f"{self.base_url}/{self.app_id}",
                params={
                    "access_token": self.access_token,
                    "fields": "name,id,app_domains"
                }
            )
            
            if response.status_code == 200:
                return response.json()
            else:
                print(f"‚ùå Failed to get app info: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error getting app info: {e}")
            return None

    def get_whatsapp_business_accounts(self) -> Optional[list]:
        """Get WhatsApp Business Accounts"""
        try:
            response = requests.get(
                f"{self.base_url}/{self.app_id}/whatsapp_business_accounts",
                params={"access_token": self.access_token}
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("data", [])
            else:
                print(f"‚ùå Failed to get WhatsApp Business Accounts: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error getting WhatsApp Business Accounts: {e}")
            return None

    def get_phone_numbers(self, business_account_id: str) -> Optional[list]:
        """Get phone numbers for a business account"""
        try:
            response = requests.get(
                f"{self.base_url}/{business_account_id}/phone_numbers",
                params={"access_token": self.access_token}
            )
            
            if response.status_code == 200:
                data = response.json()
                return data.get("data", [])
            else:
                print(f"‚ùå Failed to get phone numbers: {response.status_code}")
                return None
                
        except Exception as e:
            print(f"‚ùå Error getting phone numbers: {e}")
            return None

    def setup_webhook(self, app_id: str, webhook_url: str, verify_token: str) -> bool:
        """Set up webhook for WhatsApp"""
        print(f"üîó Setting up webhook: {webhook_url}")
        
        try:
            # Subscribe to WhatsApp webhook
            response = requests.post(
                f"{self.base_url}/{app_id}/subscriptions",
                data={
                    "access_token": self.access_token,
                    "object": "whatsapp_business_account",
                    "callback_url": webhook_url,
                    "verify_token": verify_token,
                    "fields": "messages"
                }
            )
            
            if response.status_code == 200:
                print("‚úÖ Webhook subscribed successfully")
                return True
            else:
                print(f"‚ùå Failed to subscribe webhook: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error setting up webhook: {e}")
            return False

    def send_test_message(self, phone_number_id: str, to_number: str, message: str) -> bool:
        """Send a test message"""
        print(f"üì± Sending test message to {to_number}")
        
        try:
            response = requests.post(
                f"{self.base_url}/{phone_number_id}/messages",
                headers={
                    "Authorization": f"Bearer {self.access_token}",
                    "Content-Type": "application/json"
                },
                json={
                    "messaging_product": "whatsapp",
                    "to": to_number,
                    "type": "text",
                    "text": {"body": message}
                }
            )
            
            if response.status_code == 200:
                print("‚úÖ Test message sent successfully")
                return True
            else:
                print(f"‚ùå Failed to send test message: {response.status_code} - {response.text}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error sending test message: {e}")
            return False

    def generate_credentials_file(self, output_file: str = "whatsapp-credentials.env"):
        """Generate credentials file"""
        credentials = f"""# WhatsApp Business API Credentials
# Generated by Meta WhatsApp Setup Script

# Meta App Credentials
META_ACCESS_TOKEN={self.access_token}
META_APP_ID={self.app_id or 'your_app_id_here'}
META_APP_SECRET={self.app_secret or 'your_app_secret_here'}

# WhatsApp Business API Credentials
WHATSAPP_ACCESS_TOKEN={self.access_token}
WHATSAPP_PHONE_NUMBER_ID={self.phone_number_id or 'your_phone_number_id_here'}
WHATSAPP_BUSINESS_ACCOUNT_ID={self.business_account_id or 'your_business_account_id_here'}
WHATSAPP_VERIFY_TOKEN={self.verify_token or 'your_verify_token_here'}
WHATSAPP_WEBHOOK_URL={self.webhook_url or 'https://your-domain.com/webhooks/whatsapp/webhook'}

# Rasa Configuration
RASA_URL=http://localhost:5005
RASA_MODEL=rasa
RASA_CONFIDENCE_THRESHOLD=0.7

# OpenRouter Configuration
OPENROUTER_API_KEY=your_openrouter_api_key_here
OPENROUTER_BASE_URL=https://openrouter.ai/api/v1
OPENROUTER_MODEL=meta-llama/llama-3.1-8b-instruct:free
OPENROUTER_TEMPERATURE=0.7
OPENROUTER_MAX_TOKENS=1000

# Logging Configuration
LOGGING_ENABLED=true
LOGGING_LEVEL=info
LOGGING_STORAGE=console
"""
        
        with open(output_file, 'w') as f:
            f.write(credentials)
        
        print(f"‚úÖ Credentials file generated: {output_file}")

    def interactive_setup(self):
        """Interactive setup wizard"""
        print("üöÄ Meta WhatsApp Business API Setup Wizard")
        print("=" * 50)
        
        # Get access token
        if not self.access_token:
            self.access_token = input("Enter your Meta Access Token: ").strip()
        
        if not self.test_connection():
            print("‚ùå Invalid access token. Please check your credentials.")
            return False
        
        # Get app info
        app_info = self.get_app_info()
        if app_info:
            print(f"üì± App: {app_info.get('name', 'Unknown')} (ID: {app_info.get('id', 'Unknown')})")
        
        # Get WhatsApp Business Accounts
        print("\nüîç Fetching WhatsApp Business Accounts...")
        business_accounts = self.get_whatsapp_business_accounts()
        
        if not business_accounts:
            print("‚ùå No WhatsApp Business Accounts found. Please create one in Meta Business Manager.")
            return False
        
        print(f"‚úÖ Found {len(business_accounts)} WhatsApp Business Account(s):")
        for i, account in enumerate(business_accounts):
            print(f"  {i+1}. {account.get('name', 'Unknown')} (ID: {account.get('id', 'Unknown')})")
        
        # Select business account
        if len(business_accounts) == 1:
            selected_account = business_accounts[0]
            print(f"üìã Using: {selected_account.get('name')}")
        else:
            choice = input(f"Select business account (1-{len(business_accounts)}): ").strip()
            try:
                selected_account = business_accounts[int(choice) - 1]
            except (ValueError, IndexError):
                print("‚ùå Invalid selection")
                return False
        
        self.business_account_id = selected_account.get('id')
        
        # Get phone numbers
        print(f"\nüìû Fetching phone numbers for {selected_account.get('name')}...")
        phone_numbers = self.get_phone_numbers(self.business_account_id)
        
        if not phone_numbers:
            print("‚ùå No phone numbers found. Please add a phone number in Meta Business Manager.")
            return False
        
        print(f"‚úÖ Found {len(phone_numbers)} phone number(s):")
        for i, number in enumerate(phone_numbers):
            print(f"  {i+1}. {number.get('display_phone_number', 'Unknown')} (ID: {number.get('id', 'Unknown')})")
        
        # Select phone number
        if len(phone_numbers) == 1:
            selected_number = phone_numbers[0]
            print(f"üì± Using: {selected_number.get('display_phone_number')}")
        else:
            choice = input(f"Select phone number (1-{len(phone_numbers)}): ").strip()
            try:
                selected_number = phone_numbers[int(choice) - 1]
            except (ValueError, IndexError):
                print("‚ùå Invalid selection")
                return False
        
        self.phone_number_id = selected_number.get('id')
        
        # Get webhook URL
        if not self.webhook_url:
            self.webhook_url = input("Enter your webhook URL (e.g., https://your-domain.com/webhooks/whatsapp/webhook): ").strip()
        
        # Get verify token
        if not self.verify_token:
            self.verify_token = input("Enter your verify token (custom string): ").strip()
        
        # Set up webhook
        print(f"\nüîó Setting up webhook...")
        if self.setup_webhook(self.app_id or "your_app_id", self.webhook_url, self.verify_token):
            print("‚úÖ Webhook configured successfully")
        else:
            print("‚ö†Ô∏è  Webhook setup failed, but you can configure it manually in Meta Business Manager")
        
        # Generate credentials file
        print(f"\nüìù Generating credentials file...")
        self.generate_credentials_file()
        
        print(f"\nüéâ Setup complete!")
        print(f"üìã Summary:")
        print(f"  - Business Account: {selected_account.get('name')} ({self.business_account_id})")
        print(f"  - Phone Number: {selected_number.get('display_phone_number')} ({self.phone_number_id})")
        print(f"  - Webhook URL: {self.webhook_url}")
        print(f"  - Verify Token: {self.verify_token}")
        
        return True

def main():
    parser = argparse.ArgumentParser(description="Meta WhatsApp Business API Setup")
    parser.add_argument("--credentials", help="Path to credentials file")
    parser.add_argument("--test-message", help="Send test message to phone number")
    parser.add_argument("--interactive", action="store_true", help="Run interactive setup")
    
    args = parser.parse_args()
    
    setup = MetaWhatsAppSetup()
    
    if args.interactive:
        setup.interactive_setup()
    elif args.credentials:
        if setup.load_credentials(args.credentials):
            if args.test_message:
                setup.send_test_message(setup.phone_number_id, args.test_message, "Test message from Meta WhatsApp setup script!")
            else:
                setup.test_connection()
        else:
            print("‚ùå Failed to load credentials")
    else:
        print("Use --interactive for guided setup or --credentials <file> to load existing credentials")
        print("Example: python setup-meta-whatsapp.py --interactive")

if __name__ == "__main__":
    main()



================================================================================
FILE: backend/setup-telegram-bot.py
SIZE: 8.5KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Telegram Bot Setup Script
Configures the Telegram bot webhook and tests the integration
"""

import os
import sys
import asyncio
import aiohttp
import json
from typing import Dict, Any, Optional

# Telegram Bot Configuration
BOT_TOKEN = "8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

class TelegramBotSetup:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """Get bot information from Telegram"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/getMe") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            return data.get("result")
                        else:
                            print(f"‚ùå Error getting bot info: {data.get('description')}")
                            return None
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return None
        except Exception as e:
            print(f"‚ùå Error getting bot info: {e}")
            return None

    async def set_webhook(self, webhook_url: str) -> bool:
        """Set webhook for the bot"""
        try:
            payload = {
                "url": webhook_url,
                "allowed_updates": ["message", "callback_query"]
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/setWebhook",
                    json=payload
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            print(f"‚úÖ Webhook set successfully: {webhook_url}")
                            return True
                        else:
                            print(f"‚ùå Error setting webhook: {data.get('description')}")
                            return False
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error setting webhook: {e}")
            return False

    async def get_webhook_info(self) -> Optional[Dict[str, Any]]:
        """Get webhook information"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/getWebhookInfo") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            return data.get("result")
                        else:
                            print(f"‚ùå Error getting webhook info: {data.get('description')}")
                            return None
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return None
        except Exception as e:
            print(f"‚ùå Error getting webhook info: {e}")
            return None

    async def delete_webhook(self) -> bool:
        """Delete webhook"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/deleteWebhook") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            print("‚úÖ Webhook deleted successfully")
                            return True
                        else:
                            print(f"‚ùå Error deleting webhook: {data.get('description')}")
                            return False
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error deleting webhook: {e}")
            return False

    async def send_test_message(self, chat_id: str, message: str) -> bool:
        """Send a test message"""
        try:
            payload = {
                "chat_id": chat_id,
                "text": message,
                "parse_mode": "HTML"
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/sendMessage",
                    json=payload
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            print(f"‚úÖ Test message sent successfully to {chat_id}")
                            return True
                        else:
                            print(f"‚ùå Error sending message: {data.get('description')}")
                            return False
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error sending message: {e}")
            return False

async def main():
    print("ü§ñ Telegram Bot Setup Script")
    print("=" * 50)

    # Initialize bot setup
    bot_setup = TelegramBotSetup(BOT_TOKEN)

    # Get bot information
    print("\nüìã Getting bot information...")
    bot_info = await bot_setup.get_bot_info()
    
    if bot_info:
        print(f"‚úÖ Bot Name: {bot_info.get('first_name')}")
        print(f"‚úÖ Bot Username: @{bot_info.get('username', 'No username')}")
        print(f"‚úÖ Bot ID: {bot_info.get('id')}")
        print(f"‚úÖ Can Join Groups: {bot_info.get('can_join_groups')}")
    else:
        print("‚ùå Failed to get bot information. Please check your bot token.")
        return

    # Get current webhook info
    print("\nüîó Getting current webhook information...")
    webhook_info = await bot_setup.get_webhook_info()
    
    if webhook_info:
        print(f"‚úÖ Current webhook URL: {webhook_info.get('url', 'Not set')}")
        print(f"‚úÖ Pending updates: {webhook_info.get('pending_update_count', 0)}")
        if webhook_info.get('last_error_date'):
            print(f"‚ö†Ô∏è Last webhook error: {webhook_info.get('last_error_message')}")
    else:
        print("‚ùå Failed to get webhook information")

    # Ask for webhook URL
    print("\nüåê Webhook Configuration")
    print("Please provide your webhook URL (e.g., https://your-domain.vercel.app/api/telegram/webhook)")
    
    webhook_url = input("Webhook URL: ").strip()
    
    if not webhook_url:
        print("‚ùå No webhook URL provided. Exiting.")
        return

    if not webhook_url.startswith('https://'):
        print("‚ùå Webhook URL must start with https://")
        print("üí° For local development, use ngrok:")
        print("   1. Install ngrok: https://ngrok.com/download")
        print("   2. Run: ngrok http 3000")
        print("   3. Use the https URL provided by ngrok")
        return

    # Set webhook
    print(f"\nüîß Setting webhook to: {webhook_url}")
    webhook_set = await bot_setup.set_webhook(webhook_url)
    
    if webhook_set:
        print("‚úÖ Webhook configured successfully!")
        
        # Verify webhook
        print("\nüîç Verifying webhook...")
        updated_webhook_info = await bot_setup.get_webhook_info()
        
        if updated_webhook_info:
            print(f"‚úÖ Verified webhook URL: {updated_webhook_info.get('url')}")
            print(f"‚úÖ Pending updates: {updated_webhook_info.get('pending_update_count', 0)}")
        
        # Test message option
        print("\nüì± Test Message")
        test_chat = input("Enter a chat ID to send a test message (or press Enter to skip): ").strip()
        
        if test_chat:
            test_message = f"ü§ñ Hello! This is a test message from {bot_info.get('first_name')}. Your bot is now configured and ready to receive messages!"
            await bot_setup.send_test_message(test_chat, test_message)
    else:
        print("‚ùå Failed to set webhook")

    print("\nüéâ Setup complete!")
    print("\nüìã Next steps:")
    print("1. Make sure your webhook endpoint is accessible")
    print("2. Test the bot by sending a message to it")
    print("3. Check the webhook logs for any errors")
    print("4. Configure the bot in your admin dashboard")

if __name__ == "__main__":
    asyncio.run(main())



================================================================================
FILE: backend/setup-telegram-local.py
SIZE: 6.3KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Telegram Bot Local Development Setup
Helps set up Telegram bot for local development using ngrok
"""

import os
import sys
import asyncio
import aiohttp
import json
from typing import Dict, Any, Optional

# Telegram Bot Configuration
BOT_TOKEN = "8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

class TelegramLocalSetup:
    def __init__(self, bot_token: str):
        self.bot_token = bot_token
        self.base_url = f"https://api.telegram.org/bot{bot_token}"

    async def get_bot_info(self) -> Optional[Dict[str, Any]]:
        """Get bot information from Telegram"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(f"{self.base_url}/getMe") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            return data.get("result")
                        else:
                            print(f"‚ùå Error getting bot info: {data.get('description')}")
                            return None
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return None
        except Exception as e:
            print(f"‚ùå Error getting bot info: {e}")
            return None

    async def set_webhook(self, webhook_url: str) -> bool:
        """Set webhook for the bot"""
        try:
            payload = {
                "url": webhook_url,
                "allowed_updates": ["message", "callback_query"]
            }

            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{self.base_url}/setWebhook",
                    json=payload
                ) as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            print(f"‚úÖ Webhook set successfully: {webhook_url}")
                            return True
                        else:
                            print(f"‚ùå Error setting webhook: {data.get('description')}")
                            return False
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error setting webhook: {e}")
            return False

    async def delete_webhook(self) -> bool:
        """Delete webhook"""
        try:
            async with aiohttp.ClientSession() as session:
                async with session.post(f"{self.base_url}/deleteWebhook") as response:
                    if response.status == 200:
                        data = await response.json()
                        if data.get("ok"):
                            print("‚úÖ Webhook deleted successfully")
                            return True
                        else:
                            print(f"‚ùå Error deleting webhook: {data.get('description')}")
                            return False
                    else:
                        print(f"‚ùå HTTP error: {response.status}")
                        return False
        except Exception as e:
            print(f"‚ùå Error deleting webhook: {e}")
            return False

async def main():
    print("ü§ñ Telegram Bot Local Development Setup")
    print("=" * 50)

    # Initialize bot setup
    bot_setup = TelegramLocalSetup(BOT_TOKEN)

    # Get bot information
    print("\nüìã Getting bot information...")
    bot_info = await bot_setup.get_bot_info()
    
    if bot_info:
        print(f"‚úÖ Bot Name: {bot_info.get('first_name')}")
        print(f"‚úÖ Bot Username: @{bot_info.get('username', 'No username')}")
        print(f"‚úÖ Bot ID: {bot_info.get('id')}")
        print(f"‚úÖ Can Join Groups: {bot_info.get('can_join_groups')}")
    else:
        print("‚ùå Failed to get bot information. Please check your bot token.")
        return

    print("\nüåê Local Development Setup")
    print("For local development, you need to use ngrok to create an HTTPS tunnel.")
    print("\nüìã Steps:")
    print("1. Install ngrok: https://ngrok.com/download")
    print("2. Start your Next.js app: npm run dev (in frontend directory)")
    print("3. In another terminal, run: ngrok http 3000")
    print("4. Copy the HTTPS URL from ngrok (e.g., https://abc123.ngrok.io)")
    print("5. Use that URL + /api/telegram/webhook as your webhook URL")
    
    print("\nüîß Webhook Configuration")
    webhook_url = input("Enter your ngrok HTTPS URL + /api/telegram/webhook: ").strip()
    
    if not webhook_url:
        print("‚ùå No webhook URL provided. Exiting.")
        return

    if not webhook_url.startswith('https://'):
        print("‚ùå Webhook URL must start with https://")
        print("üí° Make sure you're using the ngrok HTTPS URL, not HTTP")
        return

    if not webhook_url.endswith('/api/telegram/webhook'):
        print("‚ö†Ô∏è Warning: Webhook URL should end with /api/telegram/webhook")
        print(f"   Current URL: {webhook_url}")
        confirm = input("Continue anyway? (y/N): ").strip().lower()
        if confirm != 'y':
            return

    # Set webhook
    print(f"\nüîß Setting webhook to: {webhook_url}")
    webhook_set = await bot_setup.set_webhook(webhook_url)
    
    if webhook_set:
        print("‚úÖ Webhook configured successfully!")
        print("\nüéâ Setup complete!")
        print("\nüìã Next steps:")
        print("1. Make sure your Next.js app is running on port 3000")
        print("2. Make sure ngrok is running and pointing to port 3000")
        print("3. Test the bot by sending a message to @SoulPathAi_bot")
        print("4. Check your Next.js console for webhook logs")
        print("\nüí° To stop the webhook later, run this script again and choose 'Delete webhook'")
    else:
        print("‚ùå Failed to set webhook")

    # Ask if user wants to delete webhook
    print("\nüóëÔ∏è Webhook Management")
    action = input("Do you want to delete the webhook now? (y/N): ").strip().lower()
    
    if action == 'y':
        await bot_setup.delete_webhook()
        print("‚úÖ Webhook deleted. Bot will not receive messages until webhook is set again.")

if __name__ == "__main__":
    asyncio.run(main())



================================================================================
FILE: backend/start-rasa.sh
SIZE: 5.2KB
TYPE: .sh
================================================================================

#!/bin/bash

# Optimized Rasa server startup script for Docker deployment
set -e

echo "üöÄ Starting Rasa server - Docker optimized version $(date)..."

# Change to the rasa directory
cd "$(dirname "$0")/rasa" || {
    echo "‚ùå Failed to change to rasa directory"
    exit 1
}

echo "üìÅ Working directory: $(pwd)"

# Load environment from .env if present (e.g., Supabase DATABASE_URL)
if [ -f .env ]; then
    echo "üìÑ Loading environment from .env"
    set -a
    . ./.env
    set +a
fi

# Activate virtual environment if it exists
if [ -d "rasa_env" ]; then
    echo "üêç Activating virtual environment..."
    source rasa_env/bin/activate || {
        echo "‚ùå Failed to activate virtual environment"
        exit 1
    }
fi

# Get port from environment variable (Render requirement)
PORT=${PORT:-5005}
echo "üì° Using port: $PORT"

# Provide sane defaults only where safe; do not force DATABASE_URL to avoid broken placeholders
export POSTGRES_DB=${POSTGRES_DB:-rasa}

# Action endpoint URL default to local actions server unless explicitly provided
export ACTION_ENDPOINT_URL=${ACTION_ENDPOINT_URL:-http://localhost:5055/webhook}

# If DATABASE_URL is set, verify DB connectivity (fallback to in-memory if unreachable)
if [ -n "$DATABASE_URL" ]; then
  # Extract host and port from postgres URL
  DB_HOST=$(printf "%s" "$DATABASE_URL" | sed -E 's#.*://[^@]*@([^:/]+):?([0-9]*)/.*#\1#')
  DB_PORT=$(printf "%s" "$DATABASE_URL" | sed -E 's#.*://[^@]*@([^:/]+):?([0-9]*)/.*#\2#')
  if [ -z "$DB_PORT" ]; then DB_PORT=5432; fi

  if command -v nc >/dev/null 2>&1; then
    if ! nc -z -w 1 "$DB_HOST" "$DB_PORT" >/dev/null 2>&1; then
      echo "‚ö†Ô∏è  Database $DB_HOST:$DB_PORT unreachable. Falling back to in-memory tracker store."
      unset DATABASE_URL
    fi
  else
    # Basic TCP probe with bash; may block if firewall drops packets, so keep short
    (echo >/dev/tcp/$DB_HOST/$DB_PORT) >/dev/null 2>&1 || {
      echo "‚ö†Ô∏è  Database $DB_HOST:$DB_PORT unreachable. Falling back to in-memory tracker store."
      unset DATABASE_URL
    }
  fi
fi

# Generate a concrete endpoints file using current environment values.
ENDPOINTS_GEN="endpoints.generated.yml"

echo "üß© Preparing endpoints configuration ($ENDPOINTS_GEN)"
{
  echo "# Autogenerated by start-rasa.sh"
  echo "action_endpoint:"
  echo "  url: \"${ACTION_ENDPOINT_URL}\""
  if [ -n "$DATABASE_URL" ]; then
    echo
    echo "tracker_store:"
    echo "  type: SQL"
    echo "  dialect: postgresql"
    echo "  url: \"${DATABASE_URL}\""
    echo "  pool_size: 10"
    echo "  pool_recycle: 300"
    echo "  echo: false"
  fi
} > "$ENDPOINTS_GEN"

echo "üîó Action endpoint URL: $ACTION_ENDPOINT_URL"
if [ -n "$DATABASE_URL" ]; then
  echo "üóÑÔ∏è  Tracker DB URL: $DATABASE_URL"
else
  echo "üóÑÔ∏è  No DATABASE_URL set; using in-memory tracker store"
fi

# Find Rasa executable
RASA_CMD=$(which rasa)
if [ -z "$RASA_CMD" ]; then
    RASA_CMD="/usr/local/bin/rasa"
fi

echo "üîß Using Rasa command: $RASA_CMD"

# Check if Rasa is executable
if [ ! -x "$RASA_CMD" ]; then
    echo "‚ùå Rasa not found or not executable at $RASA_CMD"
    echo "üì¶ Available Python packages:"
    pip list | grep rasa || echo "No rasa packages found"
    echo "üêç Python path: $(which python)"
    echo "üì¶ Pip path: $(which pip)"
    exit 1
fi
# Also find Python executable inside venv to control warnings via -W flags
PYTHON_CMD=$(which python || true)
if [ -z "$PYTHON_CMD" ]; then
  PYTHON_CMD="python3"
fi


# Set memory optimization environment variables
export TF_CPP_MIN_LOG_LEVEL=2
export TF_FORCE_GPU_ALLOW_GROWTH=true
export OMP_NUM_THREADS=1
export MKL_NUM_THREADS=1
export NUMEXPR_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1

# Silence SQLAlchemy 2.0 deprecation noise for pin <2.0
export SQLALCHEMY_SILENCE_UBER_WARNING=1

# Silence Python deprecation warnings from third-party libs (pkg_resources, jax, etc.)
export PYTHONWARNINGS=ignore::DeprecationWarning

# Create necessary directories
mkdir -p models logs

# Check if models exist
if [ ! -d "models" ] || [ -z "$(ls -A models/*.tar.gz 2>/dev/null)" ]; then
    echo "ü§ñ No trained models found, training Rasa model..."
    echo "‚ö†Ô∏è Warning: Training may take several minutes..."
    
    # Train with timeout to prevent hanging
    timeout 1800 $RASA_CMD train --force || {
        echo "‚ö†Ô∏è Training timed out or failed. Starting server without training..."
        echo "üìù Note: You may need to train the model locally and include it in the deployment."
    }
else
    echo "‚úÖ Found existing models, cleaning up old ones to save memory..."
    # Keep only the latest 2 models
    ls -t models/*.tar.gz 2>/dev/null | tail -n +3 | xargs rm -f 2>/dev/null || true
fi

# Verify port is set
if [ -z "$PORT" ]; then
    echo "‚ùå ERROR: PORT environment variable not set"
    exit 1
fi

echo "üåê Starting Rasa server on port $PORT with memory optimizations..."
echo "üîß RASA_CMD: $RASA_CMD"
echo "üîß PORT: $PORT"
echo "üîß Environment: ${ENVIRONMENT:-production}"

# Start Rasa server with proper error handling
echo "üöÄ Starting Rasa server..."
exec "$PYTHON_CMD" -W ignore::DeprecationWarning -W ignore::PendingDeprecationWarning -m rasa run \
    --enable-api \
    --cors "*" \
    --port "$PORT" \
    -i 0.0.0.0 \
    --credentials credentials.yml \
    --endpoints "$ENDPOINTS_GEN"



================================================================================
FILE: backend/start-whatsapp-rasa.sh
SIZE: 1.7KB
TYPE: .sh
================================================================================

#!/bin/bash

# WhatsApp Business API + Rasa Startup Script
# This script starts Rasa with WhatsApp Business API integration

echo "üöÄ Starting Rasa with WhatsApp Business API integration..."

# Check if virtual environment exists
if [ ! -d "rasa/rasa_env" ]; then
    echo "‚ùå Rasa virtual environment not found. Please run setup first."
    exit 1
fi

# Activate virtual environment
echo "üì¶ Activating Rasa virtual environment..."
source rasa/rasa_env/bin/activate

# Check if .env file exists
if [ ! -f "rasa/.env" ]; then
    echo "‚ö†Ô∏è  .env file not found. Creating from example..."
    cp rasa/whatsapp.env.example rasa/.env
    echo "üìù Please edit rasa/.env with your WhatsApp Business API credentials"
    echo "   Required variables:"
    echo "   - WHATSAPP_ACCESS_TOKEN"
    echo "   - WHATSAPP_PHONE_NUMBER_ID"
    echo "   - WHATSAPP_BUSINESS_ACCOUNT_ID"
    echo "   - WHATSAPP_VERIFY_TOKEN"
    echo "   - OPENROUTER_API_KEY"
    exit 1
fi

# Load environment variables
export $(cat rasa/.env | grep -v '^#' | xargs)

# Check required environment variables
if [ -z "$WHATSAPP_ACCESS_TOKEN" ] || [ -z "$WHATSAPP_PHONE_NUMBER_ID" ] || [ -z "$WHATSAPP_BUSINESS_ACCOUNT_ID" ]; then
    echo "‚ùå Missing required WhatsApp environment variables"
    echo "   Please set the following in rasa/.env:"
    echo "   - WHATSAPP_ACCESS_TOKEN"
    echo "   - WHATSAPP_PHONE_NUMBER_ID"
    echo "   - WHATSAPP_BUSINESS_ACCOUNT_ID"
    exit 1
fi

# Install additional dependencies if needed
echo "üì¶ Installing additional dependencies..."
pip install aiohttp

# Start Rasa server with WhatsApp connector
echo "ü§ñ Starting Rasa server with WhatsApp Business API..."
cd rasa

# Run the custom WhatsApp startup script
python run_whatsapp.py --enable-api --cors "*" --debug



================================================================================
FILE: backend/test-telegram-integration.py
SIZE: 4.8KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Test Telegram Integration
Tests the Telegram bot integration without setting up webhooks
"""

import asyncio
import aiohttp
import json
from typing import Dict, Any, Optional

# Telegram Bot Configuration
BOT_TOKEN = "8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

async def test_bot_connection():
    """Test basic bot connection"""
    print("üîç Testing bot connection...")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{BASE_URL}/getMe") as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        bot_info = data.get("result")
                        print(f"‚úÖ Bot connected successfully!")
                        print(f"   Name: {bot_info.get('first_name')}")
                        print(f"   Username: @{bot_info.get('username', 'No username')}")
                        print(f"   ID: {bot_info.get('id')}")
                        return True
                    else:
                        print(f"‚ùå Bot API error: {data.get('description')}")
                        return False
                else:
                    print(f"‚ùå HTTP error: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Connection error: {e}")
        return False

async def test_send_message(chat_id: str, message: str):
    """Test sending a message"""
    print(f"üì§ Testing message send to {chat_id}...")
    
    try:
        payload = {
            "chat_id": chat_id,
            "text": message,
            "parse_mode": "HTML"
        }

        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{BASE_URL}/sendMessage",
                json=payload
            ) as response:
                if response.status == 200:
                    data = await response.json()
                    if data.get("ok"):
                        print(f"‚úÖ Message sent successfully!")
                        return True
                    else:
                        print(f"‚ùå Send error: {data.get('description')}")
                        return False
                else:
                    print(f"‚ùå HTTP error: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Send error: {e}")
        return False

async def test_webhook_endpoint(webhook_url: str):
    """Test webhook endpoint accessibility"""
    print(f"üîó Testing webhook endpoint: {webhook_url}")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(webhook_url) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ Webhook endpoint accessible!")
                    print(f"   Response: {data}")
                    return True
                else:
                    print(f"‚ùå Webhook HTTP error: {response.status}")
                    return False
    except Exception as e:
        print(f"‚ùå Webhook error: {e}")
        return False

async def main():
    print("üß™ Telegram Integration Test")
    print("=" * 40)

    # Test 1: Bot connection
    print("\n1Ô∏è‚É£ Testing bot connection...")
    bot_connected = await test_bot_connection()
    
    if not bot_connected:
        print("‚ùå Bot connection failed. Please check your bot token.")
        return

    # Test 2: Send test message (optional)
    print("\n2Ô∏è‚É£ Test message sending (optional)")
    chat_id = input("Enter a chat ID to send test message (or press Enter to skip): ").strip()
    
    if chat_id:
        test_message = "ü§ñ Hello! This is a test message from SoulPath bot. Integration is working!"
        await test_send_message(chat_id, test_message)
    else:
        print("‚è≠Ô∏è Skipping message test")

    # Test 3: Webhook endpoint (optional)
    print("\n3Ô∏è‚É£ Test webhook endpoint (optional)")
    webhook_url = input("Enter webhook URL to test (or press Enter to skip): ").strip()
    
    if webhook_url:
        await test_webhook_endpoint(webhook_url)
    else:
        print("‚è≠Ô∏è Skipping webhook test")

    print("\nüéâ Test completed!")
    print("\nüìã Summary:")
    print(f"   Bot Connection: {'‚úÖ Success' if bot_connected else '‚ùå Failed'}")
    print(f"   Message Test: {'‚úÖ Success' if chat_id else '‚è≠Ô∏è Skipped'}")
    print(f"   Webhook Test: {'‚úÖ Success' if webhook_url else '‚è≠Ô∏è Skipped'}")

    print("\nüí° Next steps:")
    print("1. Set up webhook using setup-telegram-local.py")
    print("2. Start your Next.js app: npm run dev")
    print("3. Start ngrok: ngrok http 3000")
    print("4. Test the bot by sending messages")

if __name__ == "__main__":
    asyncio.run(main())



================================================================================
FILE: backend/test-whatsapp-integration.py
SIZE: 4.8KB
TYPE: .py
================================================================================

#!/usr/bin/env python3
"""
Test script for WhatsApp Business API integration
"""

import os
import sys
import asyncio
import aiohttp
import json
from pathlib import Path

# Add the connectors directory to the Python path
sys.path.insert(0, str(Path(__file__).parent / "rasa" / "connectors"))

from connectors.whatsapp_connector import WhatsAppOutput

async def test_whatsapp_connection():
    """Test WhatsApp Business API connection"""
    
    # Load environment variables
    access_token = os.getenv("WHATSAPP_ACCESS_TOKEN")
    phone_number_id = os.getenv("WHATSAPP_PHONE_NUMBER_ID")
    
    if not access_token or not phone_number_id:
        print("‚ùå Missing WhatsApp credentials")
        print("Please set WHATSAPP_ACCESS_TOKEN and WHATSAPP_PHONE_NUMBER_ID")
        return False
    
    print(f"üîç Testing WhatsApp connection...")
    print(f"Phone Number ID: {phone_number_id}")
    
    # Create WhatsApp output channel
    whatsapp_output = WhatsAppOutput(access_token, phone_number_id)
    
    # Test sending a message (replace with a test number)
    test_number = input("Enter a test WhatsApp number (with country code, e.g., +1234567890): ")
    
    if not test_number:
        print("‚ùå No test number provided")
        return False
    
    try:
        # Send test message
        await whatsapp_output.send_text_message(
            test_number, 
            "ü§ñ Test message from Rasa WhatsApp integration! This is a test of the WhatsApp Business API connection."
        )
        print("‚úÖ Test message sent successfully!")
        return True
        
    except Exception as e:
        print(f"‚ùå Failed to send test message: {e}")
        return False

async def test_webhook_verification():
    """Test webhook verification"""
    
    webhook_url = os.getenv("WHATSAPP_WEBHOOK_URL")
    verify_token = os.getenv("WHATSAPP_VERIFY_TOKEN")
    
    if not webhook_url or not verify_token:
        print("‚ùå Missing webhook configuration")
        print("Please set WHATSAPP_WEBHOOK_URL and WHATSAPP_VERIFY_TOKEN")
        return False
    
    print(f"üîç Testing webhook verification...")
    print(f"Webhook URL: {webhook_url}")
    
    # Test webhook verification
    test_url = f"{webhook_url}?hub.mode=subscribe&hub.verify_token={verify_token}&hub.challenge=test_challenge_123"
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(test_url) as resp:
                if resp.status == 200:
                    response_text = await resp.text()
                    if response_text == "test_challenge_123":
                        print("‚úÖ Webhook verification successful!")
                        return True
                    else:
                        print(f"‚ùå Webhook verification failed: unexpected response: {response_text}")
                        return False
                else:
                    print(f"‚ùå Webhook verification failed: HTTP {resp.status}")
                    return False
                    
    except Exception as e:
        print(f"‚ùå Webhook verification error: {e}")
        return False

async def main():
    """Main test function"""
    
    print("üß™ WhatsApp Business API Integration Test")
    print("=" * 50)
    
    # Load environment variables from .env file
    env_file = Path(__file__).parent / "rasa" / ".env"
    if env_file.exists():
        with open(env_file) as f:
            for line in f:
                if line.strip() and not line.startswith('#'):
                    key, value = line.strip().split('=', 1)
                    os.environ[key] = value
        print("‚úÖ Environment variables loaded from .env file")
    else:
        print("‚ö†Ô∏è  No .env file found. Using system environment variables.")
    
    print()
    
    # Test webhook verification
    webhook_ok = await test_webhook_verification()
    print()
    
    # Test message sending
    message_ok = await test_whatsapp_connection()
    print()
    
    # Summary
    print("üìä Test Results:")
    print(f"Webhook Verification: {'‚úÖ PASS' if webhook_ok else '‚ùå FAIL'}")
    print(f"Message Sending: {'‚úÖ PASS' if message_ok else '‚ùå FAIL'}")
    
    if webhook_ok and message_ok:
        print("\nüéâ All tests passed! WhatsApp integration is working correctly.")
    else:
        print("\n‚ö†Ô∏è  Some tests failed. Please check your configuration.")
        print("\nTroubleshooting tips:")
        if not webhook_ok:
            print("- Check that your webhook URL is publicly accessible")
            print("- Verify WHATSAPP_VERIFY_TOKEN matches Meta configuration")
        if not message_ok:
            print("- Check that WHATSAPP_ACCESS_TOKEN is valid")
            print("- Verify WHATSAPP_PHONE_NUMBER_ID is correct")
            print("- Ensure your WhatsApp Business account is approved")

if __name__ == "__main__":
    asyncio.run(main())



================================================================================
FILE: package.json
SIZE: 1.2KB
TYPE: .json
================================================================================

{
  "name": "wellness-monorepo",
  "version": "1.0.0",
  "description": "Wellness platform monorepo with Rasa backend and Next.js frontend",
  "private": true,
  "workspaces": [
    "backend",
    "frontend"
  ],
  "scripts": {
    "dev": "concurrently \"npm run dev:backend\" \"npm run dev:frontend\"",
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev",
    "build": "npm run build:backend && npm run build:frontend",
    "build:backend": "cd backend && npm run build",
    "build:frontend": "cd frontend && npm run build",
    "start": "concurrently \"npm run start:backend\" \"npm run start:frontend\"",
    "start:backend": "cd backend && npm start",
    "start:frontend": "cd frontend && npm start",
    "install:all": "npm install && cd backend && npm install && cd ../frontend && npm install",
    "clean": "rm -rf node_modules backend/node_modules frontend/node_modules",
    "deploy:backend": "cd backend && npm run deploy",
    "deploy:frontend": "cd frontend && npm run deploy"
  },
  "devDependencies": {
    "concurrently": "^8.2.2"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=8.0.0"
  },
  "dependencies": {
    "node-fetch": "^3.3.2"
  }
}



================================================================================
FILE: README.md
SIZE: 1.4KB
TYPE: .md
================================================================================

# MatMax Yoga Studio Monorepo

A comprehensive platform for MatMax Yoga Studio with Rasa conversational AI backend and Next.js frontend.

## Structure

```
wellness-monorepo/
‚îú‚îÄ‚îÄ backend/          # Rasa conversational AI backend
‚îú‚îÄ‚îÄ frontend/         # Next.js frontend application
‚îú‚îÄ‚îÄ package.json      # Monorepo configuration
‚îî‚îÄ‚îÄ README.md         # This file
```

## Quick Start

### Install Dependencies
```bash
npm run install:all
```

### Development
```bash
# Run both backend and frontend
npm run dev

# Run only backend (Rasa)
npm run dev:backend

# Run only frontend (Next.js)
npm run dev:frontend
```

### Production
```bash
# Build both applications
npm run build

# Start both applications
npm start
```

## Deployment

### Backend (Render.com)
- Located in `backend/` directory
- Uses `render.yaml` for deployment configuration
- Deploy with: `npm run deploy:backend`

### Frontend (Vercel)
- Located in `frontend/` directory
- Uses Vercel configuration
- Deploy with: `npm run deploy:frontend`

## Environment Variables

### Backend
- See `backend/.env.example` for required variables

### Frontend
- See `frontend/.env.example` for required variables

## Development Workflow

1. Make changes in respective directories
2. Test locally with `npm run dev`
3. Deploy backend to Render: `npm run deploy:backend`
4. Deploy frontend to Vercel: `npm run deploy:frontend`



================================================================================
FILE: deploy.sh
SIZE: 1.9KB
TYPE: .sh
================================================================================

#!/bin/bash

# Wellness Platform Deployment Script
# This script helps deploy the monorepo to their respective platforms

echo "üöÄ Wellness Platform Deployment Script"
echo "======================================"

# Function to deploy backend to Render
deploy_backend() {
    echo "üì¶ Deploying Rasa backend to Render..."
    cd backend
    echo "Backend files ready for Render deployment:"
    echo "- render.yaml (deployment config)"
    echo "- rasa/ (Rasa application)"
    echo "- start-rasa.sh (startup script)"
    echo ""
    echo "To deploy to Render:"
    echo "1. Push this repository to GitHub"
    echo "2. Connect your GitHub repo to Render"
    echo "3. Render will automatically detect render.yaml and deploy"
    cd ..
}

# Function to deploy frontend to Vercel
deploy_frontend() {
    echo "üåê Deploying Next.js frontend to Vercel..."
    cd frontend
    echo "Frontend files ready for Vercel deployment:"
    echo "- vercel.json (deployment config)"
    echo "- package.json (with deploy script)"
    echo "- All Next.js application files"
    echo ""
    echo "To deploy to Vercel:"
    echo "1. Install Vercel CLI: npm i -g vercel"
    echo "2. Run: vercel --prod"
    echo "3. Or connect your GitHub repo to Vercel dashboard"
    cd ..
}

# Main menu
echo "Select deployment option:"
echo "1) Deploy Backend (Render)"
echo "2) Deploy Frontend (Vercel)"
echo "3) Deploy Both"
echo "4) Show deployment info"
read -p "Enter choice (1-4): " choice

case $choice in
    1)
        deploy_backend
        ;;
    2)
        deploy_frontend
        ;;
    3)
        deploy_backend
        echo ""
        deploy_frontend
        ;;
    4)
        echo "üìã Deployment Information:"
        echo ""
        deploy_backend
        echo ""
        deploy_frontend
        ;;
    *)
        echo "Invalid choice. Exiting."
        exit 1
        ;;
esac

echo ""
echo "‚úÖ Deployment setup complete!"
echo "Check the README.md for detailed instructions."



================================================================================
FILE: Dockerfile
SIZE: 1.6KB
TYPE: 
================================================================================

# Root Dockerfile for Render deployment
# This file points to the backend directory for the Rasa server

FROM python:3.10-slim

# Install system dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    gcc \
    g++ \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Set environment variables for optimization
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV TF_CPP_MIN_LOG_LEVEL=2
ENV OMP_NUM_THREADS=1
ENV MKL_NUM_THREADS=1
ENV NUMEXPR_NUM_THREADS=1
ENV OPENBLAS_NUM_THREADS=1

# Copy backend requirements first for better caching
COPY backend/rasa/requirements.txt ./

# Install Python dependencies
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements.txt && \
    pip install --no-cache-dir tensorflow-cpu==2.13.0 && \
    pip cache purge

# Download spaCy model
RUN python -c "import spacy.cli; spacy.cli.download('es_core_news_sm')" || \
    python -c "import spacy.cli; spacy.cli.download('en_core_web_sm')"

# Copy backend Rasa project
COPY backend/rasa/ ./

# Create necessary directories
RUN mkdir -p models logs

# Copy startup script
COPY backend/start-rasa.sh /app/start-rasa.sh
RUN chmod +x /app/start-rasa.sh

# Create non-root user for security
RUN useradd -m -u 1000 rasa && \
    chown -R rasa:rasa /app
USER rasa

# Expose port (Render will override with PORT env var)
EXPOSE 5005

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:5005/webhooks/rest/ || exit 1

# Start Rasa server
CMD ["/app/start-rasa.sh"]




================================================================================
# EXPORT SUMMARY
# Generated: 2025-09-15T20:54:49.705Z
# Files processed: 74
# Files excluded: 9
# Total size: 0.29MB
# 
# This export contains the complete codebase with full code content for
# comprehensive code review, focusing on authentication refactoring changes
# and complete application implementation.
================================================================================
