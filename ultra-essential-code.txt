# WELLNESS MONOREPO - ULTRA ESSENTIAL CODE
# Generated: 2025-09-15T17:50:30.320Z
# Export Type: Ultra Essential Code Only (20% smaller)
# 
# CORE BUSINESS LOGIC ONLY:
# - Authentication & Authorization
# - Payment Processing
# - Booking System
# - Admin Dashboard
# - API Routes
# - Database Schema
# - Core Components
# - Essential Hooks
#
# EXCLUDED:
# - UI Components (buttons, cards, inputs)
# - Modal Components
# - Admin Components
# - Payment UI Components
# - Theme Components
# - Utility Components
# - Documentation
# - Test files
# - Debug code
# - Media files
# - Configuration files
# - Non-critical components
#
# FOCUS: Core business logic and critical functionality only

==================================================
# START OF ULTRA ESSENTIAL CODE
==================================================


==================================================FILE: frontend/app/(admin)/dashboard/page.tsxSIZE: 12.94 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect } from 'react';  4 | import { useAuth } from '@/hooks/useAuth';  5 | import { adminApi } from '@/lib/api/admin';  6 |   7 | interface DashboardStats {  8 |   overview: {  9 |     totalUsers: number; 10 |     activeUsers: number; 11 |     totalBookings: number; 12 |     confirmedBookings: number; 13 |     totalPackages: number; 14 |     activePackages: number; 15 |     totalRevenue: number; 16 |     bookingConversionRate: number; 17 |     averageRevenuePerUser: number; 18 |     packageUtilizationRate: number; 19 |   }; 20 |   growth: { 21 |     newUsersLast30Days: number; 22 |     newBookingsLast30Days: number; 23 |   }; 24 |   recentActivity: { 25 |     recentBookings: Array<{ 26 |       id: number; 27 |       user: { 28 |         id: string; 29 |         email: string; 30 |         fullName: string | null; 31 |       }; 32 |       package: { 33 |         name: string; 34 |         sessionsCount: number; 35 |       }; 36 |       status: string; 37 |       createdAt: string; 38 |       sessionType: string; 39 |     }>; 40 |   }; 41 |   metadata: { 42 |     generatedAt: string; 43 |     generatedBy: string; 44 |     period: string; 45 |   }; 46 | } 47 |  48 | export default function AdminDashboardPage() { 49 |   const { user, isLoading: authLoading } = useAuth(); 50 |   const [stats, setStats] = useState<DashboardStats | null>(null); 51 |   const [loading, setLoading] = useState(true); 52 |   const [error, setError] = useState<string | null>(null); 53 |  54 |   useEffect(() => { 55 |     const fetchDashboardStats = async () => { 56 |       try { 57 |         setLoading(true); 58 |         setError(null); 59 |  60 |         const response = await adminApi.getDashboardStats(); 61 |  62 |         if (response.success && response.data) { 63 |           setStats(response.data); 64 |           } else { 65 |           setError(response.error || 'Failed to load dashboard statistics'); 66 |           } 67 |       } catch (err) { 68 |         const errorMessage = err instanceof Error ? err.message : 'Unknown error occurred'; 69 |         setError(errorMessage); 70 |         } finally { 71 |         setLoading(false); 72 |       } 73 |     }; 74 |  75 |     if (!authLoading && user) { 76 |       fetchDashboardStats(); 77 |     } 78 |   }, [user, authLoading]); 79 |  80 |   if (authLoading || loading) { 81 |     return ( 82 |       <div className="flex items-center justify-center h-screen"> 83 |         <div className="text-center"> 84 |           <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 85 |           <p className="text-gray-600">Loading dashboard...</p> 86 |         </div> 87 |       </div> 88 |     ); 89 |   } 90 |  91 |   if (error) { 92 |     return ( 93 |       <div className="flex items-center justify-center h-screen"> 94 |         <div className="text-center"> 95 |           <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4"> 96 |             <svg className="w-8 h-8 text-red-500" fill="none" stroke="currentColor" viewBox="0 0 24 24"> 97 |               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" /> 98 |             </svg> 99 |           </div>100 |           <h2 className="text-xl font-semibold text-gray-900 mb-2">Error Loading Dashboard</h2>101 |           <p className="text-gray-600 mb-4">{error}</p>102 |           <button103 |             onClick={() => window.location.reload()}104 |             className="px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors"105 |           >106 |             Retry107 |           </button>108 |         </div>109 |       </div>110 |     );111 |   }112 | 113 |   return (114 |     <div className="min-h-screen bg-gray-50 p-6">115 |       <div className="max-w-7xl mx-auto">116 |         {}117 |         <div className="mb-8">118 |           <h1 className="text-3xl font-bold text-gray-900">Admin Dashboard</h1>119 |           <p className="text-gray-600 mt-2">120 |             Welcome back, {user?.email} • Last updated: {stats?.metadata.generatedAt ? new Date(stats.metadata.generatedAt).toLocaleString() : 'N/A'}121 |           </p>122 |         </div>123 | 124 |         {}125 |         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">126 |           <div className="bg-white rounded-lg shadow p-6">127 |             <div className="flex items-center">128 |               <div className="p-2 bg-blue-100 rounded-lg">129 |                 <svg className="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">130 |                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />131 |                 </svg>132 |               </div>133 |               <div className="ml-4">134 |                 <p className="text-sm font-medium text-gray-600">Total Users</p>135 |                 <p className="text-2xl font-semibold text-gray-900">{stats?.overview.totalUsers || 0}</p>136 |               </div>137 |             </div>138 |           </div>139 | 140 |           <div className="bg-white rounded-lg shadow p-6">141 |             <div className="flex items-center">142 |               <div className="p-2 bg-green-100 rounded-lg">143 |                 <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">144 |                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />145 |                 </svg>146 |               </div>147 |               <div className="ml-4">148 |                 <p className="text-sm font-medium text-gray-600">Total Bookings</p>149 |                 <p className="text-2xl font-semibold text-gray-900">{stats?.overview.totalBookings || 0}</p>150 |               </div>151 |             </div>152 |           </div>153 | 154 |           <div className="bg-white rounded-lg shadow p-6">155 |             <div className="flex items-center">156 |               <div className="p-2 bg-yellow-100 rounded-lg">157 |                 <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">158 |                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1" />159 |                 </svg>160 |               </div>161 |               <div className="ml-4">162 |                 <p className="text-sm font-medium text-gray-600">Total Revenue</p>163 |                 <p className="text-2xl font-semibold text-gray-900">164 |                   ${stats?.overview.totalRevenue ? stats.overview.totalRevenue.toLocaleString() : 0}165 |                 </p>166 |               </div>167 |             </div>168 |           </div>169 | 170 |           <div className="bg-white rounded-lg shadow p-6">171 |             <div className="flex items-center">172 |               <div className="p-2 bg-purple-100 rounded-lg">173 |                 <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">174 |                   <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />175 |                 </svg>176 |               </div>177 |               <div className="ml-4">178 |                 <p className="text-sm font-medium text-gray-600">Conversion Rate</p>179 |                 <p className="text-2xl font-semibold text-gray-900">180 |                   {stats?.overview.bookingConversionRate ? `${stats.overview.bookingConversionRate}%` : '0%'}181 |                 </p>182 |               </div>183 |             </div>184 |           </div>185 |         </div>186 | 187 |         {}188 |         <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">189 |           <div className="bg-white rounded-lg shadow p-6">190 |             <h3 className="text-lg font-semibold text-gray-900 mb-4">Growth Metrics (30 days)</h3>191 |             <div className="space-y-4">192 |               <div className="flex justify-between items-center">193 |                 <span className="text-gray-600">New Users</span>194 |                 <span className="text-2xl font-semibold text-green-600">195 |                   +{stats?.growth.newUsersLast30Days || 0}196 |                 </span>197 |               </div>198 |               <div className="flex justify-between items-center">199 |                 <span className="text-gray-600">New Bookings</span>200 |                 <span className="text-2xl font-semibold text-blue-600">201 |                   +{stats?.growth.newBookingsLast30Days || 0}202 |                 </span>203 |               </div>204 |             </div>205 |           </div>206 | 207 |           <div className="bg-white rounded-lg shadow p-6">208 |             <h3 className="text-lg font-semibold text-gray-900 mb-4">Performance Metrics</h3>209 |             <div className="space-y-4">210 |               <div className="flex justify-between items-center">211 |                 <span className="text-gray-600">Avg Revenue per User</span>212 |                 <span className="text-2xl font-semibold text-yellow-600">213 |                   ${stats?.overview.averageRevenuePerUser ? stats.overview.averageRevenuePerUser.toFixed(2) : '0.00'}214 |                 </span>215 |               </div>216 |               <div className="flex justify-between items-center">217 |                 <span className="text-gray-600">Package Utilization</span>218 |                 <span className="text-2xl font-semibold text-purple-600">219 |                   {stats?.overview.packageUtilizationRate ? `${stats.overview.packageUtilizationRate}%` : '0%'}220 |                 </span>221 |               </div>222 |             </div>223 |           </div>224 |         </div>225 | 226 |         {}227 |         <div className="bg-white rounded-lg shadow">228 |           <div className="px-6 py-4 border-b border-gray-200">229 |             <h3 className="text-lg font-semibold text-gray-900">Recent Bookings</h3>230 |           </div>231 |           <div className="p-6">232 |             {stats?.recentActivity.recentBookings && stats.recentActivity.recentBookings.length > 0 ? (233 |               <div className="overflow-x-auto">234 |                 <table className="min-w-full divide-y divide-gray-200">235 |                   <thead className="bg-gray-50">236 |                     <tr>237 |                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">User</th>238 |                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Package</th>239 |                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>240 |                       <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>241 |                     </tr>242 |                   </thead>243 |                   <tbody className="bg-white divide-y divide-gray-200">244 |                     {stats.recentActivity.recentBookings.map((booking) => (245 |                       <tr key={booking.id}>246 |                         <td className="px-6 py-4 whitespace-nowrap">247 |                           <div>248 |                             <div className="text-sm font-medium text-gray-900">249 |                               {booking.user.fullName || booking.user.email}250 |                             </div>251 |                             <div className="text-sm text-gray-500">{booking.user.email}</div>252 |                           </div>253 |                         </td>254 |                         <td className="px-6 py-4 whitespace-nowrap">255 |                           <div className="text-sm text-gray-900">{booking.package.name}</div>256 |                           <div className="text-sm text-gray-500">{booking.package.sessionsCount} sessions</div>257 |                         </td>258 |                         <td className="px-6 py-4 whitespace-nowrap">259 |                           <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${260 |                             booking.status === 'confirmed'261 |                               ? 'bg-green-100 text-green-800'262 |                               : 'bg-yellow-100 text-yellow-800'263 |                           }`}>264 |                             {booking.status}265 |                           </span>266 |                         </td>267 |                         <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">268 |                           {new Date(booking.createdAt).toLocaleDateString()}269 |                         </td>270 |                       </tr>271 |                     ))}272 |                   </tbody>273 |                 </table>274 |               </div>275 |             ) : (276 |               <div className="text-center py-8">277 |                 <p className="text-gray-500">No recent bookings found</p>278 |               </div>279 |             )}280 |           </div>281 |         </div>282 |       </div>283 |     </div>284 |   );285 | }
==================================================END: frontend/app/(admin)/dashboard/page.tsx==================================================


==================================================FILE: frontend/app/(admin)/layout.tsxSIZE: 2.60 KB==================================================
  1 | 'use client';  2 |   3 | import React from 'react';  4 | import { AdminDashboard } from '@/components/AdminDashboard';  5 | import { useAuth } from '@/hooks/useAuth';  6 | import { useRouter } from 'next/navigation';  7 | import { useEffect } from 'react';  8 | import { Button } from '@/components/ui/button';  9 | import { Shield, ArrowLeft } from 'lucide-react'; 10 |  11 | export default function AdminLayout({ 12 |   children, 13 | }: { 14 |   children: React.ReactNode; 15 | }) { 16 |   const { user, isAdmin, isLoading } = useAuth(); 17 |   const router = useRouter(); 18 |  19 |   useEffect(() => { 20 |  21 |     if (!isLoading && (!user || !isAdmin)) { 22 |  23 |       router.push('/account'); 24 |     } 25 |   }, [user, isAdmin, isLoading, router]); 26 |  27 |   if (isLoading) { 28 |     return ( 29 |       <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e]"> 30 |         <div className="text-center"> 31 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 32 |           <p className="text-[#FFD700] text-lg font-semibold">Loading...</p> 33 |         </div> 34 |       </div> 35 |     ); 36 |   } 37 |  38 |   if (!user || !isAdmin) { 39 |     return ( 40 |       <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e]"> 41 |         <div className="text-center max-w-md mx-auto p-8"> 42 |           <Shield className="w-16 h-16 text-red-500 mx-auto mb-6" /> 43 |           <h1 className="text-2xl font-bold text-white mb-4">Access Denied</h1> 44 |           <p className="text-gray-400 mb-6"> 45 |             You don&apos;t have permission to access the admin dashboard. Please contact an administrator if you believe this is an error. 46 |           </p> 47 |           <div className="flex gap-4 justify-center"> 48 |             <Button 49 |               onClick={() => router.push('/account')} 50 |               className="bg-[#FFD700] text-black hover:bg-[#FFD700]/90" 51 |             > 52 |               <ArrowLeft className="w-4 h-4 mr-2" /> 53 |               Go to Account 54 |             </Button> 55 |             <Button 56 |               onClick={() => router.push('/')} 57 |               variant="outline" 58 |               className="bg-[#16213e] border-[#0a0a23] text-white hover:bg-[#0a0a23]" 59 |             > 60 |               Go Home 61 |             </Button> 62 |           </div> 63 |         </div> 64 |       </div> 65 |     ); 66 |   } 67 |  68 |   return ( 69 |     <AdminDashboard isModal={false}> 70 |       {children} 71 |     </AdminDashboard> 72 |   ); 73 | }
==================================================END: frontend/app/(admin)/layout.tsx==================================================


==================================================FILE: frontend/app/(client)/account/live-session/page.tsxSIZE: 19.32 KB==================================================
  1 | 'use client';  2 |   3 | import React, { useState, useEffect, useCallback } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { Badge } from '@/components/ui/badge';  7 | import { Video, Calendar, Clock, Users, Mic, MicOff, VideoIcon, VideoOff, PhoneOff, Settings, Share2, MessageSquare } from 'lucide-react';  8 | import { toast } from 'sonner';  9 | import { useAuth } from '@/hooks/useAuth'; 10 |  11 | interface LiveSessionConfig { 12 |   id: string; 13 |   name: string; 14 |   provider: 'zoom' | 'meet' | 'teams' | 'custom'; 15 |   apiKey: string; 16 |   meetingId?: string; 17 |   meetingUrl?: string; 18 |   isActive: boolean; 19 |   settings: { 20 |     allowVideo: boolean; 21 |     allowAudio: boolean; 22 |     allowChat: boolean; 23 |     allowScreenShare: boolean; 24 |     maxParticipants: number; 25 |     recordingEnabled: boolean; 26 |   }; 27 | } 28 |  29 | interface UpcomingSession { 30 |   id: string; 31 |   title: string; 32 |   description: string; 33 |   startTime: string; 34 |   endTime: string; 35 |   duration: number; 36 |   status: 'scheduled' | 'live' | 'ended'; 37 |   meetingUrl?: string; 38 |   meetingId?: string; 39 |   participants: number; 40 |   maxParticipants: number; 41 | } 42 |  43 | export default function LiveSessionPage() { 44 |   const { user } = useAuth(); 45 |   const [config, setConfig] = useState<LiveSessionConfig | null>(null); 46 |   const [upcomingSessions, setUpcomingSessions] = useState<UpcomingSession[]>([]); 47 |   const [currentSession, setCurrentSession] = useState<UpcomingSession | null>(null); 48 |   const [isInSession, setIsInSession] = useState(false); 49 |   const [loading, setLoading] = useState(true); 50 |   const [sessionSettings, setSessionSettings] = useState({ 51 |     videoEnabled: true, 52 |     audioEnabled: true, 53 |     chatEnabled: true, 54 |     screenShareEnabled: false 55 |   }); 56 |  57 |   const loadConfig = useCallback(async () => { 58 |     if (!user?.access_token) return; 59 |  60 |     try { 61 |       const response = await fetch('/api/client/live-session/config', { 62 |         headers: { 63 |           'Authorization': `Bearer ${user.access_token}`, 64 |           'Content-Type': 'application/json' 65 |         } 66 |       }); 67 |  68 |       if (response.ok) { 69 |         const data = await response.json(); 70 |         if (data.success) { 71 |           setConfig(data.data); 72 |         } 73 |       } 74 |     } catch (error) { 75 |       } 76 |   }, [user?.access_token]); 77 |  78 |   const loadUpcomingSessions = useCallback(async () => { 79 |     if (!user?.access_token) return; 80 |  81 |     try { 82 |       const response = await fetch('/api/client/live-session/upcoming', { 83 |         headers: { 84 |           'Authorization': `Bearer ${user.access_token}`, 85 |           'Content-Type': 'application/json' 86 |         } 87 |       }); 88 |  89 |       if (response.ok) { 90 |         const data = await response.json(); 91 |         if (data.success) { 92 |           setUpcomingSessions(data.data); 93 |  94 |           const liveSession = data.data.find((session: UpcomingSession) => session.status === 'live'); 95 |           if (liveSession) { 96 |             setCurrentSession(liveSession); 97 |             setIsInSession(true); 98 |           } 99 |         }100 |       }101 |     } catch (error) {102 |       }103 |   }, [user?.access_token]);104 | 105 |   const loadData = useCallback(async () => {106 |     setLoading(true);107 |     try {108 |       await Promise.all([109 |         loadConfig(),110 |         loadUpcomingSessions()111 |       ]);112 |     } catch (error) {113 |       toast.error('Failed to load live session data');114 |     } finally {115 |       setLoading(false);116 |     }117 |   }, [loadConfig, loadUpcomingSessions]);118 | 119 |   useEffect(() => {120 |     if (user?.access_token) {121 |       loadData();122 |     }123 |   }, [user?.access_token, loadData]);124 | 125 |   const joinSession = async (session: UpcomingSession) => {126 |     try {127 |       if (!config) {128 |         toast.error('Live session configuration not available');129 |         return;130 |       }131 | 132 |       if (!session.meetingUrl) {133 |         const response = await fetch('/api/client/live-session/create-meeting', {134 |           method: 'POST',135 |           headers: {136 |             'Authorization': `Bearer ${user?.access_token}`,137 |             'Content-Type': 'application/json'138 |           },139 |           body: JSON.stringify({140 |             sessionId: session.id,141 |             title: session.title,142 |             duration: session.duration,143 |             settings: sessionSettings144 |           })145 |         });146 | 147 |         const result = await response.json();148 |         if (result.success) {149 |           session.meetingUrl = result.data.meetingUrl;150 |           session.meetingId = result.data.meetingId;151 |         }152 |       }153 | 154 |       if (session.meetingUrl) {155 |         setCurrentSession(session);156 |         setIsInSession(true);157 |         toast.success('Joining live session...');158 |       } else {159 |         toast.error('Failed to create meeting');160 |       }161 |     } catch (error) {162 |       toast.error('Failed to join session');163 |     }164 |   };165 | 166 |   const leaveSession = () => {167 |     setIsInSession(false);168 |     setCurrentSession(null);169 |     toast.success('Left the session');170 |   };171 | 172 |   const toggleVideo = () => {173 |     setSessionSettings(prev => ({ ...prev, videoEnabled: !prev.videoEnabled }));174 |   };175 | 176 |   const toggleAudio = () => {177 |     setSessionSettings(prev => ({ ...prev, audioEnabled: !prev.audioEnabled }));178 |   };179 | 180 |   const toggleChat = () => {181 |     setSessionSettings(prev => ({ ...prev, chatEnabled: !prev.chatEnabled }));182 |   };183 | 184 |   const toggleScreenShare = () => {185 |     setSessionSettings(prev => ({ ...prev, screenShareEnabled: !prev.screenShareEnabled }));186 |   };187 | 188 |   const formatTime = (dateString: string) => {189 |     return new Date(dateString).toLocaleString('en-US', {190 |       weekday: 'short',191 |       year: 'numeric',192 |       month: 'short',193 |       day: 'numeric',194 |       hour: '2-digit',195 |       minute: '2-digit'196 |     });197 |   };198 | 199 |   const getStatusColor = (status: string) => {200 |     switch (status) {201 |       case 'scheduled': return 'bg-blue-500';202 |       case 'live': return 'bg-green-500';203 |       case 'ended': return 'bg-gray-500';204 |       default: return 'bg-gray-500';205 |     }206 |   };207 | 208 |   const getStatusText = (status: string) => {209 |     switch (status) {210 |       case 'scheduled': return 'Scheduled';211 |       case 'live': return 'Live Now';212 |       case 'ended': return 'Ended';213 |       default: return 'Unknown';214 |     }215 |   };216 | 217 |   if (loading) {218 |     return (219 |       <div className="flex items-center justify-center min-h-[400px]">220 |         <div className="text-center">221 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>222 |           <p className="text-[#FFD700] text-lg font-semibold">Loading live sessions...</p>223 |         </div>224 |       </div>225 |     );226 |   }227 | 228 |   if (isInSession && currentSession) {229 |     return (230 |       <div className="min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e]">231 |         <div className="container mx-auto p-6">232 |           {}233 |           <div className="flex justify-between items-center mb-6">234 |             <div>235 |               <h1 className="text-2xl font-bold text-white">{currentSession.title}</h1>236 |               <p className="text-gray-400">{currentSession.description}</p>237 |             </div>238 |             <Button239 |               onClick={leaveSession}240 |               variant="outline"241 |               className="bg-red-600 text-white border-red-600 hover:bg-red-700"242 |             >243 |               <PhoneOff className="w-4 h-4 mr-2" />244 |               Leave Session245 |             </Button>246 |           </div>247 | 248 |           {}249 |           <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">250 |             {}251 |             <div className="lg:col-span-3">252 |               <Card className="bg-[#1a1a2e] border-[#16213e] h-[600px]">253 |                 <CardContent className="p-0 h-full">254 |                   {config?.provider === 'zoom' ? (255 |                     <iframe256 |                       src={currentSession.meetingUrl}257 |                       className="w-full h-full rounded-lg"258 |                       allow="camera; microphone; fullscreen; speaker; display-capture"259 |                       title="Zoom Meeting"260 |                     />261 |                   ) : config?.provider === 'meet' ? (262 |                     <iframe263 |                       src={currentSession.meetingUrl}264 |                       className="w-full h-full rounded-lg"265 |                       allow="camera; microphone; fullscreen; speaker; display-capture"266 |                       title="Google Meet"267 |                     />268 |                   ) : config?.provider === 'teams' ? (269 |                     <iframe270 |                       src={currentSession.meetingUrl}271 |                       className="w-full h-full rounded-lg"272 |                       allow="camera; microphone; fullscreen; speaker; display-capture"273 |                       title="Microsoft Teams"274 |                     />275 |                   ) : (276 |                     <div className="flex items-center justify-center h-full text-white">277 |                       <div className="text-center">278 |                         <Video className="w-16 h-16 mx-auto mb-4 text-[#ffd700]" />279 |                         <h3 className="text-xl font-semibold mb-2">Live Session</h3>280 |                         <p className="text-gray-400">Video conference will start here</p>281 |                         <p className="text-sm text-gray-500 mt-2">Meeting ID: {currentSession.meetingId}</p>282 |                       </div>283 |                     </div>284 |                   )}285 |                 </CardContent>286 |               </Card>287 |             </div>288 | 289 |             {}290 |             <div className="space-y-4">291 |               {}292 |               <Card className="bg-[#1a1a2e] border-[#16213e]">293 |                 <CardHeader>294 |                   <CardTitle className="text-white text-lg">Session Info</CardTitle>295 |                 </CardHeader>296 |                 <CardContent className="space-y-3">297 |                   <div className="flex items-center space-x-2">298 |                     <Users className="w-4 h-4 text-[#ffd700]" />299 |                     <span className="text-white text-sm">300 |                       {currentSession.participants}/{currentSession.maxParticipants} participants301 |                     </span>302 |                   </div>303 |                   <div className="flex items-center space-x-2">304 |                     <Clock className="w-4 h-4 text-[#ffd700]" />305 |                     <span className="text-white text-sm">306 |                       {currentSession.duration} minutes307 |                     </span>308 |                   </div>309 |                   <Badge className={`${getStatusColor(currentSession.status)} text-white`}>310 |                     {getStatusText(currentSession.status)}311 |                   </Badge>312 |                 </CardContent>313 |               </Card>314 | 315 |               {}316 |               <Card className="bg-[#1a1a2e] border-[#16213e]">317 |                 <CardHeader>318 |                   <CardTitle className="text-white text-lg">Controls</CardTitle>319 |                 </CardHeader>320 |                 <CardContent className="space-y-3">321 |                   <Button322 |                     onClick={toggleVideo}323 |                     variant={sessionSettings.videoEnabled ? "default" : "outline"}324 |                     className={`w-full ${sessionSettings.videoEnabled ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-600 hover:bg-gray-700'}`}325 |                   >326 |                     {sessionSettings.videoEnabled ? <VideoIcon className="w-4 h-4 mr-2" /> : <VideoOff className="w-4 h-4 mr-2" />}327 |                     {sessionSettings.videoEnabled ? 'Video On' : 'Video Off'}328 |                   </Button>329 | 330 |                   <Button331 |                     onClick={toggleAudio}332 |                     variant={sessionSettings.audioEnabled ? "default" : "outline"}333 |                     className={`w-full ${sessionSettings.audioEnabled ? 'bg-green-600 hover:bg-green-700' : 'bg-gray-600 hover:bg-gray-700'}`}334 |                   >335 |                     {sessionSettings.audioEnabled ? <Mic className="w-4 h-4 mr-2" /> : <MicOff className="w-4 h-4 mr-2" />}336 |                     {sessionSettings.audioEnabled ? 'Audio On' : 'Audio Off'}337 |                   </Button>338 | 339 |                   <Button340 |                     onClick={toggleScreenShare}341 |                     variant={sessionSettings.screenShareEnabled ? "default" : "outline"}342 |                     className={`w-full ${sessionSettings.screenShareEnabled ? 'bg-blue-600 hover:bg-blue-700' : 'bg-gray-600 hover:bg-gray-700'}`}343 |                   >344 |                     <Share2 className="w-4 h-4 mr-2" />345 |                     {sessionSettings.screenShareEnabled ? 'Stop Share' : 'Share Screen'}346 |                   </Button>347 | 348 |                   <Button349 |                     onClick={toggleChat}350 |                     variant={sessionSettings.chatEnabled ? "default" : "outline"}351 |                     className={`w-full ${sessionSettings.chatEnabled ? 'bg-purple-600 hover:bg-purple-700' : 'bg-gray-600 hover:bg-gray-700'}`}352 |                   >353 |                     <MessageSquare className="w-4 h-4 mr-2" />354 |                     {sessionSettings.chatEnabled ? 'Chat On' : 'Chat Off'}355 |                   </Button>356 |                 </CardContent>357 |               </Card>358 | 359 |               {}360 |               <Card className="bg-[#1a1a2e] border-[#16213e]">361 |                 <CardHeader>362 |                   <CardTitle className="text-white text-lg">Quick Actions</CardTitle>363 |                 </CardHeader>364 |                 <CardContent className="space-y-2">365 |                   <Button366 |                     variant="outline"367 |                     className="w-full bg-[#16213e] border-[#0a0a23] text-white hover:bg-[#0a0a23]"368 |                   >369 |                     <Settings className="w-4 h-4 mr-2" />370 |                     Settings371 |                   </Button>372 |                   <Button373 |                     variant="outline"374 |                     className="w-full bg-[#16213e] border-[#0a0a23] text-white hover:bg-[#0a0a23]"375 |                   >376 |                     <Share2 className="w-4 h-4 mr-2" />377 |                     Invite Others378 |                   </Button>379 |                 </CardContent>380 |               </Card>381 |             </div>382 |           </div>383 |         </div>384 |       </div>385 |     );386 |   }387 | 388 |   return (389 |     <div className="min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e]">390 |       <div className="container mx-auto p-6">391 |         <div className="text-center mb-8">392 |           <h1 className="text-4xl font-bold text-white mb-4">Live Sessions</h1>393 |           <p className="text-gray-400 text-lg">Join your spiritual guidance sessions</p>394 |         </div>395 | 396 |         {}397 |         {config ? (398 |           <Card className="bg-[#1a1a2e] border-[#16213e] mb-6">399 |             <CardContent className="p-4">400 |               <div className="flex items-center justify-between">401 |                 <div className="flex items-center space-x-3">402 |                   <Video className="w-6 h-6 text-[#ffd700]" />403 |                   <div>404 |                     <h3 className="text-white font-semibold">Live Session Ready</h3>405 |                     <p className="text-gray-400 text-sm">406 |                       Provider: {config.name} • Status: {config.isActive ? 'Active' : 'Inactive'}407 |                     </p>408 |                   </div>409 |                 </div>410 |                 <Badge className={config.isActive ? 'bg-green-500' : 'bg-red-500'}>411 |                   {config.isActive ? 'Connected' : 'Disconnected'}412 |                 </Badge>413 |               </div>414 |             </CardContent>415 |           </Card>416 |         ) : (417 |           <Card className="bg-[#1a1a2e] border-[#16213e] mb-6">418 |             <CardContent className="p-4">419 |               <div className="text-center">420 |                 <Video className="w-12 h-12 text-gray-500 mx-auto mb-4" />421 |                 <h3 className="text-white font-semibold mb-2">Live Session Not Configured</h3>422 |                 <p className="text-gray-400 text-sm">423 |                   Please contact your administrator to set up live session capabilities.424 |                 </p>425 |               </div>426 |             </CardContent>427 |           </Card>428 |         )}429 | 430 |         {}431 |         <div className="space-y-6">432 |           <h2 className="text-2xl font-bold text-white">Upcoming Sessions</h2>433 | 434 |           {upcomingSessions.length === 0 ? (435 |             <Card className="bg-[#1a1a2e] border-[#16213e]">436 |               <CardContent className="p-8 text-center">437 |                 <Calendar className="w-16 h-16 text-gray-500 mx-auto mb-4" />438 |                 <h3 className="text-white font-semibold mb-2">No Sessions Scheduled</h3>439 |                 <p className="text-gray-400">440 |                   You don&apos;t have any upcoming live sessions. Check back later or contact your spiritual guide.441 |                 </p>442 |               </CardContent>443 |             </Card>444 |           ) : (445 |             <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">446 |               {upcomingSessions.map((session) => (447 |                 <Card key={session.id} className="bg-[#1a1a2e] border-[#16213e] hover:border-[#ffd700]/50 transition-colors">448 |                   <CardHeader>449 |                     <div className="flex justify-between items-start">450 |                       <CardTitle className="text-white text-lg">{session.title}</CardTitle>451 |                       <Badge className={`${getStatusColor(session.status)} text-white`}>452 |                         {getStatusText(session.status)}453 |                       </Badge>454 |                     </div>455 |                     <p className="text-gray-400 text-sm">{session.description}</p>456 |                   </CardHeader>457 |                   <CardContent className="space-y-4">458 |                     <div className="space-y-2">459 |                       <div className="flex items-center space-x-2">460 |                         <Clock className="w-4 h-4 text-[#ffd700]" />461 |                         <span className="text-white text-sm">462 |                           {formatTime(session.startTime)}463 |                         </span>464 |                       </div>465 |                       <div className="flex items-center space-x-2">466 |                         <Users className="w-4 h-4 text-[#ffd700]" />467 |                         <span className="text-white text-sm">468 |                           {session.participants}/{session.maxParticipants} participants469 |                         </span>470 |                       </div>471 |                     </div>472 | 473 |                     {session.status === 'live' && (474 |                       <Button475 |                         onClick={() => joinSession(session)}476 |                         className="w-full bg-green-600 hover:bg-green-700 text-white"477 |                       >478 |                         <Video className="w-4 h-4 mr-2" />479 |                         Join Live Session480 |                       </Button>481 |                     )}482 | 483 |                     {session.status === 'scheduled' && (484 |                       <Button485 |                         onClick={() => joinSession(session)}486 |                         disabled={!config?.isActive}487 |                         className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90 disabled:opacity-50"488 |                       >489 |                         <Video className="w-4 h-4 mr-2" />490 |                         Join Session491 |                       </Button>492 |                     )}493 | 494 |                     {session.status === 'ended' && (495 |                       <Button496 |                         disabled497 |                         className="w-full bg-gray-600 text-white cursor-not-allowed"498 |                       >499 |                         Session Ended500 |                       </Button>501 |                     )}502 |                   </CardContent>503 |                 </Card>504 |               ))}505 |             </div>506 |           )}507 |         </div>508 |       </div>509 |     </div>510 |   );511 | }
==================================================END: frontend/app/(client)/account/live-session/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/my-packages/page.tsxSIZE: 8.97 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect, useCallback } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { Badge } from '@/components/ui/badge';  7 | import { PackageIcon, CalendarIcon, ClockIcon, ShoppingCart, CheckCircle, AlertCircle } from 'lucide-react';  8 | import { useAuth } from '@/hooks/useAuth';  9 | import Link from 'next/link'; 10 |  11 | interface UserPackage { 12 |   id: string; 13 |   packageId: number; 14 |   packageName: string; 15 |   packageDescription: string; 16 |   sessionsRemaining: number; 17 |   totalSessions: number; 18 |   expiresAt: string; 19 |   isActive: boolean; 20 |   purchaseDate: string; 21 |   price: number; 22 |   sessionDuration: number; 23 |   status: 'active' | 'expired' | 'completed'; 24 | } 25 |  26 | export default function MyPackagesPage() { 27 |   const { user } = useAuth(); 28 |   const [packages, setPackages] = useState<UserPackage[]>([]); 29 |   const [loading, setLoading] = useState(true); 30 |  31 |   const fetchMyPackages = useCallback(async () => { 32 |     try { 33 |       setLoading(true); 34 |       const response = await fetch('/api/client/my-packages', { 35 |         headers: { 36 |           'Authorization': `Bearer ${user?.access_token}`, 37 |           'Content-Type': 'application/json' 38 |         } 39 |       }); 40 |  41 |       const result = await response.json(); 42 |  43 |       if (result.success) { 44 |         setPackages(result.data); 45 |       } else { 46 |         } 47 |     } catch (error) { 48 |       } finally { 49 |       setLoading(false); 50 |     } 51 |   }, [user?.access_token]); 52 |  53 |   useEffect(() => { 54 |     if (user?.access_token) { 55 |       fetchMyPackages(); 56 |     } 57 |   }, [user?.access_token, fetchMyPackages]); 58 |  59 |   const getStatusColor = (status: string) => { 60 |     switch (status.toLowerCase()) { 61 |       case 'active': 62 |         return 'bg-green-500/20 text-green-400 border-green-500/30'; 63 |       case 'expired': 64 |         return 'bg-red-500/20 text-red-400 border-red-500/30'; 65 |       case 'completed': 66 |         return 'bg-blue-500/20 text-blue-400 border-blue-500/30'; 67 |       default: 68 |         return 'bg-gray-500/20 text-gray-400 border-gray-500/30'; 69 |     } 70 |   }; 71 |  72 |   const getStatusIcon = (status: string) => { 73 |     switch (status.toLowerCase()) { 74 |       case 'active': 75 |         return <CheckCircle className="w-4 h-4" />; 76 |       case 'expired': 77 |         return <AlertCircle className="w-4 h-4" />; 78 |       case 'completed': 79 |         return <CheckCircle className="w-4 h-4" />; 80 |       default: 81 |         return <AlertCircle className="w-4 h-4" />; 82 |     } 83 |   }; 84 |  85 |   if (loading) { 86 |     return ( 87 |       <div className="flex items-center justify-center min-h-[400px]"> 88 |         <div className="text-center"> 89 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 90 |           <p className="text-[#FFD700] text-lg font-semibold">Loading your packages...</p> 91 |         </div> 92 |       </div> 93 |     ); 94 |   } 95 |  96 |   return ( 97 |     <div className="container mx-auto p-6 space-y-6"> 98 |       <div className="text-center"> 99 |         <h1 className="text-3xl font-bold text-white">My Packages</h1>100 |         <p className="text-gray-400 mt-2">View your purchased spiritual consultation packages</p>101 |       </div>102 | 103 |       {packages.length === 0 ? (104 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">105 |           <CardContent className="p-8 text-center">106 |             <div className="space-y-4">107 |               <PackageIcon className="w-16 h-16 text-gray-500 mx-auto" />108 |               <h3 className="text-xl font-semibold text-gray-300">No Packages Yet</h3>109 |               <p className="text-gray-400">110 |                 You haven&apos;t purchased any packages yet. Start your spiritual journey today!111 |               </p>112 |               <Link href="/account/packages">113 |                 <Button className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90">114 |                   <ShoppingCart className="w-4 h-4 mr-2" />115 |                   Browse Packages116 |                 </Button>117 |               </Link>118 |             </div>119 |           </CardContent>120 |         </Card>121 |       ) : (122 |         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">123 |           {packages.map((pkg) => (124 |             <Card key={pkg.id} className="bg-[#1a1a2e] border-[#16213e] text-white hover:border-[#ffd700]/50 transition-all">125 |               <CardHeader className="pb-3">126 |                 <div className="flex justify-between items-start">127 |                   <div className="flex items-center space-x-2">128 |                     <PackageIcon className="w-5 h-5 text-[#ffd700]" />129 |                     <CardTitle className="text-lg">{pkg.packageName}</CardTitle>130 |                   </div>131 |                   <Badge className={getStatusColor(pkg.status)}>132 |                     <div className="flex items-center space-x-1">133 |                       {getStatusIcon(pkg.status)}134 |                       <span>{pkg.status}</span>135 |                     </div>136 |                   </Badge>137 |                 </div>138 |               </CardHeader>139 |               <CardContent className="space-y-4">140 |                 <p className="text-gray-300 text-sm">{pkg.packageDescription}</p>141 | 142 |                 <div className="grid grid-cols-2 gap-4">143 |                   <div className="text-center">144 |                     <div className="text-2xl font-bold text-[#ffd700]">{pkg.sessionsRemaining}</div>145 |                     <div className="text-xs text-gray-400">Sessions Left</div>146 |                   </div>147 |                   <div className="text-center">148 |                     <div className="text-2xl font-bold text-white">{pkg.totalSessions}</div>149 |                     <div className="text-xs text-gray-400">Total Sessions</div>150 |                   </div>151 |                 </div>152 | 153 |                 <div className="space-y-2">154 |                   <div className="flex items-center space-x-2 text-sm text-gray-300">155 |                     <ClockIcon className="w-4 h-4" />156 |                     <span>{pkg.sessionDuration} minutes per session</span>157 |                   </div>158 |                   <div className="flex items-center space-x-2 text-sm text-gray-300">159 |                     <CalendarIcon className="w-4 h-4" />160 |                     <span>Expires: {new Date(pkg.expiresAt).toLocaleDateString()}</span>161 |                   </div>162 |                 </div>163 | 164 |                 <div className="pt-4 border-t border-[#2a2a4a]">165 |                   <div className="flex justify-between items-center mb-3">166 |                     <span className="text-sm text-gray-400">Purchase Date:</span>167 |                     <span className="text-sm text-white">{new Date(pkg.purchaseDate).toLocaleDateString()}</span>168 |                   </div>169 |                   <div className="flex justify-between items-center">170 |                     <span className="text-sm text-gray-400">Price:</span>171 |                     <span className="text-sm font-bold text-[#ffd700]">172 |                       ${typeof pkg.price === 'number' && !isNaN(pkg.price)173 |                         ? pkg.price.toFixed(2)174 |                         : <span className="text-red-400 text-xs" title={`Raw value: ${pkg.price}`}>175 |                             {pkg.price !== undefined && pkg.price !== null ? String(pkg.price) : 'Contact for price'}176 |                           </span>177 |                       }178 |                     </span>179 |                   </div>180 |                 </div>181 | 182 |                 {pkg.status === 'active' && pkg.sessionsRemaining > 0 && (183 |                   <Link href="/account/book">184 |                     <Button className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90">185 |                       <CalendarIcon className="w-4 h-4 mr-2" />186 |                       Book Session187 |                     </Button>188 |                   </Link>189 |                 )}190 |               </CardContent>191 |             </Card>192 |           ))}193 |         </div>194 |       )}195 | 196 |       {}197 |       {packages.length > 0 && (198 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">199 |           <CardHeader>200 |             <CardTitle>Package Statistics</CardTitle>201 |           </CardHeader>202 |           <CardContent>203 |             <div className="grid grid-cols-1 md:grid-cols-3 gap-6">204 |               <div className="text-center">205 |                 <div className="text-3xl font-bold text-[#ffd700]">206 |                   {packages.filter(p => p.status === 'active').length}207 |                 </div>208 |                 <div className="text-sm text-gray-400">Active Packages</div>209 |               </div>210 |               <div className="text-center">211 |                 <div className="text-3xl font-bold text-white">212 |                   {packages.reduce((sum, p) => sum + p.sessionsRemaining, 0)}213 |                 </div>214 |                 <div className="text-sm text-gray-400">Sessions Remaining</div>215 |               </div>216 |               <div className="text-center">217 |                 <div className="text-3xl font-bold text-green-400">218 |                   {packages.reduce((sum, p) => sum + (p.totalSessions - p.sessionsRemaining), 0)}219 |                 </div>220 |                 <div className="text-sm text-gray-400">Sessions Used</div>221 |               </div>222 |             </div>223 |           </CardContent>224 |         </Card>225 |       )}226 |     </div>227 |   );228 | }
==================================================END: frontend/app/(client)/account/my-packages/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/packages/page.tsxSIZE: 7.56 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { PackageIcon, CalendarIcon, ShoppingCart } from 'lucide-react';  7 |   8 | import { PackagePurchaseFlow } from '@/components/PackagePurchaseFlow';  9 |  10 | interface Package { 11 |   id: number; 12 |   name: string; 13 |   description: string; 14 |   price: number; 15 |   duration_minutes: number; 16 |   is_active: boolean; 17 |   features: string[]; 18 |   created_at: string; 19 |   updated_at: string; 20 |   packagePrices?: Array<{ 21 |     price: number; 22 |     currency: { 23 |       symbol: string; 24 |       code: string; 25 |     }; 26 |   }>; 27 |   sessionDuration?: { 28 |     duration_minutes: number; 29 |   }; 30 | } 31 |  32 | export default function PackagesPage() { 33 |   const [packages, setPackages] = useState<Package[]>([]); 34 |   const [loading, setLoading] = useState(true); 35 |   const [showPurchaseFlow, setShowPurchaseFlow] = useState(false); 36 |  37 |   useEffect(() => { 38 |     fetchPackages(); 39 |   }, []); 40 |  41 |   const fetchPackages = async () => { 42 |     try { 43 |       setLoading(true); 44 |       const response = await fetch('/api/client/packages'); 45 |       const result = await response.json(); 46 |  47 |       if (result.success) { 48 |         setPackages(result.data); 49 |       } else { 50 |         } 51 |     } catch (error) { 52 |       } finally { 53 |       setLoading(false); 54 |     } 55 |   }; 56 |  57 |   if (loading) { 58 |     return ( 59 |       <div className="flex items-center justify-center min-h-[400px]"> 60 |         <div className="text-center"> 61 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 62 |           <p className="text-[#FFD700] text-lg font-semibold">Loading available packages...</p> 63 |         </div> 64 |       </div> 65 |     ); 66 |   } 67 |  68 |   if (showPurchaseFlow) { 69 |     return ( 70 |       <div className="container mx-auto p-6"> 71 |         <div className="mb-6"> 72 |           <Button 73 |             variant="outline" 74 |             onClick={() => setShowPurchaseFlow(false)} 75 |             className="mb-4 border-[#2a2a4a] text-gray-400 hover:bg-[#2a2a4a] hover:text-white" 76 |           > 77 |             ← Back to Packages 78 |           </Button> 79 |         </div> 80 |         <PackagePurchaseFlow /> 81 |       </div> 82 |     ); 83 |   } 84 |  85 |   return ( 86 |     <div className="container mx-auto p-6 space-y-6"> 87 |       <div className="text-center"> 88 |         <h1 className="text-3xl font-bold text-white">Available Packages</h1> 89 |         <p className="text-gray-400 mt-2">Choose the perfect package for your spiritual journey</p> 90 |       </div> 91 |  92 |       <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> 93 |         {packages.map((pkg) => ( 94 |           <Card key={pkg.id} className="bg-[#1a1a2e] border-[#16213e] text-white hover:border-[#ffd700]/50 transition-all"> 95 |             <CardHeader className="pb-3"> 96 |               <div className="flex justify-between items-start"> 97 |                 <div className="flex items-center space-x-2"> 98 |                   <PackageIcon className="w-5 h-5 text-[#ffd700]" /> 99 |                   <CardTitle className="text-lg">{pkg.name}</CardTitle>100 |                 </div>101 |                 <div className="text-right">102 |                   <div className="text-2xl font-bold text-[#ffd700]">103 |                     {pkg.packagePrices && pkg.packagePrices.length > 0104 |                       ? <>105 |                           {pkg.packagePrices[0].currency.symbol}106 |                           {typeof pkg.packagePrices[0].price === 'number' && !isNaN(pkg.packagePrices[0].price)107 |                             ? pkg.packagePrices[0].price.toFixed(2)108 |                             : <span className="text-red-400 text-sm" title={`Raw value: ${pkg.packagePrices[0].price}`}>109 |                                 {pkg.packagePrices[0].price !== undefined && pkg.packagePrices[0].price !== null ? String(pkg.packagePrices[0].price) : 'Contact for price'}110 |                               </span>111 |                           }112 |                         </>113 |                       : 'Price TBD'114 |                     }115 |                   </div>116 |                   <div className="text-sm text-gray-400">117 |                     {pkg.packagePrices && pkg.packagePrices.length > 0118 |                       ? pkg.packagePrices[0].currency.code119 |                       : 'USD'120 |                     }121 |                   </div>122 |                 </div>123 |               </div>124 |             </CardHeader>125 |             <CardContent className="space-y-4">126 |               <p className="text-gray-300 text-sm">{pkg.description}</p>127 | 128 |               <div className="flex items-center space-x-2 text-sm text-gray-400">129 |                 <CalendarIcon className="w-4 h-4" />130 |                 <span>{pkg.sessionDuration?.duration_minutes || 'N/A'} minutes</span>131 |               </div>132 | 133 |               {pkg.features && pkg.features.length > 0 && (134 |                 <div className="space-y-2">135 |                   <h4 className="text-sm font-medium text-white">Features:</h4>136 |                   <ul className="space-y-1">137 |                     {pkg.features.map((feature, index) => (138 |                       <li key={index} className="text-sm text-gray-300">• {feature}</li>139 |                     ))}140 |                   </ul>141 |                 </div>142 |               )}143 | 144 |               <div className="pt-4">145 |                 <Button146 |                   className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90"147 |                   onClick={() => setShowPurchaseFlow(true)}148 |                 >149 |                   <ShoppingCart className="w-4 h-4 mr-2" />150 |                   Purchase Package151 |                 </Button>152 |               </div>153 |             </CardContent>154 |           </Card>155 |         ))}156 |       </div>157 | 158 |       {}159 |       <div className="mt-12">160 |         <Card className="bg-[#1a1a2e] border-[#16213e]">161 |           <CardHeader>162 |             <CardTitle className="text-white">About Our Packages</CardTitle>163 |           </CardHeader>164 |           <CardContent className="space-y-4">165 |             <div className="grid grid-cols-1 md:grid-cols-3 gap-6">166 |               <div className="text-center">167 |                 <div className="w-12 h-12 bg-[#ffd700]/20 rounded-full flex items-center justify-center mx-auto mb-3">168 |                   <PackageIcon className="w-6 h-6 text-[#ffd700]" />169 |                 </div>170 |                 <h3 className="text-white font-semibold mb-2">Flexible Sessions</h3>171 |                 <p className="text-gray-400 text-sm">172 |                   Choose from various session lengths and types to suit your needs173 |                 </p>174 |               </div>175 | 176 |               <div className="text-center">177 |                 <div className="w-12 h-12 bg-[#ffd700]/20 rounded-full flex items-center justify-center mx-auto mb-3">178 |                   <CalendarIcon className="w-6 h-6 text-[#ffd700]" />179 |                 </div>180 |                 <h3 className="text-white font-semibold mb-2">Easy Booking</h3>181 |                 <p className="text-gray-400 text-sm">182 |                   Book sessions at your convenience with our flexible scheduling system183 |                 </p>184 |               </div>185 | 186 |               <div className="text-center">187 |                 <div className="w-12 h-12 bg-[#ffd700]/20 rounded-full flex items-center justify-center mx-auto mb-3">188 |                   <ShoppingCart className="w-6 h-6 text-[#ffd700]" />189 |                 </div>190 |                 <h3 className="text-white font-semibold mb-2">Secure Payment</h3>191 |                 <p className="text-gray-400 text-sm">192 |                   Safe and secure payment processing with multiple payment options193 |                 </p>194 |               </div>195 |             </div>196 |           </CardContent>197 |         </Card>198 |       </div>199 |     </div>200 |   );201 | }
==================================================END: frontend/app/(client)/account/packages/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/page.tsxSIZE: 5.18 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { CalendarIcon, PackageIcon, ShoppingCart, Settings } from 'lucide-react';  7 |   8 | import Link from 'next/link';  9 | import { useAuth } from '@/hooks/useAuth'; 10 | import { BugReportButton } from '@/components/BugReportButton'; 11 | import { CustomerDashboard } from '@/components/CustomerDashboard'; 12 |  13 | export default function AccountPage() { 14 |   const { user, isAdmin, isLoading: authLoading } = useAuth(); 15 |   const [loading, setLoading] = useState(true); 16 |  17 |   useEffect(() => { 18 |     if (!authLoading) { 19 |       if (user?.access_token) { 20 |         setLoading(false); 21 |       } else { 22 |         setLoading(false); 23 |       } 24 |     } 25 |   }, [user, authLoading]); 26 |  27 |   if (authLoading || loading) { 28 |     return ( 29 |       <div className="flex items-center justify-center min-h-[400px]"> 30 |         <div className="text-center"> 31 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 32 |           <p className="text-[#FFD700] text-lg font-semibold">Loading your account...</p> 33 |         </div> 34 |       </div> 35 |     ); 36 |   } 37 |  38 |   if (!user) { 39 |     return ( 40 |       <div className="flex items-center justify-center min-h-[400px]"> 41 |         <div className="text-center"> 42 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 43 |           <p className="text-[#FFD700] text-lg font-semibold">Loading user data...</p> 44 |         </div> 45 |       </div> 46 |     ); 47 |   } 48 |  49 |   return ( 50 |     <div className="container mx-auto p-6 space-y-6"> 51 |       {} 52 |       <div className="flex items-center justify-between"> 53 |         <div className="text-center flex-1"> 54 |           <h1 className="text-3xl font-bold text-white">Welcome to Your Account</h1> 55 |           <p className="text-gray-400 mt-2">Manage your spiritual journey and sessions</p> 56 |         </div> 57 |  58 |         {} 59 |         {isAdmin && ( 60 |           <Link href="/admin"> 61 |             <Button className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90"> 62 |               <Settings className="w-4 h-4 mr-2" /> 63 |               Admin Dashboard 64 |             </Button> 65 |           </Link> 66 |         )} 67 |       </div> 68 |  69 |       {} 70 |       <CustomerDashboard /> 71 |  72 |       {} 73 |       <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> 74 |         <Card className="bg-[#1a1a2e] border-[#16213e] hover:border-[#ffd700]/50 transition-colors"> 75 |           <CardHeader> 76 |             <CardTitle className="text-white flex items-center"> 77 |               <PackageIcon className="w-5 h-5 text-[#ffd700] mr-2" /> 78 |               Buy Packages 79 |             </CardTitle> 80 |           </CardHeader> 81 |           <CardContent> 82 |             <p className="text-gray-400 mb-4"> 83 |               Explore our spiritual consultation packages and find the perfect one for your journey. 84 |             </p> 85 |             <Link href="/account/packages"> 86 |               <Button className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90"> 87 |                 <ShoppingCart className="w-4 h-4 mr-2" /> 88 |                 Browse Packages 89 |               </Button> 90 |             </Link> 91 |           </CardContent> 92 |         </Card> 93 |  94 |         <Card className="bg-[#1a1a2e] border-[#16213e] hover:border-[#ffd700]/50 transition-colors"> 95 |           <CardHeader> 96 |             <CardTitle className="text-white flex items-center"> 97 |               <CalendarIcon className="w-5 h-5 text-[#ffd700] mr-2" /> 98 |               Book Session 99 |             </CardTitle>100 |           </CardHeader>101 |           <CardContent>102 |             <p className="text-gray-400 mb-4">103 |               Schedule your next spiritual consultation using your purchased packages.104 |             </p>105 |             <Link href="/account/book">106 |               <Button className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90">107 |                 <CalendarIcon className="w-4 h-4 mr-2" />108 |                 Book Now109 |               </Button>110 |             </Link>111 |           </CardContent>112 |         </Card>113 | 114 |         <Card className="bg-[#1a1a2e] border-[#16213e] hover:border-[#ffd700]/50 transition-colors">115 |           <CardHeader>116 |             <CardTitle className="text-white flex items-center">117 |               <Settings className="w-5 h-5 text-[#ffd700] mr-2" />118 |               Account Settings119 |             </CardTitle>120 |           </CardHeader>121 |           <CardContent>122 |             <p className="text-gray-400 mb-4">123 |               Update your profile information and manage your account preferences.124 |             </p>125 |             <Link href="/account/profile">126 |               <Button className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90">127 |                 <Settings className="w-4 h-4 mr-2" />128 |                 Manage Profile129 |               </Button>130 |             </Link>131 |           </CardContent>132 |         </Card>133 |       </div>134 | 135 |       {}136 |       <div className="flex justify-center">137 |         <BugReportButton />138 |       </div>139 |     </div>140 |   );141 | }
==================================================END: frontend/app/(client)/account/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/profile/page.tsxSIZE: 10.89 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect, useCallback } from 'react';  4 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { Input } from '@/components/ui/input';  7 | import { Label } from '@/components/ui/label';  8 | import { Textarea } from '@/components/ui/textarea';  9 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; 10 | import { toast } from 'sonner'; 11 | import { useAuth } from '@/hooks/useAuth'; 12 |  13 | interface ClientProfile { 14 |   id: string; 15 |   email: string; 16 |   fullName: string | null; 17 |   phone: string | null; 18 |   birthDate: string | null; 19 |   birthTime: string | null; 20 |   birthPlace: string | null; 21 |   question: string | null; 22 |   language: string; 23 |   role: string; 24 |   status: string; 25 |   adminNotes: string | null; 26 |   scheduledDate: string | null; 27 |   scheduledTime: string | null; 28 |   sessionType: string | null; 29 |   notes: string | null; 30 |   createdAt: string; 31 |   updatedAt: string; 32 | } 33 |  34 | export default function ProfilePage() { 35 |   const { user } = useAuth(); 36 |   const [profile, setProfile] = useState<ClientProfile | null>(null); 37 |   const [isEditing, setIsEditing] = useState(false); 38 |   const [loading, setLoading] = useState(true); 39 |   const [saving, setSaving] = useState(false); 40 |   const [formData, setFormData] = useState({ 41 |     fullName: '', 42 |     phone: '', 43 |     birthDate: '', 44 |     birthTime: '', 45 |     birthPlace: '', 46 |     question: '', 47 |     language: 'en', 48 |     notes: '' 49 |   }); 50 |  51 |   const fetchProfile = useCallback(async () => { 52 |     if (!user?.access_token) return; 53 |  54 |     try { 55 |       setLoading(true); 56 |       const response = await fetch('/api/client/me', { 57 |         headers: { 58 |           'Authorization': `Bearer ${user.access_token}`, 59 |           'Content-Type': 'application/json' 60 |         } 61 |       }); 62 |  63 |       if (response.ok) { 64 |         const data = await response.json(); 65 |         if (data.success) { 66 |           setProfile(data.data); 67 |           setFormData({ 68 |             fullName: data.data.fullName || '', 69 |             phone: data.data.phone || '', 70 |             birthDate: data.data.birthDate || '', 71 |             birthTime: data.data.birthTime || '', 72 |             birthPlace: data.data.birthPlace || '', 73 |             question: data.data.question || '', 74 |             language: data.data.language || 'en', 75 |             notes: data.data.notes || '' 76 |           }); 77 |         } 78 |       } 79 |     } catch (error) { 80 |       toast.error('Failed to fetch profile'); 81 |     } finally { 82 |       setLoading(false); 83 |     } 84 |   }, [user?.access_token]); 85 |  86 |   useEffect(() => { 87 |     fetchProfile(); 88 |   }, [fetchProfile]); 89 |  90 |   const handleSave = async () => { 91 |     if (!profile || !user?.access_token) return; 92 |  93 |     setSaving(true); 94 |  95 |     try { 96 |       const response = await fetch('/api/client/me', { 97 |         method: 'PUT', 98 |         headers: { 99 |           'Authorization': `Bearer ${user.access_token}`,100 |           'Content-Type': 'application/json'101 |         },102 |         body: JSON.stringify({103 |           fullName: formData.fullName,104 |           phone: formData.phone,105 |           birthDate: formData.birthDate,106 |           birthTime: formData.birthTime,107 |           birthPlace: formData.birthPlace,108 |           question: formData.question,109 |           language: formData.language,110 |           notes: formData.notes111 |         })112 |       });113 | 114 |       if (response.ok) {115 |         const data = await response.json();116 |         if (data.success) {117 |           toast.success('Profile updated successfully');118 |           setIsEditing(false);119 |           fetchProfile();120 |         } else {121 |           throw new Error(data.error || 'Failed to update profile');122 |         }123 |       } else {124 |         throw new Error('Failed to update profile');125 |       }126 |     } catch (error) {127 |       toast.error('Failed to update profile');128 |     } finally {129 |       setSaving(false);130 |     }131 |   };132 | 133 |   const handleCancel = () => {134 |     if (profile) {135 |       setFormData({136 |         fullName: profile.fullName || '',137 |         phone: profile.phone || '',138 |         birthDate: profile.birthDate || '',139 |         birthTime: profile.birthTime || '',140 |         birthPlace: profile.birthPlace || '',141 |         question: profile.question || '',142 |         language: profile.language || 'en',143 |         notes: profile.notes || ''144 |       });145 |     }146 |     setIsEditing(false);147 |   };148 | 149 |   if (loading) {150 |     return (151 |       <div className="flex items-center justify-center min-h-[400px]">152 |         <div className="text-center">153 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>154 |           <p className="text-[#FFD700] text-lg font-semibold">Loading your profile...</p>155 |         </div>156 |       </div>157 |     );158 |   }159 | 160 |   if (!profile) {161 |     return (162 |       <div className="container mx-auto p-6">163 |         <div className="text-center">164 |           <p className="text-gray-400">Profile not found</p>165 |         </div>166 |       </div>167 |     );168 |   }169 | 170 |   return (171 |     <div className="container mx-auto p-6 space-y-6">172 |       <div className="flex justify-between items-center">173 |         <div>174 |           <h1 className="text-3xl font-bold text-white">Profile</h1>175 |           <p className="text-gray-400 mt-2">Manage your personal information</p>176 |         </div>177 |         {!isEditing ? (178 |           <Button onClick={() => setIsEditing(true)} className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90">179 |             Edit Profile180 |           </Button>181 |         ) : (182 |           <div className="flex space-x-2">183 |             <Button onClick={handleCancel} variant="outline" className="border-[#0a0a23] text-white hover:bg-[#0a0a23]">184 |               Cancel185 |             </Button>186 |             <Button onClick={handleSave} disabled={saving} className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90">187 |               {saving ? 'Saving...' : 'Save Changes'}188 |             </Button>189 |           </div>190 |         )}191 |       </div>192 | 193 |       <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">194 |         {}195 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">196 |           <CardHeader>197 |             <CardTitle>Basic Information</CardTitle>198 |             <CardDescription>Your personal details</CardDescription>199 |           </CardHeader>200 |           <CardContent className="space-y-4">201 |             <div>202 |               <Label htmlFor="email" className="text-gray-300">Email</Label>203 |               <Input204 |                 id="email"205 |                 value={profile.email}206 |                 disabled207 |                 className="bg-[#16213e] border-[#0a0a23] text-gray-400"208 |               />209 |             </div>210 | 211 |             <div>212 |               <Label htmlFor="fullName" className="text-gray-300">Full Name</Label>213 |               <Input214 |                 id="fullName"215 |                 value={formData.fullName}216 |                 onChange={(e) => setFormData({ ...formData, fullName: e.target.value })}217 |                 disabled={!isEditing}218 |                 className="bg-[#16213e] border-[#0a0a23] text-white"219 |               />220 |             </div>221 | 222 |             <div>223 |               <Label htmlFor="phone" className="text-gray-300">Phone</Label>224 |               <Input225 |                 id="phone"226 |                 value={formData.phone}227 |                 onChange={(e) => setFormData({ ...formData, phone: e.target.value })}228 |                 disabled={!isEditing}229 |                 className="bg-[#16213e] border-[#0a0a23] text-white"230 |               />231 |             </div>232 | 233 |             <div>234 |               <Label htmlFor="birthDate" className="text-gray-300">Date of Birth</Label>235 |               <Input236 |                 id="birthDate"237 |                 type="date"238 |                 value={formData.birthDate}239 |                 onChange={(e) => setFormData({ ...formData, birthDate: e.target.value })}240 |                 disabled={!isEditing}241 |                 className="bg-[#16213e] border-[#0a0a23] text-white"242 |               />243 |             </div>244 | 245 |             <div>246 |               <Label htmlFor="birthTime" className="text-gray-300">Time of Birth</Label>247 |               <Input248 |                 id="birthTime"249 |                 type="time"250 |                 value={formData.birthTime}251 |                 onChange={(e) => setFormData({ ...formData, birthTime: e.target.value })}252 |                 disabled={!isEditing}253 |                 className="bg-[#16213e] border-[#0a0a23] text-white"254 |               />255 |             </div>256 |           </CardContent>257 |         </Card>258 | 259 |         {}260 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">261 |           <CardHeader>262 |             <CardTitle>Additional Information</CardTitle>263 |             <CardDescription>Help us provide better service</CardDescription>264 |           </CardHeader>265 |           <CardContent className="space-y-4">266 |             <div>267 |               <Label htmlFor="birthPlace" className="text-gray-300">Place of Birth</Label>268 |               <Input269 |                 id="birthPlace"270 |                 value={formData.birthPlace}271 |                 onChange={(e) => setFormData({ ...formData, birthPlace: e.target.value })}272 |                 disabled={!isEditing}273 |                 className="bg-[#16213e] border-[#0a0a23] text-white"274 |                 placeholder="City, Country"275 |               />276 |             </div>277 | 278 |             <div>279 |               <Label htmlFor="language" className="text-gray-300">Preferred Language</Label>280 |               <Select281 |                 value={formData.language}282 |                 onValueChange={(value) => setFormData({ ...formData, language: value })}283 |                 disabled={!isEditing}284 |               >285 |                 <SelectTrigger className="bg-[#16213e] border-[#0a0a23] text-white">286 |                   <SelectValue />287 |                 </SelectTrigger>288 |                 <SelectContent className="bg-[#16213e] border-[#0a0a23] text-white">289 |                   <SelectItem value="en">English</SelectItem>290 |                   <SelectItem value="es">Español</SelectItem>291 |                 </SelectContent>292 |               </Select>293 |             </div>294 | 295 |             <div>296 |               <Label htmlFor="question" className="text-gray-300">Spiritual Question/Preferences</Label>297 |               <Textarea298 |                 id="question"299 |                 value={formData.question}300 |                 onChange={(e) => setFormData({ ...formData, question: e.target.value })}301 |                 disabled={!isEditing}302 |                 className="bg-[#16213e] border-[#0a0a23] text-white"303 |                 rows={3}304 |                 placeholder="Your spiritual questions or preferences..."305 |               />306 |             </div>307 | 308 |             <div>309 |               <Label htmlFor="notes" className="text-gray-300">Additional Notes</Label>310 |               <Textarea311 |                 id="notes"312 |                 value={formData.notes}313 |                 onChange={(e) => setFormData({ ...formData, notes: e.target.value })}314 |                 disabled={!isEditing}315 |                 className="bg-[#16213e] border-[#0a0a23] text-white"316 |                 rows={2}317 |                 placeholder="Any additional information you'd like to share..."318 |               />319 |             </div>320 |           </CardContent>321 |         </Card>322 |       </div>323 |     </div>324 |   );325 | }
==================================================END: frontend/app/(client)/account/profile/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/purchase/page.tsxSIZE: 32.98 KB==================================================
  1 | 'use client';  2 |   3 | import React, { useState, useEffect, useCallback } from 'react';  4 | import Image from 'next/image';  5 | import { motion, AnimatePresence } from 'framer-motion';  6 | import {  7 |   Package,  8 |   User,  9 |   CheckCircle, 10 |   CreditCard, 11 |   ShoppingCart, 12 |   ArrowRight, 13 |   ArrowLeft 14 | } from 'lucide-react'; 15 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'; 16 | import { BaseButton } from '@/components/ui/BaseButton'; 17 | import { Badge } from '@/components/ui/badge'; 18 | import { Input } from '@/components/ui/input'; 19 | import { Label } from '@/components/ui/label'; 20 | import { Textarea } from '@/components/ui/textarea'; 21 | import { toast } from 'sonner'; 22 | import { useAuth } from '@/hooks/useAuth'; 23 | import { StripeInlineForm } from '@/components/stripe/StripeInlineForm'; 24 | import { ChevronDown, Check } from 'lucide-react'; 25 |  26 | interface PackagePrice { 27 |   id: number; 28 |   price: number; 29 |   packageDefinition: { 30 |     id: number; 31 |     name: string; 32 |     description: string; 33 |     sessionsCount: number; 34 |     isActive: boolean; 35 |   }; 36 |   currency: { 37 |     id: number; 38 |     code: string; 39 |     symbol: string; 40 |     name: string; 41 |   }; 42 | } 43 |  44 | interface PaymentMethod { 45 |   id: number; 46 |   name: string; 47 |   type: string; 48 |   description: string; 49 |   icon: string; 50 |   requiresConfirmation: boolean; 51 |   autoAssignPackage: boolean; 52 |   isActive: boolean; 53 | } 54 |  55 | interface PurchaseStep { 56 |   id: string; 57 |   title: string; 58 |   description: string; 59 |   completed: boolean; 60 | } 61 |  62 | interface PurchaseFormData { 63 |   selectedPackage: PackagePrice | null; 64 |   selectedPaymentMethod: PaymentMethod | null; 65 |   quantity: number; 66 |   notes: string; 67 |  68 |   clientName: string; 69 |   clientEmail: string; 70 |   clientPhone: string; 71 |   birthDate: string; 72 |   birthTime: string; 73 |   birthPlace: string; 74 |   question: string; 75 |   language: string; 76 | } 77 |  78 | export default function PurchasePage() { 79 |   const { user } = useAuth(); 80 |   const [packages, setPackages] = useState<PackagePrice[]>([]); 81 |   const [paymentMethods, setPaymentMethods] = useState<PaymentMethod[]>([]); 82 |   const [loading, setLoading] = useState(true); 83 |   const [processing, setProcessing] = useState(false); 84 |   const [currentStep, setCurrentStep] = useState(0); 85 |   const [showPaymentMethodDropdown, setShowPaymentMethodDropdown] = useState(false); 86 |  87 |   const [formData, setFormData] = useState<PurchaseFormData>({ 88 |     selectedPackage: null, 89 |     selectedPaymentMethod: null, 90 |     quantity: 1, 91 |     notes: '', 92 |     clientName: '', 93 |     clientEmail: '', 94 |     clientPhone: '', 95 |     birthDate: '', 96 |     birthTime: '', 97 |     birthPlace: '', 98 |     question: '', 99 |     language: 'en'100 |   });101 | 102 |   const getSteps = (): PurchaseStep[] => [103 |     { id: 'package', title: 'Select Package', description: 'Choose your spiritual journey package', completed: !!formData.selectedPackage },104 |     { id: 'details', title: 'Review Details', description: 'Confirm your information and preferences', completed: !!formData.selectedPackage && !!formData.clientName && !!formData.clientEmail },105 |     { id: 'payment', title: 'Payment', description: 'Complete your purchase securely', completed: !!formData.selectedPackage && !!formData.selectedPaymentMethod }106 |   ];107 | 108 |   const loadUserProfile = useCallback(async () => {109 |     if (!user?.access_token) return;110 | 111 |     try {112 |       const response = await fetch('/api/client/me', {113 |         headers: {114 |           'Authorization': `Bearer ${user.access_token}`,115 |           'Content-Type': 'application/json'116 |         }117 |       });118 | 119 |       if (response.ok) {120 |         const data = await response.json();121 |         if (data.success) {122 |           const profile = data.data;123 | 124 |           setFormData(prev => ({125 |             ...prev,126 |             clientName: profile.fullName || '',127 |             clientEmail: profile.email || '',128 |             clientPhone: profile.phone || '',129 |             birthDate: profile.birthDate || '',130 |             birthTime: profile.birthTime || '',131 |             birthPlace: profile.birthPlace || '',132 |             question: profile.question || '',133 |             language: profile.language || 'en'134 |           }));135 |         }136 |       } else {137 |         }138 |     } catch (error) {139 |       }140 |   }, [user?.access_token]);141 | 142 |   const loadPackages = useCallback(async () => {143 |     if (!user?.access_token) return;144 | 145 |     try {146 |       const response = await fetch('/api/client/packages', {147 |         headers: {148 |           'Authorization': `Bearer ${user.access_token}`,149 |           'Content-Type': 'application/json'150 |         }151 |       });152 | 153 |       if (response.ok) {154 |         const data = await response.json();155 |         if (data.success) {156 |           setPackages(data.data || []);157 |         } else {158 |           }159 |       } else {160 |         }161 |     } catch (error) {162 |       }163 |   }, [user?.access_token]);164 | 165 |   const loadPaymentMethods = useCallback(async () => {166 |     if (!user?.access_token) return;167 | 168 |     try {169 |       const response = await fetch('/api/client/payment-methods', {170 |         headers: {171 |           'Authorization': `Bearer ${user.access_token}`,172 |           'Content-Type': 'application/json'173 |         }174 |       });175 | 176 |       if (response.ok) {177 |         const data = await response.json();178 |         if (data.success) {179 |           setPaymentMethods(data.data || []);180 | 181 |           const stripeMethod = data.data?.find((method: PaymentMethod) => method.type === 'stripe');182 |           if (stripeMethod) {183 |             setFormData(prev => ({ ...prev, selectedPaymentMethod: stripeMethod }));184 |           }185 |         } else {186 |           }187 |       } else {188 |         }189 |     } catch (error) {190 |       }191 |   }, [user?.access_token]);192 | 193 |   const loadData = useCallback(async () => {194 |     setLoading(true);195 |     try {196 |       await Promise.all([197 |         loadUserProfile(),198 |         loadPackages(),199 |         loadPaymentMethods()200 |       ]);201 |       } catch (error) {202 |       toast.error('Failed to load data. Please try again.');203 |     } finally {204 |       setLoading(false);205 |     }206 |   }, [loadUserProfile, loadPackages, loadPaymentMethods]);207 | 208 |   useEffect(() => {209 |     if (user?.access_token) {210 |       loadData();211 |     }212 |   }, [user?.access_token, loadData]);213 | 214 |   const handleInputChange = (field: keyof PurchaseFormData, value: string | number) => {215 |     setFormData(prev => ({ ...prev, [field]: value }));216 |   };217 | 218 |   const handlePackageSelect = (pkg: PackagePrice) => {219 |     setFormData(prev => ({ ...prev, selectedPackage: pkg }));220 |     setCurrentStep(1);221 |   };222 | 223 |   const handlePaymentMethodSelect = (method: PaymentMethod) => {224 |     setFormData(prev => ({ ...prev, selectedPaymentMethod: method }));225 |     setShowPaymentMethodDropdown(false);226 |   };227 | 228 |   const handleQuantityChange = (quantity: number) => {229 |     if (quantity >= 1 && quantity <= 10) {230 |       setFormData(prev => ({ ...prev, quantity }));231 |     }232 |   };233 | 234 |   const handleNext = () => {235 |     const steps = getSteps();236 |     if (currentStep < steps.length - 1) {237 |       setCurrentStep(prev => prev + 1);238 |     }239 |   };240 | 241 |   const handlePrevious = () => {242 |     if (currentStep > 0) {243 |       setCurrentStep(prev => prev - 1);244 |     }245 |   };246 | 247 |   const handlePurchase = async () => {248 |     if (!formData.selectedPackage || !formData.selectedPaymentMethod) {249 |       toast.error('Please select a package and payment method');250 |       return;251 |     }252 | 253 |     setProcessing(true);254 |     try {255 |       const response = await fetch('/api/client/purchase', {256 |         method: 'POST',257 |         headers: {258 |           'Authorization': `Bearer ${user?.access_token}`,259 |           'Content-Type': 'application/json'260 |         },261 |         body: JSON.stringify({262 |           packagePriceId: formData.selectedPackage.id,263 |           paymentMethodId: formData.selectedPaymentMethod.id,264 |           quantity: formData.quantity,265 |           notes: formData.notes266 |         })267 |       });268 | 269 |       const result = await response.json();270 | 271 |       if (result.success) {272 |         toast.success('Purchase completed successfully!');273 | 274 |         setTimeout(() => {275 |           window.location.href = '/account/my-packages';276 |         }, 2000);277 |       } else {278 |         toast.error(result.message || 'Purchase failed');279 |       }280 |     } catch (error) {281 |       toast.error('Purchase failed. Please try again.');282 |     } finally {283 |       setProcessing(false);284 |     }285 |   };286 | 287 |   const handleStripeSuccess = () => {288 |     toast.success('Payment successful!');289 |     handlePurchase();290 |   };291 | 292 |   const handleStripeError = (error: string) => {293 |     toast.error(`Payment failed: ${error}`);294 |   };295 | 296 |   if (loading) {297 |     return (298 |       <div className="min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e] flex items-center justify-center">299 |         <div className="text-center">300 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>301 |           <p className="text-[#FFD700] text-lg font-semibold">Loading packages...</p>302 |         </div>303 |       </div>304 |     );305 |   }306 | 307 |   return (308 |     <div className="min-h-screen bg-gradient-to-br from-[#0a0a23] via-[#1a1a2e] to-[#16213e]">309 |       <div className="container mx-auto py-8">310 |         <div className="text-center mb-8">311 |           <h1 className="text-4xl font-bold text-white mb-4">Purchase Packages</h1>312 |           <p className="text-gray-400 text-lg">Choose your spiritual journey package and complete your purchase</p>313 |         </div>314 | 315 |         {}316 |         <div className="mb-8">317 |           <div className="flex items-center justify-center space-x-4">318 |             {getSteps().map((step, index) => (319 |               <div key={step.id} className="flex items-center">320 |                 <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${321 |                   index <= currentStep322 |                     ? 'border-[#FFD700] bg-[#FFD700] text-black'323 |                     : 'border-gray-600 text-gray-400'324 |                 }`}>325 |                   {step.completed ? (326 |                     <CheckCircle className="w-5 h-5" />327 |                   ) : (328 |                     <span className="text-sm font-semibold">{index + 1}</span>329 |                   )}330 |                 </div>331 |                 <div className="ml-3 text-left">332 |                   <p className={`text-sm font-medium ${333 |                     index <= currentStep ? 'text-white' : 'text-gray-400'334 |                   }`}>335 |                     {step.title}336 |                   </p>337 |                   <p className="text-xs text-gray-500">{step.description}</p>338 |                 </div>339 |                 {index < getSteps().length - 1 && (340 |                   <ArrowRight className="w-4 h-4 text-gray-600 mx-4" />341 |                 )}342 |               </div>343 |             ))}344 |           </div>345 |         </div>346 | 347 |         <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">348 |           {}349 |           <div className="lg:col-span-2">350 |             <AnimatePresence mode="wait">351 |               <motion.div352 |                 key={currentStep}353 |                 initial={{ opacity: 0, x: 20 }}354 |                 animate={{ opacity: 1, x: 0 }}355 |                 exit={{ opacity: 0, x: -20 }}356 |                 transition={{ duration: 0.3 }}357 |               >358 |                 {}359 |                 {currentStep === 0 && (360 |                   <Card className="bg-[#1a1a2e] border-[#16213e]">361 |                     <CardHeader>362 |                       <CardTitle className="text-white flex items-center space-x-2">363 |                         <Package className="w-5 h-5 text-[#ffd700]" />364 |                         <span>Select Your Package</span>365 |                       </CardTitle>366 |                     </CardHeader>367 |                     <CardContent className="space-y-4">368 |                       {packages.length === 0 ? (369 |                         <div className="text-center py-8">370 |                           <Package className="w-16 h-16 text-gray-500 mx-auto mb-4" />371 |                           <p className="text-gray-400">No packages available at the moment</p>372 |                         </div>373 |                       ) : (374 |                         <div className="grid grid-cols-1 md:grid-cols-2 gap-4">375 |                           {packages.map((pkg) => (376 |                             <Card377 |                               key={pkg.id}378 |                               className={`cursor-pointer transition-all duration-200 ${379 |                                 formData.selectedPackage?.id === pkg.id380 |                                   ? 'border-[#ffd700] bg-[#ffd700]/10'381 |                                   : 'border-[#16213e] hover:border-[#ffd700]/50'382 |                               }`}383 |                               onClick={() => handlePackageSelect(pkg)}384 |                             >385 |                               <CardContent className="p-4">386 |                                 <div className="flex items-center justify-between mb-2">387 |                                   <h3 className="text-white font-semibold">{pkg.packageDefinition.name}</h3>388 |                                   <Badge className="bg-[#ffd700] text-black">389 |                                     {pkg.currency.symbol}{pkg.price}390 |                                   </Badge>391 |                                 </div>392 |                                 <p className="text-gray-400 text-sm mb-3">{pkg.packageDefinition.description}</p>393 |                                 <div className="flex items-center justify-between text-sm text-gray-300">394 |                                   <span>{pkg.packageDefinition.sessionsCount} sessions</span>395 |                                   <span>{pkg.currency.code.toUpperCase()}</span>396 |                                 </div>397 |                               </CardContent>398 |                             </Card>399 |                           ))}400 |                         </div>401 |                       )}402 |                     </CardContent>403 |                   </Card>404 |                 )}405 | 406 |                 {}407 |                 {currentStep === 1 && (408 |                   <Card className="bg-[#1a1a2e] border-[#16213e]">409 |                     <CardHeader>410 |                       <CardTitle className="text-white flex items-center space-x-2">411 |                         <User className="w-5 h-5 text-[#ffd700]" />412 |                         <span>Review Your Details</span>413 |                       </CardTitle>414 |                     </CardHeader>415 |                     <CardContent className="space-y-6">416 |                       {}417 |                       {formData.selectedPackage && (418 |                         <div className="bg-[#16213e] p-4 rounded-lg">419 |                           <h3 className="text-white font-semibold mb-2">Selected Package</h3>420 |                           <div className="flex items-center justify-between">421 |                             <div>422 |                               <p className="text-white">{formData.selectedPackage.packageDefinition.name}</p>423 |                               <p className="text-gray-400 text-sm">{formData.selectedPackage.packageDefinition.description}</p>424 |                             </div>425 |                             <div className="text-right">426 |                               <p className="text-[#ffd700] font-semibold">427 |                                 {formData.selectedPackage.currency.symbol}{formData.selectedPackage.price}428 |                               </p>429 |                               <p className="text-gray-400 text-sm">per package</p>430 |                             </div>431 |                           </div>432 |                         </div>433 |                       )}434 | 435 |                       {}436 |                       <div>437 |                         <Label className="text-gray-300">Quantity</Label>438 |                         <div className="flex items-center space-x-2 mt-1">439 |                           <BaseButton440 |                             onClick={() => handleQuantityChange(formData.quantity - 1)}441 |                             disabled={formData.quantity <= 1}442 |                             className="px-3 py-1"443 |                           >444 |                             -445 |                           </BaseButton>446 |                           <span className="text-white px-4">{formData.quantity}</span>447 |                           <BaseButton448 |                             onClick={() => handleQuantityChange(formData.quantity + 1)}449 |                             disabled={formData.quantity >= 10}450 |                             className="px-3 py-1"451 |                           >452 |                             +453 |                           </BaseButton>454 |                         </div>455 |                       </div>456 | 457 |                       {}458 |                       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">459 |                         <div>460 |                           <Label htmlFor="clientName" className="text-gray-300">Full Name</Label>461 |                           <Input462 |                             id="clientName"463 |                             value={formData.clientName}464 |                             onChange={(e) => handleInputChange('clientName', e.target.value)}465 |                             className="bg-[#16213e] border-[#0a0a23] text-white"466 |                             placeholder="Enter your full name"467 |                           />468 |                         </div>469 |                         <div>470 |                           <Label htmlFor="clientEmail" className="text-gray-300">Email</Label>471 |                           <Input472 |                             id="clientEmail"473 |                             type="email"474 |                             value={formData.clientEmail}475 |                             onChange={(e) => handleInputChange('clientEmail', e.target.value)}476 |                             className="bg-[#16213e] border-[#0a0a23] text-white"477 |                             placeholder="Enter your email"478 |                           />479 |                         </div>480 |                       </div>481 | 482 |                       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">483 |                         <div>484 |                           <Label htmlFor="clientPhone" className="text-gray-300">Phone</Label>485 |                           <Input486 |                             id="clientPhone"487 |                             value={formData.clientPhone}488 |                             onChange={(e) => handleInputChange('clientPhone', e.target.value)}489 |                             className="bg-[#16213e] border-[#0a0a23] text-white"490 |                             placeholder="Enter your phone number"491 |                           />492 |                         </div>493 |                         <div>494 |                           <Label htmlFor="birthDate" className="text-gray-300">Birth Date</Label>495 |                           <Input496 |                             id="birthDate"497 |                             type="date"498 |                             value={formData.birthDate}499 |                             onChange={(e) => handleInputChange('birthDate', e.target.value)}500 |                             className="bg-[#16213e] border-[#0a0a23] text-white"501 |                           />502 |                         </div>503 |                       </div>504 | 505 |                       <div className="grid grid-cols-1 md:grid-cols-2 gap-4">506 |                         <div>507 |                           <Label htmlFor="birthTime" className="text-gray-300">Birth Time</Label>508 |                           <Input509 |                             id="birthTime"510 |                             type="time"511 |                             value={formData.birthTime}512 |                             onChange={(e) => handleInputChange('birthTime', e.target.value)}513 |                             className="bg-[#16213e] border-[#0a0a23] text-white"514 |                           />515 |                         </div>516 |                         <div>517 |                           <Label htmlFor="birthPlace" className="text-gray-300">Birth Place</Label>518 |                           <Input519 |                             id="birthPlace"520 |                             value={formData.birthPlace}521 |                             onChange={(e) => handleInputChange('birthPlace', e.target.value)}522 |                             className="bg-[#16213e] border-[#0a0a23] text-white"523 |                             placeholder="Enter your birth place"524 |                           />525 |                         </div>526 |                       </div>527 | 528 |                       <div>529 |                         <Label htmlFor="question" className="text-gray-300">Spiritual Question</Label>530 |                         <Textarea531 |                           id="question"532 |                           value={formData.question}533 |                           onChange={(e) => handleInputChange('question', e.target.value)}534 |                           className="bg-[#16213e] border-[#0a0a23] text-white"535 |                           placeholder="What would you like to explore in your spiritual journey?"536 |                           rows={3}537 |                         />538 |                       </div>539 | 540 |                       <div>541 |                         <Label htmlFor="notes" className="text-gray-300">Additional Notes</Label>542 |                         <Textarea543 |                           id="notes"544 |                           value={formData.notes}545 |                           onChange={(e) => handleInputChange('notes', e.target.value)}546 |                           className="bg-[#16213e] border-[#0a0a23] text-white"547 |                           placeholder="Any special requests or additional information..."548 |                           rows={2}549 |                         />550 |                       </div>551 |                     </CardContent>552 |                   </Card>553 |                 )}554 | 555 |                 {}556 |                 {currentStep === 2 && (557 |                   <Card className="bg-[#1a1a2e] border-[#16213e]">558 |                     <CardHeader>559 |                       <CardTitle className="text-white flex items-center space-x-2">560 |                         <CreditCard className="w-5 h-5 text-[#ffd700]" />561 |                         <span>Complete Payment</span>562 |                       </CardTitle>563 |                     </CardHeader>564 |                     <CardContent className="space-y-6">565 |                       {}566 |                       <div>567 |                         <Label className="text-gray-300">Payment Method</Label>568 |                         <div className="relative mt-1">569 |                           <BaseButton570 |                             onClick={() => setShowPaymentMethodDropdown(!showPaymentMethodDropdown)}571 |                             className="w-full justify-between bg-[#16213e] border-[#0a0a23] text-white hover:bg-[#0a0a23]"572 |                           >573 |                             <div className="flex items-center space-x-2">574 |                               {formData.selectedPaymentMethod?.icon && (575 |                                 <Image576 |                                   src={formData.selectedPaymentMethod.icon}577 |                                   alt={formData.selectedPaymentMethod.name}578 |                                   width={20}579 |                                   height={20}580 |                                   className="w-5 h-5"581 |                                 />582 |                               )}583 |                               <span>{formData.selectedPaymentMethod?.name || 'Select payment method'}</span>584 |                             </div>585 |                             <ChevronDown className="w-4 h-4" />586 |                           </BaseButton>587 | 588 |                           {showPaymentMethodDropdown && (589 |                             <div className="absolute top-full left-0 right-0 mt-1 bg-[#16213e] border border-[#0a0a23] rounded-lg shadow-lg z-10">590 |                               {paymentMethods.map((method) => (591 |                                 <button592 |                                   key={method.id}593 |                                   onClick={() => handlePaymentMethodSelect(method)}594 |                                   className="w-full flex items-center space-x-2 px-4 py-2 text-left hover:bg-[#0a0a23] text-white"595 |                                 >596 |                                   {method.icon && (597 |                                     <Image src={method.icon} alt={method.name} width={20} height={20} className="w-5 h-5" />598 |                                   )}599 |                                   <div>600 |                                     <p className="font-medium">{method.name}</p>601 |                                     <p className="text-sm text-gray-400">{method.description}</p>602 |                                   </div>603 |                                   {formData.selectedPaymentMethod?.id === method.id && (604 |                                     <Check className="w-4 h-4 text-[#ffd700] ml-auto" />605 |                                   )}606 |                                 </button>607 |                               ))}608 |                             </div>609 |                           )}610 |                         </div>611 |                       </div>612 | 613 |                       {}614 |                       {formData.selectedPaymentMethod?.type === 'stripe' && formData.selectedPackage && (615 |                         <div className="bg-[#16213e] p-4 rounded-lg">616 |                           <h3 className="text-white font-semibold mb-4">Secure Payment</h3>617 |                           <StripeInlineForm618 |                             amount={formData.selectedPackage.price * formData.quantity * 100}619 |                             currency={formData.selectedPackage.currency.code}620 |                             description={`Purchase of ${formData.selectedPackage.packageDefinition.name} (${formData.quantity} ${formData.quantity === 1 ? 'unit' : 'units'})`}621 |                             customerEmail={formData.clientEmail}622 |                             onSuccess={handleStripeSuccess}623 |                             onError={handleStripeError}624 |                           />625 |                         </div>626 |                       )}627 | 628 |                       {}629 |                       {formData.selectedPaymentMethod?.type !== 'stripe' && (630 |                         <div className="bg-[#16213e] p-4 rounded-lg">631 |                           <h3 className="text-white font-semibold mb-4">Payment Information</h3>632 |                           <p className="text-gray-400 mb-4">633 |                             You have selected {formData.selectedPaymentMethod?.name}.634 |                             Please complete your payment using the selected method.635 |                           </p>636 |                           <BaseButton637 |                             onClick={handlePurchase}638 |                             disabled={processing}639 |                             className="w-full bg-[#ffd700] text-black hover:bg-[#ffd700]/90 disabled:opacity-50"640 |                           >641 |                             {processing ? 'Processing...' : 'Complete Purchase'}642 |                           </BaseButton>643 |                         </div>644 |                       )}645 |                     </CardContent>646 |                   </Card>647 |                 )}648 |               </motion.div>649 |             </AnimatePresence>650 | 651 |             {}652 |             <div className="flex justify-between mt-6">653 |               <BaseButton654 |                 onClick={handlePrevious}655 |                 disabled={currentStep === 0}656 |                 className="bg-[#16213e] border-[#0a0a23] text-white hover:bg-[#0a0a23] disabled:opacity-50"657 |               >658 |                 <ArrowLeft className="w-4 h-4 mr-2" />659 |                 Previous660 |               </BaseButton>661 | 662 |               {currentStep < getSteps().length - 1 ? (663 |                 <BaseButton664 |                   onClick={handleNext}665 |                   disabled={666 |                     (currentStep === 0 && !formData.selectedPackage) ||667 |                     (currentStep === 1 && (!formData.clientName || !formData.clientEmail))668 |                   }669 |                   className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90 disabled:opacity-50"670 |                 >671 |                   Next672 |                   <ArrowRight className="w-4 h-4 ml-2" />673 |                 </BaseButton>674 |               ) : (675 |                 <BaseButton676 |                   onClick={handlePurchase}677 |                   disabled={!formData.selectedPackage || !formData.selectedPaymentMethod || processing}678 |                   className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90 disabled:opacity-50"679 |                 >680 |                   {processing ? 'Processing...' : 'Complete Purchase'}681 |                 </BaseButton>682 |               )}683 |             </div>684 |           </div>685 | 686 |           {}687 |           <div className="space-y-6">688 |             <Card className="bg-[#1a1a2e] border-[#16213e]">689 |               <CardHeader>690 |                 <CardTitle className="text-white flex items-center space-x-2">691 |                   <ShoppingCart className="w-5 h-5 text-[#ffd700]" />692 |                   <span>Order Summary</span>693 |                 </CardTitle>694 |               </CardHeader>695 |               <CardContent className="space-y-4">696 |                 {formData.selectedPackage ? (697 |                   <>698 |                     <div className="flex items-center justify-between">699 |                       <span className="text-gray-300">Package</span>700 |                       <span className="text-white">{formData.selectedPackage.packageDefinition.name}</span>701 |                     </div>702 |                     <div className="flex items-center justify-between">703 |                       <span className="text-gray-300">Quantity</span>704 |                       <span className="text-white">{formData.quantity}</span>705 |                     </div>706 |                     <div className="flex items-center justify-between">707 |                       <span className="text-gray-300">Price per unit</span>708 |                       <span className="text-white">709 |                         {formData.selectedPackage.currency.symbol}{formData.selectedPackage.price}710 |                       </span>711 |                     </div>712 |                     <div className="border-t border-[#16213e] pt-4">713 |                       <div className="flex items-center justify-between">714 |                         <span className="text-white font-semibold">Total</span>715 |                         <span className="text-[#ffd700] font-bold text-lg">716 |                           {formData.selectedPackage.currency.symbol}717 |                           {typeof formData.selectedPackage.price === 'number' && !isNaN(formData.selectedPackage.price)718 |                             ? (formData.selectedPackage.price * formData.quantity).toFixed(2)719 |                             : <span className="text-red-400 text-sm" title={`Raw price: ${formData.selectedPackage.price}`}>720 |                                 {formData.selectedPackage.price !== undefined && formData.selectedPackage.price !== null ? String(formData.selectedPackage.price) : 'Contact for pricing'}721 |                               </span>722 |                           }723 |                         </span>724 |                       </div>725 |                     </div>726 |                   </>727 |                 ) : (728 |                   <p className="text-gray-400 text-center py-4">Select a package to see order details</p>729 |                 )}730 |               </CardContent>731 |             </Card>732 | 733 |             {}734 |             <Card className="bg-[#1a1a2e] border-[#16213e]">735 |               <CardHeader>736 |                 <CardTitle className="text-white flex items-center space-x-2">737 |                   <User className="w-5 h-5 text-[#ffd700]" />738 |                   <span>Your Information</span>739 |                 </CardTitle>740 |               </CardHeader>741 |               <CardContent className="space-y-2">742 |                 <div className="flex items-center justify-between">743 |                   <span className="text-gray-300">Name</span>744 |                   <span className="text-white text-sm">{formData.clientName || 'Not provided'}</span>745 |                 </div>746 |                 <div className="flex items-center justify-between">747 |                   <span className="text-gray-300">Email</span>748 |                   <span className="text-white text-sm">{formData.clientEmail || 'Not provided'}</span>749 |                 </div>750 |                 <div className="flex items-center justify-between">751 |                   <span className="text-gray-300">Phone</span>752 |                   <span className="text-white text-sm">{formData.clientPhone || 'Not provided'}</span>753 |                 </div>754 |                 <div className="flex items-center justify-between">755 |                   <span className="text-gray-300">Language</span>756 |                   <span className="text-white text-sm capitalize">{formData.language}</span>757 |                 </div>758 |               </CardContent>759 |             </Card>760 |           </div>761 |         </div>762 |       </div>763 |     </div>764 |   );765 | }
==================================================END: frontend/app/(client)/account/purchase/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/purchase-history/page.tsxSIZE: 13.17 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect, useCallback } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { Badge } from '@/components/ui/badge';  7 | import { Input } from '@/components/ui/input';  8 | import { Label } from '@/components/ui/label';  9 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select'; 10 | import { 11 |   ShoppingCart, 12 |   CreditCard, 13 |   PackageIcon, 14 |   Search, 15 |   Filter, 16 |   Download, 17 |   Eye 18 | } from 'lucide-react'; 19 | import { useAuth } from '@/hooks/useAuth'; 20 |  21 | interface PurchaseRecord { 22 |   id: string; 23 |   packageId: number; 24 |   packageName: string; 25 |   packageDescription: string; 26 |   quantity: number; 27 |   totalAmount: number; 28 |   paymentMethod: string; 29 |   paymentStatus: string; 30 |   purchaseDate: string; 31 |   currency: string; 32 |   transactionId?: string; 33 |   notes?: string; 34 | } 35 |  36 | export default function PurchaseHistoryPage() { 37 |   const { user } = useAuth(); 38 |   const [purchases, setPurchases] = useState<PurchaseRecord[]>([]); 39 |   const [loading, setLoading] = useState(true); 40 |   const [searchTerm, setSearchTerm] = useState(''); 41 |   const [statusFilter, setStatusFilter] = useState('all'); 42 |   const [dateFilter, setDateFilter] = useState('all'); 43 |  44 |   const fetchPurchaseHistory = useCallback(async () => { 45 |     try { 46 |       setLoading(true); 47 |       const response = await fetch('/api/client/purchase-history', { 48 |         headers: { 49 |           'Authorization': `Bearer ${user?.access_token}`, 50 |           'Content-Type': 'application/json' 51 |         } 52 |       }); 53 |  54 |       const result = await response.json(); 55 |  56 |       if (result.success) { 57 |         setPurchases(result.data); 58 |       } else { 59 |         } 60 |     } catch (error) { 61 |       } finally { 62 |       setLoading(false); 63 |     } 64 |   }, [user?.access_token]); 65 |  66 |   useEffect(() => { 67 |     if (user?.access_token) { 68 |       fetchPurchaseHistory(); 69 |     } 70 |   }, [user?.access_token, fetchPurchaseHistory]); 71 |  72 |   const getStatusColor = (status: string) => { 73 |     switch (status.toLowerCase()) { 74 |       case 'completed': 75 |       case 'success': 76 |         return 'bg-green-500/20 text-green-400 border-green-500/30'; 77 |       case 'pending': 78 |         return 'bg-yellow-500/20 text-yellow-400 border-yellow-500/30'; 79 |       case 'failed': 80 |       case 'cancelled': 81 |         return 'bg-red-500/20 text-red-400 border-red-500/30'; 82 |       default: 83 |         return 'bg-gray-500/20 text-gray-400 border-gray-500/30'; 84 |     } 85 |   }; 86 |  87 |   const filteredPurchases = purchases.filter(purchase => { 88 |     const matchesSearch = purchase.packageName.toLowerCase().includes(searchTerm.toLowerCase()) || 89 |                          purchase.transactionId?.toLowerCase().includes(searchTerm.toLowerCase()); 90 |     const matchesStatus = statusFilter === 'all' || purchase.paymentStatus.toLowerCase() === statusFilter.toLowerCase(); 91 |  92 |     let matchesDate = true; 93 |     if (dateFilter !== 'all') { 94 |       const purchaseDate = new Date(purchase.purchaseDate); 95 |       const now = new Date(); 96 |       const daysDiff = Math.floor((now.getTime() - purchaseDate.getTime()) / (1000 * 60 * 60 * 24)); 97 |  98 |       switch (dateFilter) { 99 |         case '7days':100 |           matchesDate = daysDiff <= 7;101 |           break;102 |         case '30days':103 |           matchesDate = daysDiff <= 30;104 |           break;105 |         case '90days':106 |           matchesDate = daysDiff <= 90;107 |           break;108 |         case '1year':109 |           matchesDate = daysDiff <= 365;110 |           break;111 |       }112 |     }113 | 114 |     return matchesSearch && matchesStatus && matchesDate;115 |   });116 | 117 |   const totalSpent = purchases.reduce((sum, purchase) => sum + purchase.totalAmount, 0);118 |   const totalPurchases = purchases.length;119 |   const completedPurchases = purchases.filter(p => p.paymentStatus.toLowerCase() === 'completed').length;120 | 121 |   if (loading) {122 |     return (123 |       <div className="flex items-center justify-center min-h-[400px]">124 |         <div className="text-center">125 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>126 |           <p className="text-[#FFD700] text-lg font-semibold">Loading purchase history...</p>127 |         </div>128 |       </div>129 |     );130 |   }131 | 132 |   return (133 |     <div className="container mx-auto p-6 space-y-6">134 |       <div className="text-center">135 |         <h1 className="text-3xl font-bold text-white">Purchase History</h1>136 |         <p className="text-gray-400 mt-2">View your complete purchase history and transaction details</p>137 |       </div>138 | 139 |       {}140 |       <div className="grid grid-cols-1 md:grid-cols-3 gap-6">141 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">142 |           <CardContent className="p-6">143 |             <div className="flex items-center space-x-4">144 |               <div className="p-3 bg-[#ffd700]/20 rounded-full">145 |                 <ShoppingCart className="w-6 h-6 text-[#ffd700]" />146 |               </div>147 |               <div>148 |                 <div className="text-2xl font-bold text-white">{totalPurchases}</div>149 |                 <div className="text-sm text-gray-400">Total Purchases</div>150 |               </div>151 |             </div>152 |           </CardContent>153 |         </Card>154 | 155 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">156 |           <CardContent className="p-6">157 |             <div className="flex items-center space-x-4">158 |               <div className="p-3 bg-green-500/20 rounded-full">159 |                 <CreditCard className="w-6 h-6 text-green-400" />160 |               </div>161 |               <div>162 |                 <div className="text-2xl font-bold text-white">${totalSpent.toFixed(2)}</div>163 |                 <div className="text-sm text-gray-400">Total Spent</div>164 |               </div>165 |             </div>166 |           </CardContent>167 |         </Card>168 | 169 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">170 |           <CardContent className="p-6">171 |             <div className="flex items-center space-x-4">172 |               <div className="p-3 bg-blue-500/20 rounded-full">173 |                 <PackageIcon className="w-6 h-6 text-blue-400" />174 |               </div>175 |               <div>176 |                 <div className="text-2xl font-bold text-white">{completedPurchases}</div>177 |                 <div className="text-sm text-gray-400">Completed Orders</div>178 |               </div>179 |             </div>180 |           </CardContent>181 |         </Card>182 |       </div>183 | 184 |       {}185 |       <Card className="bg-[#1a1a2e] border-[#16213e] text-white">186 |         <CardHeader>187 |           <CardTitle className="flex items-center space-x-2">188 |             <Filter className="w-5 h-5" />189 |             <span>Filters</span>190 |           </CardTitle>191 |         </CardHeader>192 |         <CardContent>193 |           <div className="grid grid-cols-1 md:grid-cols-3 gap-4">194 |             <div>195 |               <Label htmlFor="search" className="text-gray-300">Search</Label>196 |               <div className="relative">197 |                 <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />198 |                 <Input199 |                   id="search"200 |                   placeholder="Search packages or transaction ID..."201 |                   value={searchTerm}202 |                   onChange={(e) => setSearchTerm(e.target.value)}203 |                   className="pl-10 bg-[#16213e] border-[#0a0a23] text-white"204 |                 />205 |               </div>206 |             </div>207 | 208 |             <div>209 |               <Label htmlFor="status" className="text-gray-300">Payment Status</Label>210 |               <Select value={statusFilter} onValueChange={setStatusFilter}>211 |                 <SelectTrigger className="bg-[#16213e] border-[#0a0a23] text-white">212 |                   <SelectValue />213 |                 </SelectTrigger>214 |                 <SelectContent className="bg-[#16213e] border-[#0a0a23] text-white">215 |                   <SelectItem value="all">All Statuses</SelectItem>216 |                   <SelectItem value="completed">Completed</SelectItem>217 |                   <SelectItem value="pending">Pending</SelectItem>218 |                   <SelectItem value="failed">Failed</SelectItem>219 |                 </SelectContent>220 |               </Select>221 |             </div>222 | 223 |             <div>224 |               <Label htmlFor="date" className="text-gray-300">Date Range</Label>225 |               <Select value={dateFilter} onValueChange={setDateFilter}>226 |                 <SelectTrigger className="bg-[#16213e] border-[#0a0a23] text-white">227 |                   <SelectValue />228 |                 </SelectTrigger>229 |                 <SelectContent className="bg-[#16213e] border-[#0a0a23] text-white">230 |                   <SelectItem value="all">All Time</SelectItem>231 |                   <SelectItem value="7days">Last 7 Days</SelectItem>232 |                   <SelectItem value="30days">Last 30 Days</SelectItem>233 |                   <SelectItem value="90days">Last 90 Days</SelectItem>234 |                   <SelectItem value="1year">Last Year</SelectItem>235 |                 </SelectContent>236 |               </Select>237 |             </div>238 |           </div>239 |         </CardContent>240 |       </Card>241 | 242 |       {}243 |       {filteredPurchases.length === 0 ? (244 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white">245 |           <CardContent className="p-8 text-center">246 |             <div className="space-y-4">247 |               <ShoppingCart className="w-16 h-16 text-gray-500 mx-auto" />248 |               <h3 className="text-xl font-semibold text-gray-300">No Purchases Found</h3>249 |               <p className="text-gray-400">250 |                 {purchases.length === 0251 |                   ? "You haven't made any purchases yet. Start your spiritual journey today!"252 |                   : "No purchases match your current filters. Try adjusting your search criteria."253 |                 }254 |               </p>255 |               {purchases.length === 0 && (256 |                 <Button className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90">257 |                   <PackageIcon className="w-4 h-4 mr-2" />258 |                   Browse Packages259 |                 </Button>260 |               )}261 |             </div>262 |           </CardContent>263 |         </Card>264 |       ) : (265 |         <div className="space-y-4">266 |           {filteredPurchases.map((purchase) => (267 |             <Card key={purchase.id} className="bg-[#1a1a2e] border-[#16213e] text-white hover:border-[#ffd700]/50 transition-all">268 |               <CardHeader className="pb-3">269 |                 <div className="flex justify-between items-start">270 |                   <div className="flex items-center space-x-2">271 |                     <PackageIcon className="w-5 h-5 text-[#ffd700]" />272 |                     <CardTitle className="text-lg">{purchase.packageName}</CardTitle>273 |                   </div>274 |                   <Badge className={getStatusColor(purchase.paymentStatus)}>275 |                     {purchase.paymentStatus}276 |                   </Badge>277 |                 </div>278 |               </CardHeader>279 |               <CardContent className="space-y-4">280 |                 <p className="text-gray-300 text-sm">{purchase.packageDescription}</p>281 | 282 |                 <div className="grid grid-cols-1 md:grid-cols-4 gap-4">283 |                   <div>284 |                     <div className="text-sm text-gray-400">Purchase Date</div>285 |                     <div className="text-white font-medium">286 |                       {new Date(purchase.purchaseDate).toLocaleDateString()}287 |                     </div>288 |                   </div>289 |                   <div>290 |                     <div className="text-sm text-gray-400">Quantity</div>291 |                     <div className="text-white font-medium">{purchase.quantity}</div>292 |                   </div>293 |                   <div>294 |                     <div className="text-sm text-gray-400">Total Amount</div>295 |                     <div className="text-[#ffd700] font-bold">296 |                       {purchase.currency} {purchase.totalAmount.toFixed(2)}297 |                     </div>298 |                   </div>299 |                   <div>300 |                     <div className="text-sm text-gray-400">Payment Method</div>301 |                     <div className="text-white font-medium">{purchase.paymentMethod}</div>302 |                   </div>303 |                 </div>304 | 305 |                 {purchase.transactionId && (306 |                   <div className="bg-[#16213e] p-3 rounded-lg">307 |                     <div className="text-sm text-gray-400">Transaction ID</div>308 |                     <div className="text-white font-mono text-sm">{purchase.transactionId}</div>309 |                   </div>310 |                 )}311 | 312 |                 {purchase.notes && (313 |                   <div className="bg-[#16213e] p-3 rounded-lg">314 |                     <div className="text-sm text-gray-400">Notes</div>315 |                     <div className="text-white text-sm">{purchase.notes}</div>316 |                   </div>317 |                 )}318 | 319 |                 <div className="flex justify-end space-x-2">320 |                   <Button variant="outline" size="sm" className="border-[#2a2a4a] text-gray-400 hover:bg-[#2a2a4a] hover:text-white">321 |                     <Eye className="w-4 h-4 mr-2" />322 |                     View Details323 |                   </Button>324 |                   <Button variant="outline" size="sm" className="border-[#2a2a4a] text-gray-400 hover:bg-[#2a2a4a] hover:text-white">325 |                     <Download className="w-4 h-4 mr-2" />326 |                     Download Receipt327 |                   </Button>328 |                 </div>329 |               </CardContent>330 |             </Card>331 |           ))}332 |         </div>333 |       )}334 |     </div>335 |   );336 | }
==================================================END: frontend/app/(client)/account/purchase-history/page.tsx==================================================


==================================================FILE: frontend/app/(client)/account/sessions/page.tsxSIZE: 5.36 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect } from 'react';  4 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Button } from '@/components/ui/button';  6 | import { Badge } from '@/components/ui/badge';  7 | import { CalendarIcon, ClockIcon, PackageIcon, ShoppingCart } from 'lucide-react';  8 |   9 | import SessionReportButton from './SessionReportButton'; 10 |  11 | interface Session { 12 |   id: number; 13 |   date: string; 14 |   start_time: string; 15 |   end_time: string; 16 |   status: string; 17 |   notes: string | null; 18 |   package: { 19 |     name: string; 20 |     duration_minutes: number; 21 |   }; 22 |   created_at: string; 23 | } 24 |  25 | export default function SessionsPage() { 26 |   const [sessions, setSessions] = useState<Session[]>([]); 27 |   const [loading, setLoading] = useState(true); 28 |  29 |   useEffect(() => { 30 |     fetchSessions(); 31 |   }, []); 32 |  33 |   const fetchSessions = async () => { 34 |     try { 35 |       setLoading(true); 36 |       const response = await fetch('/api/client/my-bookings'); 37 |       const result = await response.json(); 38 |  39 |       if (result.success) { 40 |         setSessions(result.data); 41 |       } else { 42 |         } 43 |     } catch (error) { 44 |       } finally { 45 |       setLoading(false); 46 |     } 47 |   }; 48 |  49 |   const getStatusColor = (status: string) => { 50 |     switch (status.toLowerCase()) { 51 |       case 'completed': 52 |         return 'bg-green-500/20 text-green-400 border-green-500/30'; 53 |       case 'upcoming': 54 |         return 'bg-blue-500/20 text-blue-400 border-blue-500/30'; 55 |       case 'cancelled': 56 |         return 'bg-red-500/20 text-red-400 border-red-500/30'; 57 |       default: 58 |         return 'bg-gray-500/20 text-gray-400 border-gray-500/30'; 59 |     } 60 |   }; 61 |  62 |   if (loading) { 63 |     return ( 64 |       <div className="flex items-center justify-center min-h-[400px]"> 65 |         <div className="text-center"> 66 |           <div className="w-16 h-16 border-4 border-[#FFD700] border-t-transparent rounded-full animate-spin mx-auto mb-4"></div> 67 |           <p className="text-[#FFD700] text-lg font-semibold">Loading your sessions...</p> 68 |         </div> 69 |       </div> 70 |     ); 71 |   } 72 |  73 |   return ( 74 |     <div className="container mx-auto p-6 space-y-6"> 75 |       <div className="text-center"> 76 |         <h1 className="text-3xl font-bold text-white">Your Sessions</h1> 77 |         <p className="text-gray-400 mt-2">View your spiritual consultation history</p> 78 |       </div> 79 |  80 |       {sessions.length === 0 ? ( 81 |         <Card className="bg-[#1a1a2e] border-[#16213e] text-white"> 82 |           <CardContent className="p-8 text-center"> 83 |             <div className="space-y-4"> 84 |               <CalendarIcon className="w-16 h-16 text-gray-500 mx-auto" /> 85 |               <h3 className="text-xl font-semibold text-gray-300">No Sessions Yet</h3> 86 |               <p className="text-gray-400"> 87 |                 You haven&apos;t booked any sessions yet. Start your spiritual journey today! 88 |               </p> 89 |               <Button className="bg-[#ffd700] text-black hover:bg-[#ffd700]/90"> 90 |                 <ShoppingCart className="w-4 h-4 mr-2" /> 91 |                 Book Your First Session 92 |               </Button> 93 |             </div> 94 |           </CardContent> 95 |         </Card> 96 |       ) : ( 97 |         <div className="space-y-4"> 98 |           {sessions.map((session) => ( 99 |             <Card key={session.id} className="bg-[#1a1a2e] border-[#16213e] text-white">100 |               <CardHeader className="pb-3">101 |                 <div className="flex justify-between items-start">102 |                   <div className="flex items-center space-x-2">103 |                     <PackageIcon className="w-5 h-5 text-[#ffd700]" />104 |                     <CardTitle className="text-lg">{session.package.name}</CardTitle>105 |                   </div>106 |                   <Badge className={getStatusColor(session.status)}>107 |                     {session.status}108 |                   </Badge>109 |                 </div>110 |               </CardHeader>111 |               <CardContent className="space-y-4">112 |                 <div className="grid grid-cols-1 md:grid-cols-3 gap-4">113 |                   <div className="flex items-center space-x-2 text-sm text-gray-300">114 |                     <CalendarIcon className="w-4 h-4" />115 |                     <span>{new Date(session.date).toLocaleDateString()}</span>116 |                   </div>117 |                   <div className="flex items-center space-x-2 text-sm text-gray-300">118 |                     <ClockIcon className="w-4 h-4" />119 |                     <span>{session.start_time} - {session.end_time}</span>120 |                   </div>121 |                   <div className="text-sm text-gray-300">122 |                     Duration: {session.package.duration_minutes} minutes123 |                   </div>124 |                 </div>125 | 126 |                 {session.notes && (127 |                   <div className="bg-[#16213e] p-3 rounded-lg">128 |                     <p className="text-sm text-gray-300">129 |                       <span className="font-medium">Notes:</span> {session.notes}130 |                     </p>131 |                   </div>132 |                 )}133 | 134 |                 <div className="flex justify-between items-center">135 |                   <div className="text-xs text-gray-500">136 |                     Booked on: {new Date(session.created_at).toLocaleDateString()}137 |                   </div>138 | 139 |                   {session.status === 'completed' && (140 |                     <SessionReportButton bookingId={session.id} />141 |                   )}142 |                 </div>143 |               </CardContent>144 |             </Card>145 |           ))}146 |         </div>147 |       )}148 |     </div>149 |   );150 | }
==================================================END: frontend/app/(client)/account/sessions/page.tsx==================================================


==================================================FILE: frontend/app/api/analytics/performance/route.tsSIZE: 5.50 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET(request: NextRequest) {  5 |   try {  6 |     const { searchParams } = new URL(request.url);  7 |     const modelVersion = searchParams.get('model_version');  8 |     const dateRange = searchParams.get('date_range') || '30';  9 |  10 |     const startDate = new Date(); 11 |     startDate.setDate(startDate.getDate() - parseInt(dateRange)); 12 |  13 |     const modelPerformance = await prisma.mlModelPerformance.findMany({ 14 |       where: modelVersion ? { modelVersion } : undefined, 15 |       orderBy: { createdAt: 'desc' } 16 |     }); 17 |  18 |     const conversationStats = await prisma.conversationLog.groupBy({ 19 |       by: ['rasaIntent', 'responseGenerator'], 20 |       where: { 21 |         timestamp: { gte: startDate }, 22 |         ...(modelVersion ? { modelVersion } : {}) 23 |       }, 24 |       _count: { id: true }, 25 |       _avg: { rasaConfidence: true } 26 |     }); 27 |  28 |     const bookingStats = await prisma.conversationLog.groupBy({ 29 |       by: ['bookingStep'], 30 |       where: { 31 |         timestamp: { gte: startDate }, 32 |         ...(modelVersion ? { modelVersion } : {}) 33 |       }, 34 |       _count: { id: true } 35 |     }); 36 |  37 |     const feedbackStats = await prisma.userFeedback.groupBy({ 38 |       by: ['rating'], 39 |       where: { 40 |         createdAt: { gte: startDate } 41 |       }, 42 |       _count: { id: true } 43 |     }); 44 |  45 |     const abTestResults = await prisma.abTestExperiment.findMany({ 46 |       where: { 47 |         status: { in: ['active', 'completed'] }, 48 |         startDate: { gte: startDate } 49 |       }, 50 |       include: { 51 |         assignments: true 52 |       } 53 |     }); 54 |  55 |     const totalConversations = conversationStats.reduce((sum, stat) => sum + stat._count.id, 0); 56 |     const avgConfidence = conversationStats.reduce((sum, stat) => 57 |       sum + (Number(stat._avg.rasaConfidence) || 0) * stat._count.id, 0) / totalConversations; 58 |  59 |     const positiveFeedback = feedbackStats.find(f => f.rating === 2)?._count.id || 0; 60 |     const negativeFeedback = feedbackStats.find(f => f.rating === 1)?._count.id || 0; 61 |     const totalFeedback = positiveFeedback + negativeFeedback; 62 |     const satisfactionRate = totalFeedback > 0 ? positiveFeedback / totalFeedback : 0; 63 |  64 |     const bookingCompletions = bookingStats.find(b => b.bookingStep === 'booking_complete')?._count.id || 0; 65 |     const bookingAttempts = bookingStats.find(b => b.bookingStep === 'selecting_package')?._count.id || 0; 66 |     const bookingSuccessRate = bookingAttempts > 0 ? bookingCompletions / bookingAttempts : 0; 67 |  68 |     const responseGeneratorStats = conversationStats.reduce((acc, stat) => { 69 |       const generator = stat.responseGenerator || 'unknown'; 70 |       acc[generator] = (acc[generator] || 0) + stat._count.id; 71 |       return acc; 72 |     }, {} as Record<string, number>); 73 |  74 |     const intentStats = conversationStats.reduce((acc, stat) => { 75 |       const intent = stat.rasaIntent || 'unknown'; 76 |       acc[intent] = (acc[intent] || 0) + stat._count.id; 77 |       return acc; 78 |     }, {} as Record<string, number>); 79 |  80 |     const analytics = { 81 |       summary: { 82 |         totalConversations, 83 |         avgConfidence: avgConfidence || 0, 84 |         satisfactionRate, 85 |         bookingSuccessRate, 86 |         dateRange: `${dateRange} days`, 87 |         modelVersion: modelVersion || 'all' 88 |       }, 89 |       modelPerformance: modelPerformance.map(model => ({ 90 |         modelVersion: model.modelVersion, 91 |         accuracy: (model.evaluationResults as Record<string, unknown>)?.accuracy as number || 0, 92 |         bookingSuccessRate: model.bookingSuccessRate || 0, 93 |         avgConversationTurns: model.avgConversationTurns || 0, 94 |         isActiveProduction: model.isActiveProduction, 95 |         isActiveAbTest: model.isActiveAbTest, 96 |         deploymentDate: model.deploymentDate, 97 |         createdAt: model.createdAt 98 |       })), 99 |       conversationMetrics: {100 |         responseGeneratorDistribution: responseGeneratorStats,101 |         intentDistribution: intentStats,102 |         bookingStepDistribution: bookingStats.reduce((acc, stat) => {103 |           acc[stat.bookingStep || 'unknown'] = stat._count.id;104 |           return acc;105 |         }, {} as Record<string, number>)106 |       },107 |       feedbackMetrics: {108 |         totalFeedback,109 |         positiveFeedback,110 |         negativeFeedback,111 |         satisfactionRate,112 |         feedbackByRating: feedbackStats.reduce((acc, stat) => {113 |           acc[stat.rating] = stat._count.id;114 |           return acc;115 |         }, {} as Record<number, number>)116 |       },117 |       abTestResults: abTestResults.map(experiment => ({118 |         id: experiment.id,119 |         experimentName: experiment.experimentName,120 |         modelAVersion: experiment.modelAVersion,121 |         modelBVersion: experiment.modelBVersion,122 |         trafficSplit: experiment.trafficSplit,123 |         status: experiment.status,124 |         startDate: experiment.startDate,125 |         endDate: experiment.endDate,126 |         totalAssignments: experiment.assignments.length,127 |         winningModelVersion: experiment.winningModelVersion,128 |         finalResults: experiment.finalResults129 |       }))130 |     };131 | 132 |     return NextResponse.json({133 |       success: true,134 |       data: analytics135 |     });136 | 137 |   } catch (error) {138 |     return NextResponse.json(139 |       {140 |         success: false,141 |         error: 'Failed to fetch analytics data',142 |         details: error instanceof Error ? error.message : 'Unknown error'143 |       },144 |       { status: 500 }145 |     );146 |   } finally {147 |     await prisma.$disconnect();148 |   }149 | }
==================================================END: frontend/app/api/analytics/performance/route.ts==================================================


==================================================FILE: frontend/app/api/auth/login/route.tsSIZE: 5.65 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import * as bcrypt from 'bcryptjs';  3 | import * as jwt from 'jsonwebtoken';  4 | import { prisma } from '@/lib/prisma';  5 |   6 | const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';  7 |   8 | export async function POST(request: NextRequest) {  9 |   try { 10 |  11 |     try { 12 |       await prisma.$connect(); 13 |       } catch (dbError) { 14 |       return NextResponse.json({ 15 |         success: false, 16 |         error: 'Database connection failed', 17 |         message: 'Unable to connect to database', 18 |         details: dbError instanceof Error ? dbError.message : 'Unknown database error' 19 |       }, { status: 500 }); 20 |     } 21 |  22 |     const { email, password } = await request.json(); 23 |     if (!email || !password) { 24 |       return NextResponse.json({ 25 |         success: false, 26 |         error: 'Missing credentials', 27 |         message: 'Email and password are required' 28 |       }, { status: 400 }); 29 |     } 30 |  31 |     ); 32 |     let user; 33 |     try { 34 |  35 |       await prisma.$connect(); 36 |  37 |       user = await prisma.user.findUnique({ 38 |         where: { email: email.toLowerCase() } 39 |       }); 40 |       if (user) { 41 |         } else { 42 |         ); 43 |       } 44 |     } catch (userQueryError) { 45 |       return NextResponse.json({ 46 |         success: false, 47 |         error: 'Database query failed', 48 |         message: 'Unable to query user data', 49 |         details: userQueryError instanceof Error ? userQueryError.message : 'Unknown query error' 50 |       }, { status: 500 }); 51 |     } 52 |  53 |     if (!user) { 54 |       return NextResponse.json({ 55 |         success: false, 56 |         error: 'Invalid credentials', 57 |         message: 'Invalid email or password' 58 |       }, { status: 401 }); 59 |     } 60 |  61 |     if (!user.password) { 62 |       return NextResponse.json({ 63 |         success: false, 64 |         error: 'Invalid credentials', 65 |         message: 'Invalid email or password' 66 |       }, { status: 401 }); 67 |     } 68 |  69 |     let isValidPassword; 70 |     try { 71 |       isValidPassword = await bcrypt.compare(password, user.password); 72 |       } catch (passwordError) { 73 |       return NextResponse.json({ 74 |         success: false, 75 |         error: 'Password verification failed', 76 |         message: 'Unable to verify password', 77 |         details: passwordError instanceof Error ? passwordError.message : 'Unknown password error' 78 |       }, { status: 500 }); 79 |     } 80 |  81 |     if (!isValidPassword) { 82 |       return NextResponse.json({ 83 |         success: false, 84 |         error: 'Invalid credentials', 85 |         message: 'Invalid email or password' 86 |       }, { status: 401 }); 87 |     } 88 |  89 |     let token; 90 |     try { 91 |       token = jwt.sign( 92 |         { 93 |           userId: user.id, 94 |           email: user.email, 95 |           role: user.role 96 |         }, 97 |         JWT_SECRET, 98 |         { expiresIn: '7d' } 99 |       );100 |       } catch (jwtError) {101 |       return NextResponse.json({102 |         success: false,103 |         error: 'Token generation failed',104 |         message: 'Unable to generate authentication token',105 |         details: jwtError instanceof Error ? jwtError.message : 'Unknown JWT error'106 |       }, { status: 500 });107 |     }108 | 109 |     return NextResponse.json({110 |       success: true,111 |       user: {112 |         id: user.id,113 |         email: user.email,114 |         fullName: user.fullName,115 |         role: user.role,116 |         access_token: token117 |       },118 |       message: 'Login successful'119 |     });120 | 121 |   } catch (error) {122 |     return NextResponse.json({123 |       success: false,124 |       error: 'Internal server error',125 |       message: 'An error occurred during login',126 |       details: error instanceof Error ? error.message : 'Unknown error'127 |     }, { status: 500 });128 |   }129 | }
==================================================END: frontend/app/api/auth/login/route.ts==================================================


==================================================FILE: frontend/app/api/auth/reset-password/route.tsSIZE: 1.10 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { createServerClient } from '@/lib/supabase/server';  3 |   4 | export async function POST() {  5 |   try {  6 |     const supabase = await createServerClient();  7 |   8 |     const { data: { user }, error: authError } = await supabase.auth.getUser();  9 |  10 |     if (authError || !user) { 11 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); 12 |     } 13 |  14 |     const { error } = await supabase.auth.resetPasswordForEmail(user.email || '', { 15 |       redirectTo: `${process.env.NEXT_PUBLIC_SITE_URL}/account/profile?reset=true` 16 |     }); 17 |  18 |     if (error) { 19 |       return NextResponse.json({ error: 'Failed to send password reset email' }, { status: 500 }); 20 |     } 21 |  22 |     return NextResponse.json({ 23 |       success: true, 24 |       message: 'Password reset email sent successfully' 25 |     }); 26 |  27 |   } catch (error) { 28 |     return NextResponse.json({ error: 'Internal server error' }, { status: 500 }); 29 |   } 30 | }
==================================================END: frontend/app/api/auth/reset-password/route.ts==================================================


==================================================FILE: frontend/app/api/auth/verify/route.tsSIZE: 1.59 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import * as jwt from 'jsonwebtoken';  3 | import { prisma } from '@/lib/prisma';  4 |   5 | const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';  6 |   7 | export async function POST(request: NextRequest) {  8 |   try {  9 |     const { token } = await request.json(); 10 |  11 |     if (!token) { 12 |       return NextResponse.json({ 13 |         success: false, 14 |         error: 'No token provided', 15 |         message: 'Authentication token is required' 16 |       }, { status: 401 }); 17 |     } 18 |  19 |     const decoded = jwt.verify(token, JWT_SECRET) as { userId: string; iat?: number; exp?: number }; 20 |  21 |     if (!decoded) { 22 |       return NextResponse.json({ 23 |         success: false, 24 |         error: 'Invalid token', 25 |         message: 'Authentication token is invalid' 26 |       }, { status: 401 }); 27 |     } 28 |  29 |     const user = await prisma.user.findUnique({ 30 |       where: { id: decoded.userId } 31 |     }); 32 |  33 |     if (!user) { 34 |       return NextResponse.json({ 35 |         success: false, 36 |         error: 'User not found', 37 |         message: 'User does not exist' 38 |       }, { status: 401 }); 39 |     } 40 |  41 |     return NextResponse.json({ 42 |       success: true, 43 |       user: { 44 |         id: user.id, 45 |         email: user.email, 46 |         fullName: user.fullName, 47 |         role: user.role 48 |       }, 49 |       message: 'Token verified successfully' 50 |     }); 51 |  52 |   } catch (error) { 53 |     return NextResponse.json({ 54 |       success: false, 55 |       error: 'Invalid token', 56 |       message: 'Authentication token is invalid or expired' 57 |     }, { status: 401 }); 58 |   } 59 | }
==================================================END: frontend/app/api/auth/verify/route.ts==================================================


==================================================FILE: frontend/app/api/booking/route.tsSIZE: 7.25 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { z } from 'zod';  4 |   5 | const supabase = createClient(  6 |   process.env.NEXT_PUBLIC_SUPABASE_URL!,  7 |   process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!  8 | );  9 |  10 | const bookingCreateSchema = z.object({ 11 |   user_id: z.string().min(1, 'User ID is required'), 12 |   schedule_slot_id: z.number().int('Invalid schedule slot ID'), 13 |   user_package_id: z.number().int('Invalid user package ID'), 14 |   session_type: z.string().min(1, 'Session type is required'), 15 |   notes: z.string().optional(), 16 |   status: z.enum(['pending', 'confirmed', 'cancelled', 'completed']).default('confirmed') 17 | }); 18 |  19 | export async function POST(request: NextRequest) { 20 |   try { 21 |     const body = await request.json(); 22 |  23 |     const validation = bookingCreateSchema.safeParse(body); 24 |     if (!validation.success) { 25 |       return NextResponse.json({ 26 |         success: false, 27 |         error: 'Validation failed', 28 |         message: 'Booking data validation failed', 29 |         details: validation.error.issues, 30 |         toast: { 31 |           type: 'error', 32 |           title: 'Validation Error', 33 |           description: 'Booking data validation failed. Please check the form fields.' 34 |         } 35 |       }, { status: 400 }); 36 |     } 37 |  38 |     const bookingData = validation.data; 39 |  40 |     const { data: user, error: userError } = await supabase 41 |       .from('users') 42 |       .select('id, full_name') 43 |       .eq('id', bookingData.user_id) 44 |       .single(); 45 |  46 |     if (userError || !user) { 47 |       return NextResponse.json({ 48 |         success: false, 49 |         error: 'User not found', 50 |         message: 'The specified user does not exist', 51 |         toast: { 52 |           type: 'error', 53 |           title: 'User Not Found', 54 |           description: 'The specified user does not exist' 55 |         } 56 |       }, { status: 404 }); 57 |     } 58 |  59 |     const { data: scheduleSlot, error: scheduleError } = await supabase 60 |       .from('schedule_slots') 61 |       .select('id, start_time, end_time, capacity, booked_count, is_available') 62 |       .eq('id', bookingData.schedule_slot_id) 63 |       .single(); 64 |  65 |     if (scheduleError || !scheduleSlot) { 66 |       return NextResponse.json({ 67 |         success: false, 68 |         error: 'Schedule slot not found', 69 |         message: 'The specified schedule slot does not exist', 70 |         toast: { 71 |           type: 'error', 72 |           title: 'Schedule Slot Not Found', 73 |           description: 'The specified schedule slot does not exist' 74 |         } 75 |       }, { status: 404 }); 76 |     } 77 |  78 |     if (!scheduleSlot.is_available) { 79 |       return NextResponse.json({ 80 |         success: false, 81 |         error: 'Schedule slot unavailable', 82 |         message: 'The specified schedule slot is not available', 83 |         toast: { 84 |           type: 'error', 85 |           title: 'Schedule Slot Unavailable', 86 |           description: 'The specified schedule slot is not available' 87 |         } 88 |       }, { status: 400 }); 89 |     } 90 |  91 |     const { data: existingBookings, error: bookingsError } = await supabase 92 |       .from('bookings') 93 |       .select('id') 94 |       .eq('schedule_slot_id', bookingData.schedule_slot_id) 95 |       .eq('status', 'confirmed'); 96 |  97 |     if (bookingsError) { 98 |       return NextResponse.json({ 99 |         success: false,100 |         error: 'Database error',101 |         message: 'Failed to check schedule slot availability',102 |         details: bookingsError.message,103 |         toast: {104 |           type: 'error',105 |           title: 'Database Error',106 |           description: 'Failed to check schedule slot availability. Please try again.'107 |         }108 |       }, { status: 500 });109 |     }110 | 111 |     const currentBookings = existingBookings?.length || 0;112 |     if (currentBookings >= (scheduleSlot.capacity || 3)) {113 |       return NextResponse.json({114 |         success: false,115 |         error: 'Schedule slot full',116 |         message: 'The specified schedule slot is at full capacity',117 |         toast: {118 |           type: 'error',119 |           title: 'Schedule Slot Full',120 |           description: 'The specified schedule slot is at full capacity'121 |         }122 |       }, { status: 400 });123 |     }124 | 125 |     const { data: booking, error: createError } = await supabase126 |       .from('bookings')127 |       .insert({128 |         user_id: bookingData.user_id,129 |         schedule_slot_id: bookingData.schedule_slot_id,130 |         user_package_id: bookingData.user_package_id,131 |         session_type: bookingData.session_type,132 |         notes: bookingData.notes,133 |         status: bookingData.status,134 |         created_at: new Date().toISOString()135 |       })136 |       .select()137 |       .single();138 | 139 |     if (createError) {140 |       return NextResponse.json({141 |         success: false,142 |         error: 'Database error',143 |         message: 'Failed to create booking',144 |         details: createError.message,145 |         toast: {146 |           type: 'error',147 |           title: 'Booking Creation Failed',148 |           description: 'Failed to create booking. Please try again.'149 |         }150 |       }, { status: 500 });151 |     }152 | 153 |     return NextResponse.json({154 |       success: true,155 |       message: 'Booking created successfully',156 |       data: booking,157 |       toast: {158 |         type: 'success',159 |         title: 'Success!',160 |         description: `Booking created for ${user.full_name} on ${scheduleSlot.start_time}`161 |       }162 |     }, { status: 201 });163 | 164 |   } catch (error) {165 |     return NextResponse.json({166 |       success: false,167 |       error: 'Internal server error',168 |       message: 'An unexpected error occurred',169 |       toast: {170 |         type: 'error',171 |         title: 'Unexpected Error',172 |         description: 'An unexpected error occurred. Please try again.'173 |       }174 |     }, { status: 500 });175 |   }176 | }177 | 178 | export async function GET(request: NextRequest) {179 |   try {180 |     const { searchParams } = new URL(request.url);181 |     const userId = searchParams.get('user_id');182 |     const scheduleSlotId = searchParams.get('schedule_slot_id');183 | 184 |     let query = supabase185 |       .from('bookings')186 |       .select('*');187 | 188 |     if (userId) {189 |       query = query.eq('user_id', userId);190 |     }191 | 192 |     if (scheduleSlotId) {193 |       query = query.eq('schedule_slot_id', scheduleSlotId);194 |     }195 | 196 |     const { data: bookings, error } = await query197 |       .order('created_at', { ascending: false });198 | 199 |     if (error) {200 |       return NextResponse.json({201 |         success: false,202 |         error: 'Database error',203 |         message: 'Failed to fetch bookings',204 |         details: error.message,205 |         toast: {206 |           type: 'error',207 |           title: 'Database Error',208 |           description: 'Failed to fetch bookings. Please try again.'209 |         }210 |       }, { status: 500 });211 |     }212 | 213 |     return NextResponse.json({214 |       success: true,215 |       data: bookings216 |     });217 | 218 |   } catch (error) {219 |     return NextResponse.json({220 |       success: false,221 |       error: 'Internal server error',222 |       message: 'An unexpected error occurred',223 |       toast: {224 |         type: 'error',225 |         title: 'Unexpected Error',226 |         description: 'An unexpected error occurred. Please try again.'227 |       }228 |     }, { status: 500 });229 |   }230 | }
==================================================END: frontend/app/api/booking/route.ts==================================================


==================================================FILE: frontend/app/api/bug-reports/route.tsSIZE: 3.03 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import jwt from 'jsonwebtoken';  3 | import { prisma } from '@/lib/prisma';  4 |   5 | const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';  6 |   7 | export async function GET() {  8 |   return NextResponse.json({ message: 'Bug reports API is working' });  9 | } 10 |  11 | export async function POST(request: NextRequest) { 12 |   try { 13 |  14 |     const authHeader = request.headers.get('authorization'); 15 |     if (!authHeader || !authHeader.startsWith('Bearer ')) { 16 |       return NextResponse.json( 17 |         { error: 'Unauthorized - No token provided' }, 18 |         { status: 401 } 19 |       ); 20 |     } 21 |  22 |     const token = authHeader.substring(7); 23 |  24 |     let decoded: { userId: string }; 25 |     try { 26 |       decoded = jwt.verify(token, JWT_SECRET) as { userId: string }; 27 |       } catch { 28 |       return NextResponse.json( 29 |         { error: 'Unauthorized - Invalid token' }, 30 |         { status: 401 } 31 |       ); 32 |     } 33 |  34 |     const user = await prisma.user.findUnique({ 35 |       where: { id: decoded.userId } 36 |     }); 37 |  38 |     if (!user) { 39 |       return NextResponse.json( 40 |         { error: 'Unauthorized - User not found' }, 41 |         { status: 401 } 42 |       ); 43 |     } 44 |  45 |     const body = await request.json(); 46 |     const { title, description, screenshot, annotations, category, priority } = body; 47 |  48 |     if (!title || !description) { 49 |       return NextResponse.json( 50 |         { error: 'Title and description are required' }, 51 |         { status: 400 } 52 |       ); 53 |     } 54 |  55 |     const bugReport = await prisma.bugReport.create({ 56 |       data: { 57 |         title, 58 |         description, 59 |         screenshot, 60 |         annotations: annotations || [], 61 |         category: category || null, 62 |         priority: priority || 'MEDIUM', 63 |         status: 'OPEN', 64 |         reporterId: user.id 65 |       } 66 |     }); 67 |  68 |     return NextResponse.json({ 69 |       success: true, 70 |       bugReport, 71 |       message: 'Bug report submitted successfully' 72 |     }); 73 |  74 |   } catch (error) { 75 |     return NextResponse.json( 76 |       { error: 'Internal server error: ' + (error instanceof Error ? error.message : 'Unknown error') }, 77 |       { status: 500 } 78 |     ); 79 |   } finally { 80 |     await prisma.$disconnect(); 81 |   } 82 | }
==================================================END: frontend/app/api/bug-reports/route.ts==================================================


==================================================FILE: frontend/app/api/calendly-booking/route.tsSIZE: 7.46 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import { z } from 'zod';  4 |   5 | const calendlyBookingSchema = z.object({  6 |   packageId: z.number().int('Invalid package ID'),  7 |   clientName: z.string().min(1, 'Client name is required'),  8 |   clientEmail: z.string().email('Invalid email address'),  9 |   clientPhone: z.string().min(1, 'Phone number is required'), 10 |   selectedDate: z.string().min(1, 'Date is required'), 11 |   selectedTime: z.string().min(1, 'Time is required'), 12 |   birthDate: z.string().min(1, 'Birth date is required'), 13 |   birthCity: z.string().min(1, 'Birth city is required'), 14 |   message: z.string().optional(), 15 |   paymentMethodId: z.number().int('Payment method is required'), 16 |   language: z.string().default('en') 17 | }); 18 |  19 | export async function POST(request: NextRequest) { 20 |   try { 21 |     const body = await request.json(); 22 |  23 |     const validation = calendlyBookingSchema.safeParse(body); 24 |     if (!validation.success) { 25 |       return NextResponse.json({ 26 |         success: false, 27 |         error: 'Validation failed', 28 |         message: 'Booking data validation failed', 29 |         details: validation.error.issues 30 |       }, { status: 400 }); 31 |     } 32 |  33 |     const bookingData = validation.data; 34 |  35 |     let user = await prisma.user.findUnique({ 36 |       where: { email: bookingData.clientEmail } 37 |     }); 38 |  39 |     if (!user) { 40 |  41 |       user = await prisma.user.create({ 42 |         data: { 43 |           email: bookingData.clientEmail, 44 |           fullName: bookingData.clientName, 45 |           phone: bookingData.clientPhone, 46 |           birthDate: new Date(bookingData.birthDate), 47 |           birthPlace: bookingData.birthCity, 48 |           language: bookingData.language, 49 |           role: 'user', 50 |           status: 'active' 51 |         } 52 |       }); 53 |       } else { 54 |  55 |       user = await prisma.user.update({ 56 |         where: { id: user.id }, 57 |         data: { 58 |           fullName: bookingData.clientName, 59 |           phone: bookingData.clientPhone, 60 |           birthDate: new Date(bookingData.birthDate), 61 |           birthPlace: bookingData.birthCity, 62 |           language: bookingData.language 63 |         } 64 |       }); 65 |       } 66 |  67 |     const packageDefinition = await prisma.packageDefinition.findUnique({ 68 |       where: { id: bookingData.packageId }, 69 |       include: { 70 |         packagePrices: { 71 |           where: { isActive: true }, 72 |           include: { 73 |             currency: true 74 |           } 75 |         }, 76 |         sessionDuration: true 77 |       } 78 |     }); 79 |  80 |     if (!packageDefinition) { 81 |       return NextResponse.json({ 82 |         success: false, 83 |         error: 'Package not found', 84 |         message: 'The selected package was not found' 85 |       }, { status: 400 }); 86 |     } 87 |  88 |     const scheduleSlot = await prisma.scheduleSlot.findFirst({ 89 |       where: { 90 |         startTime: { 91 |           gte: new Date(`${bookingData.selectedDate}T${bookingData.selectedTime}:00.000Z`), 92 |           lt: new Date(`${bookingData.selectedDate}T${bookingData.selectedTime}:59.999Z`) 93 |         }, 94 |         isAvailable: true 95 |       }, 96 |       include: { 97 |         scheduleTemplate: { 98 |           include: { 99 |             sessionDuration: true100 |           }101 |         }102 |       }103 |     });104 | 105 |     if (!scheduleSlot) {106 |       return NextResponse.json({107 |         success: false,108 |         error: 'Schedule slot not found',109 |         message: 'The selected time slot is no longer available'110 |       }, { status: 400 });111 |     }112 | 113 |     if (scheduleSlot.capacity && (scheduleSlot.bookedCount || 0) >= scheduleSlot.capacity) {114 |       return NextResponse.json({115 |         success: false,116 |         error: 'Slot full',117 |         message: 'This time slot is at full capacity'118 |       }, { status: 400 });119 |     }120 | 121 |     const paymentMethod = await prisma.paymentMethodConfig.findUnique({122 |       where: { id: bookingData.paymentMethodId }123 |     });124 | 125 |     if (!paymentMethod) {126 |       return NextResponse.json({127 |         success: false,128 |         error: 'Payment method not found',129 |         message: 'The selected payment method was not found'130 |       }, { status: 400 });131 |     }132 | 133 |     const packagePrice = packageDefinition.packagePrices[0];134 |     if (!packagePrice) {135 |       return NextResponse.json({136 |         success: false,137 |         error: 'Package price not found',138 |         message: 'No active price found for this package'139 |       }, { status: 400 });140 |     }141 | 142 |     const purchase = await prisma.purchase.create({143 |       data: {144 |         userId: user.id,145 |         totalAmount: packagePrice.price,146 |         currencyCode: packagePrice.currency.code,147 |         paymentMethod: paymentMethod.type || 'custom',148 |         paymentStatus: 'confirmed'149 |       }150 |     });151 | 152 |     const userPackage = await prisma.userPackage.create({153 |       data: {154 |         userId: user.id,155 |         purchaseId: purchase.id,156 |         packagePriceId: packagePrice.id,157 |         quantity: 1,158 |         isActive: true,159 |         sessionsUsed: 0160 |       }161 |     });162 | 163 |     const booking = await prisma.booking.create({164 |       data: {165 |         userId: user.id,166 |         userPackageId: userPackage.id,167 |         scheduleSlotId: scheduleSlot.id,168 |         sessionType: packageDefinition.name,169 |         notes: bookingData.message,170 |         status: 'confirmed'171 |       },172 |       include: {173 |         user: {174 |           select: {175 |             id: true,176 |             email: true,177 |             fullName: true,178 |             phone: true179 |           }180 |         },181 |         userPackage: {182 |           include: {183 |             packagePrice: {184 |               include: {185 |                 packageDefinition: {186 |                   include: {187 |                     sessionDuration: true188 |                   }189 |                 },190 |                 currency: true191 |               }192 |             }193 |           }194 |         },195 |         scheduleSlot: {196 |           include: {197 |             scheduleTemplate: {198 |               include: {199 |                 sessionDuration: true200 |               }201 |             }202 |           }203 |         }204 |       }205 |     });206 | 207 |     await prisma.scheduleSlot.update({208 |       where: { id: scheduleSlot.id },209 |       data: { bookedCount: { increment: 1 } }210 |     });211 | 212 |     return NextResponse.json({213 |       success: true,214 |       message: 'Booking created successfully',215 |       data: {216 |         bookingId: booking.id,217 |         user: booking.user,218 |         package: booking.userPackage.packagePrice.packageDefinition,219 |         schedule: {220 |           date: booking.scheduleSlot.startTime.toISOString().split('T')[0],221 |           time: booking.scheduleSlot.startTime.toTimeString().split(' ')[0].substring(0, 5),222 |           duration: booking.scheduleSlot.scheduleTemplate.sessionDuration?.duration_minutes || 60223 |         },224 |         totalPrice: booking.userPackage.packagePrice.price,225 |         currency: booking.userPackage.packagePrice.currency.symbol226 |       }227 |     }, { status: 201 });228 | 229 |   } catch (error) {230 |     return NextResponse.json({231 |       success: false,232 |       error: 'Booking creation failed',233 |       message: 'An error occurred while creating the booking'234 |     }, { status: 500 });235 |   }236 | }
==================================================END: frontend/app/api/calendly-booking/route.ts==================================================


==================================================FILE: frontend/app/api/chat/hybrid/route.tsSIZE: 22.41 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import OpenRouterService from '@/lib/services/openrouter-service';  3 | import { LoggingService } from '@/lib/services/logging-service';  4 |   5 | export async function POST(request: NextRequest) {  6 |   try {  7 |     const { message, userId, conversationHistory = [] } = await request.json();  8 |   9 |     if (!message) { 10 |       return NextResponse.json( 11 |         { error: 'Message is required' }, 12 |         { status: 400 } 13 |       ); 14 |     } 15 |  16 |     const loggingService = new LoggingService({ 17 |       enabled: true, 18 |       storage: 'database', 19 |       level: 'info' 20 |     }); 21 |  22 |     let response = ''; 23 |     const lowerMessage = message.toLowerCase(); 24 |  25 |     try { 26 |       const rasaResponse = await fetch('http: 27 |         method: 'POST', 28 |         headers: { 29 |           'Content-Type': 'application/json', 30 |         }, 31 |         body: JSON.stringify({ 32 |           text: message, 33 |           message_id: `hybrid_${Date.now()}` 34 |         }), 35 |       }); 36 |  37 |       if (rasaResponse.ok) { 38 |         const rasaData = await rasaResponse.json(); 39 |  40 |         if (rasaData.intent && rasaData.intent.confidence > 0.7) { 41 |           const intent = rasaData.intent.name; 42 |  43 |           switch (intent) { 44 |             case 'greet': 45 |               response = '¡Hola! 🌟 Soy Jose Garfias, tu astrólogo. ¿En qué puedo ayudarte hoy?'; 46 |               break; 47 |             case 'provide_name': 48 |               response = '¡Mucho gusto! 🌟 Es un placer conocerte. ¿En qué puedo ayudarte hoy?'; 49 |               break; 50 |             case 'astrology_sign': 51 |               response = '¡Excelente! 🌟 Para darte una lectura precisa de tu signo, necesito tu fecha de nacimiento completa (día, mes y año). ¿Podrías compartirla conmigo?'; 52 |               break; 53 |             case 'birth_date': 54 |               response = '¡Perfecto! 🌟 Con tu fecha de nacimiento puedo crear tu carta natal completa. ¿Te gustaría que te haga una lectura personalizada?'; 55 |               break; 56 |             case 'goodbye': 57 |               response = '¡Hasta luego! 🌟 Que tengas un día maravilloso. ¡Cuídate mucho! 💫'; 58 |               break; 59 |             case 'ask_packages': 60 |             case 'show_packages': 61 |             case 'ask_package_info': 62 |  63 |               response = await fetchPackagesFromAPI(); 64 |               break; 65 |             case 'package_details': 66 |  67 |               const entities = rasaData.entities || []; 68 |               const packageName = entities.find((e: Record<string, unknown>) => e.entity === 'package_name')?.value as string; 69 |               const packageId = entities.find((e: Record<string, unknown>) => e.entity === 'package_id')?.value as string; 70 |               response = await fetchPackageDetailsFromAPI(packageName, packageId); 71 |               break; 72 |             default: 73 |  74 |               break; 75 |           } 76 |         } 77 |       } 78 |     } catch { 79 |       } 80 |  81 |     if (!response) { 82 |       response = await getSimpleResponse(lowerMessage, conversationHistory) || ''; 83 |     } 84 |  85 |     if (!response || isComplexQuery(lowerMessage)) { 86 |       try { 87 |         const openRouter = new OpenRouterService(); 88 |         response = await openRouter.handleChitchat({ 89 |           userMessage: message, 90 |           conversationHistory: conversationHistory, 91 |           brandContext: { 92 |             astrologerName: 'Jose Garfias', 93 |             services: [ 94 |               'Lecturas de Carta Natal', 95 |               'Análisis de Tránsitos', 96 |               'Compatibilidad de Relaciones', 97 |               'Orientación Profesional', 98 |               'Desarrollo Espiritual', 99 |               'Numerología',100 |               'Lecturas de Tarot'101 |             ],102 |             specialties: [103 |               'Astrología Occidental',104 |               'Astrología Evolutiva',105 |               'Psicología Astrológica',106 |               'Medicina Holística',107 |               'Coaching Espiritual'108 |             ]109 |           }110 |         });111 |       } catch (error) {112 |         response = '¡Qué interesante! 🌟 Háblame más sobre eso. ¿Hay algo específico en lo que pueda ayudarte?';113 |       }114 |     }115 | 116 |     try {117 |       await loggingService.logConversation({118 |         sessionId: `hybrid_${Date.now()}`,119 |         userId: userId || 'anonymous',120 |         message: message,121 |         userMessage: message,122 |         botResponse: response,123 |         rasaIntent: 'hybrid_chat',124 |         rasaConfidence: 0.8,125 |         rasaEntities: [],126 |         responseGenerator: 'hybrid_chat',127 |         bookingStep: null,128 |         bookingDataSnapshot: null,129 |         modelVersion: '1.0.0',130 |         intent: 'hybrid_chat',131 |         entities: [],132 |         action: 'hybrid_chat',133 |         rasaResponse: response,134 |         llmResponse: response,135 |         apiCalls: [],136 |         processingTime: 0,137 |         success: true,138 |         error: undefined139 |       });140 |     } catch (logError) {141 |       }142 | 143 |     return NextResponse.json({144 |       success: true,145 |       response: response,146 |       language: lowerMessage.includes('hola') || lowerMessage.includes('precio') || lowerMessage.includes('contacto') ? 'es' : 'en'147 |     });148 | 149 |   } catch (error) {150 |     return NextResponse.json(151 |       {152 |         success: false,153 |         error: 'Lo siento, hubo un error procesando tu mensaje. Por favor intenta nuevamente. / Sorry, there was an error processing your message. Please try again.',154 |         details: error instanceof Error ? error.message : 'Unknown error'155 |       },156 |       { status: 500 }157 |     );158 |   }159 | }160 | 161 | async function fetchPackagesFromAPI(): Promise<string> {162 |   try {163 |     const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || `http:164 |     const response = await fetch(`${baseUrl}/api/packages?active=true`, {165 |       method: 'GET',166 |       headers: {167 |         'Content-Type': 'application/json',168 |       },169 |     });170 | 171 |     if (response.ok) {172 |       const data = await response.json();173 |       const packages = data.packages || [];174 | 175 |       if (packages.length === 0) {176 |         return 'No hay paquetes disponibles en este momento. Por favor contacta con nosotros directamente.';177 |       }178 | 179 |       let message = '🌟 **Paquetes de Astrología Disponibles:**\n\n';180 | 181 |       packages.forEach((pkg: Record<string, unknown>, index: number) => {182 |         const name = pkg.name || 'Paquete Desconocido';183 |         const description = pkg.description || 'Sin descripción disponible';184 |         const price = pkg.price || 0;185 |         const currency = pkg.currency || '$';186 |         const sessions = pkg.sessionsCount || 1;187 |         const duration = pkg.duration || 60;188 |         const isPopular = pkg.isPopular || false;189 | 190 |         const priceText = (typeof price === 'number' && !isNaN(price) && price > 0) ? `${currency}${price.toFixed(0)}` : 'Contactar para precio';191 |         const popularBadge = isPopular ? ' ⭐ POPULAR' : '';192 | 193 |         message += `**${index + 1}. ${name}**${popularBadge}\n`;194 |         message += `   💰 Precio: ${priceText}\n`;195 |         message += `   📅 Sesiones: ${sessions}\n`;196 |         message += `   ⏱️ Duración: ${duration} minutos cada una\n`;197 |         message += `   📝 ${description}\n\n`;198 |       });199 | 200 |       message += '💫 **¿Listo para reservar?** Solo dime qué paquete te interesa y te ayudo a comenzar.';201 | 202 |       return message;203 |     } else {204 |       return 'Estoy teniendo problemas para acceder a la información de paquetes. Por favor intenta más tarde o contacta con nosotros directamente.';205 |     }206 |   } catch (error) {207 |     return 'Estoy experimentando dificultades técnicas. Por favor intenta de nuevo o contacta con nosotros directamente.';208 |   }209 | }210 | 211 | async function fetchPackageDetailsFromAPI(packageName?: string, packageId?: string): Promise<string> {212 |   try {213 |     const baseUrl = process.env.NEXT_PUBLIC_BASE_URL || `http:214 |     const response = await fetch(`${baseUrl}/api/packages?active=true`, {215 |       method: 'GET',216 |       headers: {217 |         'Content-Type': 'application/json',218 |       },219 |     });220 | 221 |     if (response.ok) {222 |       const data = await response.json();223 |       const packages = data.packages || [];224 | 225 |       let targetPackage = null;226 |       if (packageId) {227 |         targetPackage = packages.find((pkg: Record<string, unknown>) => String(pkg.id) === String(packageId));228 |       } else if (packageName) {229 |         targetPackage = packages.find((pkg: Record<string, unknown>) =>230 |           pkg.name && (pkg.name as string).toLowerCase().includes(packageName.toLowerCase())231 |         );232 |       }233 | 234 |       if (targetPackage) {235 |         const name = targetPackage.name || 'Paquete Desconocido';236 |         const description = targetPackage.description || 'Sin descripción disponible';237 |         const price = targetPackage.price || 0;238 |         const currency = targetPackage.currency || '$';239 |         const sessions = targetPackage.sessionsCount || 1;240 |         const duration = targetPackage.duration || 60;241 |         const packageType = targetPackage.packageType || 'Estándar';242 |         const maxGroup = targetPackage.maxGroupSize || 1;243 |         const isPopular = targetPackage.isPopular || false;244 | 245 |         const priceText = (typeof price === 'number' && !isNaN(price) && price > 0) ? `${currency}${price.toFixed(0)}` : 'Contactar para precio';246 |         const popularBadge = isPopular ? ' ⭐ POPULAR' : '';247 | 248 |         let message = `🌟 **${name}**${popularBadge}\n\n`;249 |         message += `📝 **Descripción:**\n${description}\n\n`;250 |         message += `💰 **Precio:** ${priceText}\n`;251 |         message += `📅 **Sesiones:** ${sessions}\n`;252 |         message += `⏱️ **Duración:** ${duration} minutos por sesión\n`;253 |         message += `👥 **Tipo:** ${packageType}\n`;254 |         message += `👥 **Tamaño Máximo de Grupo:** ${maxGroup}\n\n`;255 | 256 |         if (isPopular) {257 |           message += '⭐ ¡Este es uno de nuestros paquetes más populares!\n\n';258 |         }259 | 260 |         message += '💫 **¿Listo para reservar este paquete?** Solo dime y te ayudo a comenzar.';261 | 262 |         return message;263 |       } else {264 |         return `No pude encontrar un paquete que coincida con '${packageName || packageId}'. Déjame mostrarte todos los paquetes disponibles en su lugar.`;265 |       }266 |     } else {267 |       return 'Estoy teniendo problemas para acceder a los detalles del paquete. Por favor intenta más tarde.';268 |     }269 |   } catch (error) {270 |     return 'Estoy experimentando dificultades técnicas. Por favor intenta de nuevo o contacta con nosotros directamente.';271 |   }272 | }273 | 274 | function isComplexQuery(message: string): boolean {275 |   const lowerMessage = message.toLowerCase();276 | 277 |   const complexPatterns = [278 |     'confused', 'confundido', 'guidance', 'orientación', 'help me', 'ayúdame',279 |     'career', 'carrera', 'work', 'trabajo', 'job', 'empleo', 'future', 'futuro',280 |     'relationship', 'relación', 'love', 'amor', 'family', 'familia', 'problem',281 |     'problema', 'issue', 'asunto', 'difficult', 'difícil', 'struggling', 'luchando',282 |     'advice', 'consejo', 'suggestion', 'sugerencia', 'recommendation', 'recomendación',283 |     'what should', 'qué debería', 'how can', 'cómo puedo', 'why', 'por qué',284 |     'feeling', 'sintiendo', 'emotion', 'emoción', 'mood', 'estado de ánimo'285 |   ];286 | 287 |   return complexPatterns.some(pattern => lowerMessage.includes(pattern));288 | }289 | 290 | async function getSimpleResponse(lowerMessage: string, conversationHistory: Record<string, unknown>[] = []): Promise<string | null> {291 | 292 |   if (lowerMessage.includes('hola') || lowerMessage.includes('hello') || lowerMessage.includes('hi') ||293 |       lowerMessage.includes('buenos dias') || lowerMessage.includes('buenas tardes') || lowerMessage.includes('buenas noches')) {294 |     return '¡Hola! 🌟 Soy Jose Garfias, tu astrólogo. ¿En qué puedo ayudarte hoy?';295 |   }296 | 297 |   if (lowerMessage.includes('gracias') || lowerMessage.includes('thank') || lowerMessage.includes('thanks')) {298 |     return '¡De nada! 🌟 ¿Hay algo más en lo que pueda ayudarte?';299 |   }300 | 301 |   if (lowerMessage.includes('como estas') || lowerMessage.includes('how are you') || lowerMessage.includes('que tal')) {302 |     return '¡Estoy muy bien, gracias! 💫 ¿Y tú? ¿Cómo has estado?';303 |   }304 | 305 |   if (lowerMessage.includes('soy ') &&306 |       (lowerMessage.includes('aries') || lowerMessage.includes('tauro') || lowerMessage.includes('geminis') ||307 |        lowerMessage.includes('cancer') || lowerMessage.includes('leo') || lowerMessage.includes('virgo') ||308 |        lowerMessage.includes('libra') || lowerMessage.includes('escorpio') || lowerMessage.includes('sagitario') ||309 |        lowerMessage.includes('capricornio') || lowerMessage.includes('acuario') || lowerMessage.includes('piscis'))) {310 |     return '¡Excelente! 🌟 Para darte una lectura precisa de tu signo, necesito tu fecha de nacimiento completa (día, mes y año). ¿Podrías compartirla conmigo?';311 |   }312 | 313 |   if (lowerMessage.includes('mi signo') || lowerMessage.includes('mi signo es') ||314 |       lowerMessage.includes('cual es mi signo') || lowerMessage.includes('what is my sign') ||315 |       lowerMessage.includes('my sign is')) {316 |     return '¡Excelente! 🌟 Para darte una lectura precisa de tu signo, necesito tu fecha de nacimiento completa (día, mes y año). ¿Podrías compartirla conmigo?';317 |   }318 | 319 |   if (lowerMessage.includes('me llamo') || lowerMessage.includes('mi nombre es') ||320 |       lowerMessage.includes('soy ') || lowerMessage.includes('i am ') ||321 |       lowerMessage.includes('my name is') || lowerMessage.includes('i\'m ')) {322 |     return '¡Mucho gusto! 🌟 Es un placer conocerte. ¿En qué puedo ayudarte hoy?';323 |   }324 | 325 |   if (lowerMessage.includes('fecha de nacimiento') || lowerMessage.includes('naci el') ||326 |       lowerMessage.includes('naci en') || lowerMessage.includes('born on') ||327 |       lowerMessage.includes('birth date') || /\d{1,2}\/\d{1,2}\/\d{4}/.test(lowerMessage) ||328 |       /\d{1,2}-\d{1,2}-\d{4}/.test(lowerMessage)) {329 |     return '¡Perfecto! 🌟 Con tu fecha de nacimiento puedo crear tu carta natal completa. ¿Te gustaría que te haga una lectura personalizada?';330 |   }331 | 332 |   if (lowerMessage.includes('analisis') || lowerMessage.includes('carta natal completa') ||333 |       lowerMessage.includes('análisis de carta natal')) {334 |     return '¡Perfecto! 📊 Para hacer un análisis completo de tu Carta Natal necesito:\n\n• Tu fecha de nacimiento exacta\n• Hora de nacimiento (si la tienes)\n• Lugar de nacimiento\n\nCon esta información puedo crear un reporte detallado sobre tu personalidad, fortalezas, desafíos y potencial. ¿Tienes estos datos?';335 |   }336 | 337 |   if (lowerMessage.includes('compatibilidad') || lowerMessage.includes('relaciones') ||338 |       lowerMessage.includes('pareja')) {339 |     return '¡Excelente! 💫 Para analizar compatibilidad necesito:\n\n• Tu información de nacimiento\n• La información de la otra persona (fecha, hora, lugar)\n\nPuedo analizar compatibilidad romántica, amistosa o profesional. ¿Con quién te gustaría analizar la compatibilidad?';340 |   }341 | 342 |   if (lowerMessage.includes('predicciones') || lowerMessage.includes('tránsitos') ||343 |       lowerMessage.includes('futuro')) {344 |     return '¡Fascinante! 🔮 Para hacer predicciones precisas necesito:\n\n• Tu carta natal completa\n• El período que te interesa analizar\n\nPuedo analizar tránsitos planetarios, oportunidades y desafíos. ¿Qué período te interesa más?';345 |   }346 | 347 |   if (lowerMessage.includes('astrologia') || lowerMessage.includes('astrology') ||348 |       lowerMessage.includes('carta natal') || lowerMessage.includes('natal chart') ||349 |       lowerMessage.includes('horoscopo') || lowerMessage.includes('horoscope') ||350 |       lowerMessage.includes('lectura') || lowerMessage.includes('reading')) {351 |     return '¡Me encanta hablar de astrología! 🌟 ¿Hay algo específico que te gustaría saber sobre tu carta natal o signo?';352 |   }353 | 354 |   if (lowerMessage.includes('si') || lowerMessage.includes('yes') || lowerMessage.includes('claro') || lowerMessage.includes('por supuesto')) {355 | 356 |     const lastMessages = conversationHistory.slice(-3).map(msg => (msg.content as string).toLowerCase()).join(' ');357 |     if (lastMessages.includes('carta natal') || lastMessages.includes('lectura') || lastMessages.includes('signo') ||358 |         lastMessages.includes('astrología') || lastMessages.includes('leo') || lastMessages.includes('aries') ||359 |         lastMessages.includes('tauro') || lastMessages.includes('géminis') || lastMessages.includes('cáncer') ||360 |         lastMessages.includes('virgo') || lastMessages.includes('libra') || lastMessages.includes('escorpio') ||361 |         lastMessages.includes('sagitario') || lastMessages.includes('capricornio') || lastMessages.includes('acuario') ||362 |         lastMessages.includes('piscis')) {363 |       return '¡Excelente! 🌟 Puedo ayudarte con:\n\n• 📊 **Análisis de tu Carta Natal completa**\n• 💫 **Compatibilidad con otros signos**\n• 🔮 **Predicciones y tránsitos**\n• 💝 **Orientación en relaciones**\n• 🎯 **Guía profesional y personal**\n\n¿Qué te interesa más?';364 |     }365 |     return '¡Perfecto! ✨ ¿Qué te gustaría explorar?';366 |   }367 | 368 |   if (lowerMessage.includes('no') || lowerMessage.includes('nah') || lowerMessage.includes('quizas') || lowerMessage.includes('maybe')) {369 |     return '¡Sin problema! 🤝 ¿Hay algo más en lo que pueda ayudarte?';370 |   }371 | 372 |   if (lowerMessage.includes('paquetes') || lowerMessage.includes('packages') ||373 |       lowerMessage.includes('mostrar paquetes') || lowerMessage.includes('show packages') ||374 |       lowerMessage.includes('ver paquetes') || lowerMessage.includes('see packages') ||375 |       lowerMessage.includes('que paquetes') || lowerMessage.includes('what packages') ||376 |       lowerMessage.includes('paquetes disponibles') || lowerMessage.includes('available packages')) {377 | 378 |     return await fetchPackagesFromAPI();379 |   }380 | 381 |   if (lowerMessage.includes('precio') || lowerMessage.includes('price') ||382 |       lowerMessage.includes('cost') || lowerMessage.includes('costo') ||383 |       lowerMessage.includes('cuanto cuesta') || lowerMessage.includes('how much') ||384 |       lowerMessage.includes('tarifa') || lowerMessage.includes('rate') ||385 |       lowerMessage.includes('valor') || lowerMessage.includes('value') ||386 |       lowerMessage.includes('coste') || lowerMessage.includes('costes') ||387 |       lowerMessage.includes('cuanto vale') || lowerMessage.includes('worth') ||388 |       lowerMessage.includes('tarifario') || lowerMessage.includes('pricing') ||389 |       lowerMessage.includes('lista de precios') || lowerMessage.includes('price list') ||390 |       lowerMessage.includes('tabla de precios') || lowerMessage.includes('price table') ||391 |       lowerMessage.includes('catálogo de precios') || lowerMessage.includes('price catalog') ||392 |       lowerMessage.includes('información de precios') || lowerMessage.includes('pricing information') ||393 |       lowerMessage.includes('detalles de precios') || lowerMessage.includes('pricing details') ||394 |       lowerMessage.includes('opciones de precios') || lowerMessage.includes('price options') ||395 |       lowerMessage.includes('rangos de precios') || lowerMessage.includes('price range') ||396 |       lowerMessage.includes('estructura de precios') || lowerMessage.includes('pricing structure') ||397 |       lowerMessage.includes('política de precios') || lowerMessage.includes('pricing policy') ||398 |       lowerMessage.includes('cost structure') || lowerMessage.includes('fee structure') ||399 |       lowerMessage.includes('rate structure') || lowerMessage.includes('cost breakdown') ||400 |       lowerMessage.includes('price breakdown') || lowerMessage.includes('pricing guide') ||401 |       lowerMessage.includes('price guide') || lowerMessage.includes('cost guide') ||402 |       lowerMessage.includes('rate guide') || lowerMessage.includes('fee guide') ||403 |       lowerMessage.includes('pricing sheet') || lowerMessage.includes('price sheet') ||404 |       lowerMessage.includes('cost sheet') || lowerMessage.includes('rate sheet') ||405 |       lowerMessage.includes('fee sheet')) {406 |     return await fetchPackagesFromAPI();407 |   }408 | 409 |   if (lowerMessage.includes('contacto') || lowerMessage.includes('contact') ||410 |       lowerMessage.includes('telefono') || lowerMessage.includes('phone') ||411 |       lowerMessage.includes('email')) {412 |     return '📧 **Email**: info@josegarfias.com\n📱 **WhatsApp**: +52 55 1234 5678\n📍 **Ubicación**: Ciudad de México\n\n🕒 **Horarios**: Lunes-Viernes 9AM-7PM, Sábados 10AM-4PM\n\n¿Prefieres WhatsApp o email?';413 |   }414 | 415 |   if (lowerMessage.includes('horario') || lowerMessage.includes('horarios') ||416 |       lowerMessage.includes('disponible') || lowerMessage.includes('availability') ||417 |       lowerMessage.includes('schedule')) {418 |     return '📅 **Disponibilidad:**\n• Lunes-Viernes: 9AM-7PM\n• Sábados: 10AM-4PM\n• Domingos: Con cita previa\n\n💫 **Horarios populares:**\n• Mañanas: 10AM-12PM\n• Tardes: 2PM-5PM\n• Noches: 6PM-8PM\n\n¿Qué horario prefieres?';419 |   }420 | 421 |   if (lowerMessage.includes('bye') || lowerMessage.includes('goodbye') ||422 |       lowerMessage.includes('adios') || lowerMessage.includes('hasta luego')) {423 |     return '¡Hasta luego! 🌟 Que tengas un día maravilloso. ¡Cuídate mucho! 💫';424 |   }425 | 426 |   return null;427 | }
==================================================END: frontend/app/api/chat/hybrid/route.ts==================================================


==================================================FILE: frontend/app/api/chat/schedule-slots/route.tsSIZE: 3.17 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { z } from 'zod';  3 | import { prisma } from '@/lib/prisma';  4 |   5 | const querySchema = z.object({  6 |   isAvailable: z.enum(['true', 'false']).optional(),  7 |   limit: z.coerce.number().int().min(1).max(10).default(5)  8 | });  9 |  10 | export async function GET(request: NextRequest) { 11 |   try { 12 |     const { searchParams } = new URL(request.url); 13 |     const queryParams = Object.fromEntries(searchParams.entries()); 14 |     const validation = querySchema.safeParse(queryParams); 15 |  16 |     if (!validation.success) { 17 |       return NextResponse.json({ 18 |         success: false, 19 |         error: 'Invalid query parameters', 20 |         details: validation.error.issues 21 |       }, { status: 400 }); 22 |     } 23 |  24 |     const { isAvailable, limit } = validation.data; 25 |  26 |     const where: Record<string, unknown> = { 27 |       isAvailable: true 28 |     }; 29 |  30 |     where.startTime = { 31 |       gte: new Date() 32 |     }; 33 |  34 |     const scheduleSlots = await prisma.scheduleSlot.findMany({ 35 |       where, 36 |       select: { 37 |         id: true, 38 |         startTime: true, 39 |         endTime: true, 40 |         capacity: true, 41 |         bookedCount: true, 42 |         isAvailable: true, 43 |         scheduleTemplate: { 44 |           select: { 45 |             id: true, 46 |             dayOfWeek: true, 47 |             startTime: true, 48 |             endTime: true, 49 |             capacity: true, 50 |             sessionDuration: { 51 |               select: { 52 |                 id: true, 53 |                 name: true, 54 |                 duration_minutes: true 55 |               } 56 |             } 57 |           } 58 |         }, 59 |         _count: { 60 |           select: { 61 |             bookings: true 62 |           } 63 |         } 64 |       }, 65 |       take: limit, 66 |       orderBy: { startTime: 'asc' } 67 |     }); 68 |  69 |     const transformedSlots = scheduleSlots.map(slot => ({ 70 |       id: slot.id.toString(), 71 |       date: slot.startTime.toISOString().split('T')[0], 72 |       time: slot.startTime.toTimeString().split(' ')[0].substring(0, 5), 73 |       isAvailable: slot.isAvailable && (slot.bookedCount || 0) < (slot.capacity || 1), 74 |       capacity: slot.capacity || 1, 75 |       bookedCount: slot.bookedCount || 0, 76 |       sessionType: slot.scheduleTemplate.sessionDuration?.name || 'Session', 77 |       duration: slot.scheduleTemplate.sessionDuration?.duration_minutes || 60, 78 |       startTime: slot.startTime.toISOString(), 79 |       endTime: slot.endTime.toISOString() 80 |     })); 81 |  82 |     return NextResponse.json({ 83 |       success: true, 84 |       data: transformedSlots 85 |     }); 86 |  87 |   } catch (error) { 88 |     return NextResponse.json({ 89 |       success: false, 90 |       error: 'Internal server error', 91 |       message: 'Failed to fetch schedule slots', 92 |       details: error instanceof Error ? error.message : 'Unknown error' 93 |     }, { status: 500 }); 94 |   } finally { 95 |     await prisma.$disconnect(); 96 |   } 97 | }
==================================================END: frontend/app/api/chat/schedule-slots/route.ts==================================================


==================================================FILE: frontend/app/api/chat/web/route.tsSIZE: 10.82 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.3-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED === 'true', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'console' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'consulta_estado': { 38 |     action: 'consultar_estado', 39 |     apiEndpoint: '/admin/bookings', 40 |     requiredEntities: ['solicitud_id', 'cita_id', 'email'], 41 |     optionalEntities: ['tipo_consulta'], 42 |     description: 'Consultar el estado de una solicitud o cita' 43 |   }, 44 |   'agendar_cita': { 45 |     action: 'agendar_cita', 46 |     apiEndpoint: '/booking', 47 |     requiredEntities: ['fecha', 'hora', 'email'], 48 |     optionalEntities: ['tipo_sesion', 'paquete_id', 'tamaño_grupo', 'notas'], 49 |     description: 'Agendar una nueva cita' 50 |   }, 51 |   'consultar_paquetes': { 52 |     action: 'consultar_paquetes', 53 |     apiEndpoint: '/packages', 54 |     requiredEntities: [], 55 |     optionalEntities: ['tipo_paquete', 'moneda', 'duración'], 56 |     description: 'Consultar paquetes disponibles' 57 |   }, 58 |   'pagar_servicio': { 59 |     action: 'pagar_servicio', 60 |     apiEndpoint: '/client/purchase', 61 |     requiredEntities: ['monto', 'método_pago', 'email'], 62 |     optionalEntities: ['cita_id', 'paquete_id', 'moneda', 'notas'], 63 |     description: 'Procesar un pago' 64 |   }, 65 |   'cancelar_cita': { 66 |     action: 'cancelar_cita', 67 |     apiEndpoint: '/client/bookings', 68 |     requiredEntities: ['cita_id', 'email'], 69 |     optionalEntities: ['motivo'], 70 |     description: 'Cancelar una cita existente' 71 |   }, 72 |   'consultar_historial': { 73 |     action: 'consultar_historial', 74 |     apiEndpoint: '/client/purchase-history', 75 |     requiredEntities: ['email'], 76 |     optionalEntities: ['tipo_historial', 'fecha_desde', 'fecha_hasta'], 77 |     description: 'Consultar historial del usuario' 78 |   }, 79 |   'consultar_horarios': { 80 |     action: 'consultar_horarios', 81 |     apiEndpoint: '/schedule-slots', 82 |     requiredEntities: [], 83 |     optionalEntities: ['fecha', 'duración', 'tipo_sesion'], 84 |     description: 'Consultar horarios disponibles' 85 |   }, 86 |   'actualizar_perfil': { 87 |     action: 'actualizar_perfil', 88 |     apiEndpoint: '/client/me', 89 |     requiredEntities: ['email'], 90 |     optionalEntities: ['nombre', 'teléfono', 'fecha_nacimiento', 'lugar_nacimiento'], 91 |     description: 'Actualizar información del perfil' 92 |   }, 93 |   'saludo': { 94 |     action: 'saludo', 95 |     requiredEntities: [], 96 |     optionalEntities: ['nombre'], 97 |     description: 'Manejar saludos y bienvenidas' 98 |   }, 99 |   'despedida': {100 |     action: 'despedida',101 |     requiredEntities: [],102 |     optionalEntities: [],103 |     description: 'Manejar despedidas'104 |   },105 |   'ayuda': {106 |     action: 'ayuda',107 |     requiredEntities: [],108 |     optionalEntities: ['tema_ayuda'],109 |     description: 'Proporcionar ayuda y soporte'110 |   }111 | };112 | 113 | let webOrchestrator: ConversationalOrchestrator | null = null;114 | 115 | function getWebOrchestrator(): ConversationalOrchestrator {116 |   if (!webOrchestrator) {117 |     webOrchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping);118 |   }119 |   return webOrchestrator;120 | }121 | 122 | export async function POST(request: NextRequest) {123 |   try {124 |     const body = await request.json();125 |     const { message, userId, language = 'es', timestamp } = body;126 | 127 |     if (!message) {128 |       return NextResponse.json({129 |         success: false,130 |         error: 'Message is required'131 |       }, { status: 400 });132 |     }133 | 134 |     if (!userId) {135 |       return NextResponse.json({136 |         success: false,137 |         error: 'User ID is required'138 |       }, { status: 400 });139 |     }140 | 141 |     + (message.length > 100 ? '...' : ''),142 |       language,143 |       timestamp144 |     });145 | 146 |     const orchestrator = getWebOrchestrator();147 | 148 |     const mockWebhook = {149 |       Body: message,150 |       From: `web:${userId}`,151 |       To: `web:assistant`,152 |       MessageSid: `web_${Date.now()}`,153 |       Timestamp: timestamp || new Date().toISOString(),154 |       ProfileName: 'Web User',155 | 156 |       Language: language,157 |       Channel: 'web',158 |       UserAgent: request.headers.get('user-agent') || 'unknown'159 |     };160 | 161 |     const result = await orchestrator.processWhatsAppMessage(mockWebhook);162 | 163 |     if (result.success) {164 |       const data = result.data as Record<string, unknown>;165 |       ?.length || 0166 |       });167 | 168 |       return NextResponse.json({169 |         success: true,170 |         data: {171 |           response: data.response,172 |           logId: data.logId,173 |           processingTime: data.processingTime,174 |           timestamp: new Date().toISOString(),175 |           language176 |         }177 |       });178 |     } else {179 | 180 |       const errorResponse = language === 'es'181 |         ? 'Lo siento, hubo un problema al procesar tu mensaje. Por favor intenta de nuevo en unos momentos.'182 |         : 'Sorry, there was a problem processing your message. Please try again in a moment.';183 | 184 |       return NextResponse.json({185 |         success: false,186 |         error: result.error || 'Processing failed',187 |         data: {188 |           response: errorResponse,189 |           timestamp: new Date().toISOString(),190 |           language191 |         }192 |       }, { status: 500 });193 |     }194 | 195 |   } catch (error) {196 |     return NextResponse.json({197 |       success: false,198 |       error: 'Internal server error',199 |       code: 'INTERNAL_ERROR',200 |       details: error instanceof Error ? error.message : 'Unknown error'201 |     }, { status: 500 });202 |   }203 | }204 | 205 | export async function GET(request: NextRequest) {206 |   try {207 |     const { searchParams } = new URL(request.url);208 |     const action = searchParams.get('action');209 | 210 |     const orchestrator = getWebOrchestrator();211 | 212 |     switch (action) {213 |       case 'health':214 |         const healthCheck = await orchestrator.healthCheck();215 |         return NextResponse.json({216 |           success: true,217 |           data: {218 |             ...healthCheck,219 |             channel: 'web',220 |             timestamp: new Date().toISOString()221 |           }222 |         });223 | 224 |       case 'config':225 |         return NextResponse.json({226 |           success: true,227 |           data: {228 |             config: {229 |               rasa: {230 |                 url: orchestratorConfig.rasa.url,231 |                 confidence_threshold: orchestratorConfig.rasa.confidence_threshold232 |               },233 |               openrouter: {234 |                 baseUrl: orchestratorConfig.openrouter.baseUrl,235 |                 model: orchestratorConfig.openrouter.model,236 |                 temperature: orchestratorConfig.openrouter.temperature237 |               },238 |               logging: {239 |                 enabled: orchestratorConfig.logging.enabled,240 |                 level: orchestratorConfig.logging.level,241 |                 storage: orchestratorConfig.logging.storage242 |               },243 |               channel: 'web'244 |             },245 |             supportedIntents: Object.keys(intentActionMapping),246 |             timestamp: new Date().toISOString()247 |           }248 |         });249 | 250 |       case 'examples':251 |         const examples = {252 |           es: [253 |             'Hola, ¿cómo estás?',254 |             '¿Qué paquetes tienen disponibles?',255 |             'Quiero agendar una cita para mañana a las 3pm',256 |             '¿Cuál es el estado de mi solicitud 12345?',257 |             'Quiero pagar $50 por mi paquete con tarjeta de crédito',258 |             '¿Qué horarios tienen disponibles para esta semana?',259 |             'Necesito cancelar mi cita del viernes',260 |             '¿Cómo funciona el sistema de citas?'261 |           ],262 |           en: [263 |             'Hello, how are you?',264 |             'What packages do you have available?',265 |             'I want to schedule an appointment for tomorrow at 3pm',266 |             'What is the status of my request 12345?',267 |             'I want to pay $50 for my package with credit card',268 |             'What schedules are available for this week?',269 |             'I need to cancel my Friday appointment',270 |             'How does the appointment system work?'271 |           ]272 |         };273 | 274 |         return NextResponse.json({275 |           success: true,276 |           data: {277 |             examples,278 |             intents: Object.keys(intentActionMapping).map(intent => ({279 |               name: intent,280 |               description: intentActionMapping[intent].description,281 |               requiredEntities: intentActionMapping[intent].requiredEntities,282 |               optionalEntities: intentActionMapping[intent].optionalEntities283 |             })),284 |             timestamp: new Date().toISOString()285 |           }286 |         });287 | 288 |       default:289 |         return NextResponse.json({290 |           success: true,291 |           message: 'Web Chat API',292 |           availableActions: ['health', 'config', 'examples'],293 |           usage: {294 |             POST: 'Send {message, userId, language?, timestamp?} to process a message',295 |             GET: 'Use ?action=health|config|examples for information'296 |           },297 |           timestamp: new Date().toISOString()298 |         });299 |     }300 | 301 |   } catch (error) {302 |     return NextResponse.json({303 |       success: false,304 |       error: 'Internal server error',305 |       code: 'INTERNAL_ERROR',306 |       details: error instanceof Error ? error.message : 'Unknown error'307 |     }, { status: 500 });308 |   }309 | }
==================================================END: frontend/app/api/chat/web/route.ts==================================================


==================================================FILE: frontend/app/api/client/bookings/[id]/report/route.tsSIZE: 2.04 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { createServerClient } from '@/lib/supabase/server';  3 |   4 | export async function GET(  5 |   { params }: { params: { id: string } }  6 | ) {  7 |   try {  8 |     const supabase = await createServerClient();  9 |  10 |     const { data: { user }, error: authError } = await supabase.auth.getUser(); 11 |  12 |     if (authError || !user) { 13 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); 14 |     } 15 |  16 |     const { data: booking, error: bookingError } = await supabase 17 |       .from('bookings') 18 |       .select('*') 19 |       .eq('id', params.id) 20 |       .eq('client_id', user.id) 21 |       .single(); 22 |  23 |     if (bookingError || !booking) { 24 |       return NextResponse.json({ error: 'Booking not found or access denied' }, { status: 404 }); 25 |     } 26 |  27 |     const { data: report, error: reportError } = await supabase 28 |       .from('session_reports') 29 |       .select('*') 30 |       .eq('booking_id', params.id) 31 |       .single(); 32 |  33 |     if (reportError || !report) { 34 |       return NextResponse.json({ error: 'Session report not found' }, { status: 404 }); 35 |     } 36 |  37 |     const { data: fileData, error: fileError } = await supabase.storage 38 |       .from('session-reports') 39 |       .download(report.file_path); 40 |  41 |     if (fileError || !fileData) { 42 |       return NextResponse.json({ error: 'File not found' }, { status: 404 }); 43 |     } 44 |  45 |     const arrayBuffer = await fileData.arrayBuffer(); 46 |  47 |     return new NextResponse(arrayBuffer, { 48 |       headers: { 49 |         'Content-Type': report.mime_type || 'application/pdf', 50 |         'Content-Disposition': `attachment; filename="${report.original_filename || 'session-report.pdf'}"`, 51 |         'Content-Length': arrayBuffer.byteLength.toString() 52 |       } 53 |     }); 54 |  55 |   } catch (error) { 56 |     return NextResponse.json({ error: 'Internal server error' }, { status: 500 }); 57 |   } 58 | }
==================================================END: frontend/app/api/client/bookings/[id]/report/route.ts==================================================


==================================================FILE: frontend/app/api/client/bookings/route.tsSIZE: 13.21 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { z } from 'zod';  4 | import { prisma } from '@/lib/prisma';  5 | import { replacePlaceholders } from '@/lib/communication/placeholders';  6 |   7 | const createBookingSchema = z.object({  8 |   scheduleSlotId: z.number().int().positive('Schedule slot ID must be positive'),  9 |   userPackageId: z.number().int().positive('User package ID must be positive'), 10 |   sessionType: z.string().min(1, 'Session type is required').default('Session'), 11 |   notes: z.string().optional(), 12 |   otpCode: z.string().optional(), 13 |   phoneNumber: z.string().optional() 14 | }); 15 |  16 | const querySchema = z.object({ 17 |   status: z.enum(['upcoming', 'past', 'all']).default('all'), 18 |   page: z.coerce.number().int().min(1).default(1), 19 |   limit: z.coerce.number().int().min(1).max(50).default(20) 20 | }); 21 |  22 | export async function GET(request: NextRequest) { 23 |   try { 24 |     const user = await requireAuth(request); 25 |     if (!user) { 26 |       return NextResponse.json({ 27 |         success: false, 28 |         error: 'Unauthorized', 29 |         message: 'Authentication required' 30 |       }, { status: 401 }); 31 |     } 32 |  33 |     const { searchParams } = new URL(request.url); 34 |     const queryParams = Object.fromEntries(searchParams.entries()); 35 |     const validation = querySchema.safeParse(queryParams); 36 |  37 |     if (!validation.success) { 38 |       return NextResponse.json({ 39 |         success: false, 40 |         error: 'Invalid query parameters', 41 |         details: validation.error.issues 42 |       }, { status: 400 }); 43 |     } 44 |  45 |     const { status, page, limit } = validation.data; 46 |     const offset = (page - 1) * limit; 47 |  48 |     const where: Record<string, unknown> = { 49 |       userId: user.id 50 |     }; 51 |  52 |     if (status === 'upcoming') { 53 |       where.scheduleSlot = { 54 |         startTime: { gte: new Date() } 55 |       }; 56 |       where.status = 'confirmed'; 57 |     } else if (status === 'past') { 58 |       where.scheduleSlot = { 59 |         startTime: { lt: new Date() } 60 |       }; 61 |       where.status = 'completed'; 62 |     } 63 |  64 |     const [bookings, totalCount] = await Promise.all([ 65 |       prisma.booking.findMany({ 66 |         where, 67 |         select: { 68 |           id: true, 69 |           sessionType: true, 70 |           status: true, 71 |           notes: true, 72 |           cancelledReason: true, 73 |           reminderSent: true, 74 |           createdAt: true, 75 |           updatedAt: true, 76 |           scheduleSlot: { 77 |             select: { 78 |               id: true, 79 |               startTime: true, 80 |               endTime: true, 81 |               capacity: true, 82 |               bookedCount: true, 83 |               scheduleTemplate: { 84 |                 select: { 85 |                   dayOfWeek: true, 86 |                   sessionDuration: { 87 |                     select: { 88 |                       name: true, 89 |                       duration_minutes: true 90 |                     } 91 |                   } 92 |                 } 93 |               } 94 |             } 95 |           }, 96 |           userPackage: { 97 |             select: { 98 |               id: true, 99 |               quantity: true,100 |               sessionsUsed: true,101 |               isActive: true,102 |               expiresAt: true,103 |               packagePrice: {104 |                 select: {105 |                   price: true,106 |                   pricingMode: true,107 |                   packageDefinition: {108 |                     select: {109 |                       name: true,110 |                       description: true,111 |                       sessionsCount: true,112 |                       packageType: true113 |                     }114 |                   },115 |                   currency: {116 |                     select: {117 |                       code: true,118 |                       symbol: true119 |                     }120 |                   }121 |                 }122 |               }123 |             }124 |           }125 |         },126 |         skip: offset,127 |         take: limit,128 |         orderBy: [129 |           { scheduleSlot: { startTime: status === 'upcoming' ? 'asc' : 'desc' } }130 |         ]131 |       }),132 |       prisma.booking.count({ where })133 |     ]);134 | 135 |     const totalPages = Math.ceil(totalCount / limit);136 | 137 |     return NextResponse.json({138 |       success: true,139 |       data: bookings,140 |       pagination: {141 |         page,142 |         limit,143 |         total: totalCount,144 |         totalPages145 |       },146 |       message: 'Bookings fetched successfully'147 |     });148 | 149 |   } catch (error) {150 |     return NextResponse.json({151 |       success: false,152 |       error: 'Internal server error',153 |       message: 'Failed to fetch bookings',154 |       details: error instanceof Error ? error.message : 'Unknown error'155 |     }, { status: 500 });156 |   } finally {157 |     await prisma.$disconnect();158 |   }159 | }160 | 161 | export async function POST(request: NextRequest) {162 |   try {163 |     const user = await requireAuth(request);164 |     if (!user) {165 |       return NextResponse.json({166 |         success: false,167 |         error: 'Unauthorized',168 |         message: 'Authentication required'169 |       }, { status: 401 });170 |     }171 | 172 |     const body = await request.json();173 |     const validation = createBookingSchema.safeParse(body);174 | 175 |     if (!validation.success) {176 |       return NextResponse.json({177 |         success: false,178 |         error: 'Validation failed',179 |         message: 'Invalid booking data',180 |         details: validation.error.issues181 |       }, { status: 400 });182 |     }183 | 184 |     const { scheduleSlotId, userPackageId, sessionType, notes, otpCode, phoneNumber } = validation.data;185 | 186 |     const userPackage = await prisma.userPackage.findFirst({187 |       where: {188 |         id: userPackageId,189 |         userId: user.id,190 |         isActive: true191 |       },192 |       include: {193 |         packagePrice: {194 |           include: {195 |             packageDefinition: {196 |               select: {197 |                 sessionsCount: true198 |               }199 |             }200 |           }201 |         }202 |       }203 |     });204 | 205 |     if (!userPackage) {206 |       return NextResponse.json({207 |         success: false,208 |         error: 'Invalid package',209 |         message: 'Package not found or not active'210 |       }, { status: 400 });211 |     }212 | 213 |     const totalSessions = userPackage.packagePrice.packageDefinition.sessionsCount * (userPackage.quantity || 1);214 |     const remainingSessions = totalSessions - (userPackage.sessionsUsed || 0);215 | 216 |     if (remainingSessions <= 0) {217 |       return NextResponse.json({218 |         success: false,219 |         error: 'No sessions remaining',220 |         message: 'You have no sessions remaining in this package'221 |       }, { status: 400 });222 |     }223 | 224 |     if (otpCode && phoneNumber) {225 |       const otpVerification = await prisma.otpVerification.findFirst({226 |         where: {227 |           phoneNumber,228 |           otpCode,229 |           isVerified: true,230 |           expiresAt: {231 |             gt: new Date()232 |           }233 |         },234 |         orderBy: {235 |           createdAt: 'desc'236 |         }237 |       });238 | 239 |       if (!otpVerification) {240 |         return NextResponse.json({241 |           success: false,242 |           error: 'Invalid OTP',243 |           message: 'OTP code is invalid or has expired'244 |         }, { status: 400 });245 |       }246 |     }247 | 248 |     const scheduleSlot = await prisma.scheduleSlot.findFirst({249 |       where: {250 |         id: scheduleSlotId,251 |         isAvailable: true252 |       }253 |     });254 | 255 |     if (!scheduleSlot) {256 |       return NextResponse.json({257 |         success: false,258 |         error: 'Invalid schedule slot',259 |         message: 'Schedule slot not found or not available'260 |       }, { status: 400 });261 |     }262 | 263 |     if (scheduleSlot.bookedCount && scheduleSlot.capacity && scheduleSlot.bookedCount >= scheduleSlot.capacity) {264 |       return NextResponse.json({265 |         success: false,266 |         error: 'Slot full',267 |         message: 'This time slot is already full'268 |       }, { status: 400 });269 |     }270 | 271 |     const result = await prisma.$transaction(async (tx) => {272 | 273 |       const booking = await tx.booking.create({274 |         data: {275 |           userId: user.id,276 |           userPackageId: userPackageId,277 |           scheduleSlotId: scheduleSlotId,278 |           sessionType: sessionType,279 |           notes: notes,280 |           status: 'confirmed'281 |         },282 |         include: {283 |           scheduleSlot: {284 |             select: {285 |               id: true,286 |               startTime: true,287 |               endTime: true,288 |               scheduleTemplate: {289 |                 select: {290 |                   dayOfWeek: true,291 |                   sessionDuration: {292 |                     select: {293 |                       name: true,294 |                       duration_minutes: true295 |                     }296 |                   }297 |                 }298 |               }299 |             }300 |           },301 |           userPackage: {302 |             select: {303 |               id: true,304 |               sessionsUsed: true,305 |               packagePrice: {306 |                 select: {307 |                   packageDefinition: {308 |                     select: {309 |                       name: true,310 |                       sessionsCount: true311 |                     }312 |                   }313 |                 }314 |               }315 |             }316 |           }317 |         }318 |       });319 | 320 |       await tx.userPackage.update({321 |         where: { id: userPackageId },322 |         data: { sessionsUsed: { increment: 1 } }323 |       });324 | 325 |       await tx.scheduleSlot.update({326 |         where: { id: scheduleSlotId },327 |         data: { bookedCount: { increment: 1 } }328 |       });329 | 330 |       return booking;331 |     });332 | 333 |     try {334 | 335 |       const bookingTemplate = await prisma.communicationTemplate.findFirst({336 |         where: {337 |           templateKey: 'booking_confirmation',338 |           type: 'email',339 |           isActive: true340 |         },341 |         include: {342 |           translations: true343 |         }344 |       });345 | 346 |       if (bookingTemplate && user.email) {347 | 348 |         const userDetails = await prisma.user.findUnique({349 |           where: { id: user.id },350 |           select: {351 |             fullName: true,352 |             email: true,353 |             phone: true,354 |             birthDate: true,355 |             birthTime: true,356 |             birthPlace: true,357 |             language: true358 |           }359 |         });360 | 361 |         if (userDetails) {362 | 363 |           const templateData = {364 |             userName: userDetails.fullName || 'User',365 |             userEmail: userDetails.email || '',366 |             bookingId: result.id.toString(),367 |             language: userDetails.language || 'English',368 |             adminEmail: 'admin@soulpath.lat',369 |             submissionDate: new Date().toLocaleDateString(),370 |             birthDate: userDetails.birthDate?.toISOString().split('T')[0] || '',371 |             birthTime: userDetails.birthTime?.toString().substring(0, 5) || '',372 |             birthPlace: userDetails.birthPlace || '',373 |             clientQuestion: notes || 'No specific question provided',374 |             bookingDate: result.scheduleSlot.startTime.toISOString().split('T')[0],375 |             bookingTime: result.scheduleSlot.startTime.toTimeString().substring(0, 5),376 |             sessionType: sessionType377 |           };378 | 379 |           const userLanguage = userDetails.language?.toLowerCase() || 'en';380 |           const translation = bookingTemplate.translations.find(t =>381 |             t.language === userLanguage382 |           ) || bookingTemplate.translations[0];383 | 384 |           if (translation) {385 | 386 |             const subject = replacePlaceholders(translation.subject || '', templateData);387 |             const content = replacePlaceholders(translation.content || '', templateData);388 | 389 |             + '...'390 |             });391 |           }392 |         }393 |       }394 |     } catch (templateError) {395 | 396 |     }397 | 398 |     return NextResponse.json({399 |       success: true,400 |       data: result,401 |       message: 'Booking created successfully'402 |     }, { status: 201 });403 | 404 |   } catch (error) {405 |     return NextResponse.json({406 |       success: false,407 |       error: 'Internal server error',408 |       message: 'Failed to create booking',409 |       details: error instanceof Error ? error.message : 'Unknown error'410 |     }, { status: 500 });411 |   } finally {412 |     await prisma.$disconnect();413 |   }414 | }
==================================================END: frontend/app/api/client/bookings/route.ts==================================================


==================================================FILE: frontend/app/api/client/dashboard-stats/route.tsSIZE: 6.00 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { requireAuth } from '@/lib/auth';  4 | import { withCache } from '@/lib/cache';  5 | import { withApiOptimization } from '@/lib/middleware/performance';  6 |   7 | interface BookingData {  8 |   id: string;  9 |   status: string; 10 |   created_at: string; 11 |   rating?: number; 12 | } 13 |  14 | interface PurchaseData { 15 |   id: string; 16 |   total_amount: number; 17 |   payment_status: string; 18 |   purchased_at: string; 19 | } 20 |  21 | interface PackageWithDetails { 22 |   id: string; 23 |   is_active: boolean; 24 |   sessions_used: number; 25 |   quantity: number; 26 |   expires_at: string; 27 |   package_prices?: Array<{ 28 |     package_definitions?: Array<{ 29 |       name: string; 30 |       description?: string; 31 |       sessions_count: number; 32 |     }>; 33 |     price: number; 34 |     currency?: { 35 |       symbol: string; 36 |       code: string; 37 |     }; 38 |   }>; 39 | } 40 |  41 | async function handler(request: NextRequest) { 42 |   try { 43 |     const supabase = createClient( 44 |       process.env.NEXT_PUBLIC_SUPABASE_URL!, 45 |       process.env.SUPABASE_SERVICE_ROLE_KEY! 46 |     ); 47 |     const user = await requireAuth(request); 48 |  49 |     if (!user) { 50 |       return NextResponse.json( 51 |         { success: false, error: 'Unauthorized' }, 52 |         { status: 401 } 53 |       ); 54 |     } 55 |  56 |     const cacheKey = `dashboard-stats-${user.email}`; 57 |  58 |     return withCache( 59 |       cacheKey, 60 |       async () => { 61 |  62 |         const { data: customer, error: customerError } = await supabase 63 |           .from('users') 64 |           .select('id, email, created_at') 65 |           .eq('email', user.email) 66 |           .single(); 67 |  68 |         if (customerError || !customer) { 69 |           throw new Error('Customer not found'); 70 |         } 71 |  72 |     const [bookingsResult, packagesResult, purchasesResult] = await Promise.all([ 73 |       supabase 74 |         .from('bookings') 75 |         .select('id, status, created_at, completed_at, rating') 76 |         .eq('user_id', customer.id), 77 |       supabase 78 |         .from('user_packages') 79 |         .select(` 80 |           id, 81 |           is_active, 82 |           sessions_used, 83 |           quantity, 84 |           expires_at, 85 |           package_prices ( 86 |             package_definitions ( 87 |               name, 88 |               description, 89 |               sessions_count 90 |             ), 91 |             price, 92 |             currency ( 93 |               symbol, 94 |               code 95 |             ) 96 |           ) 97 |         `) 98 |         .eq('user_id', customer.id) 99 |         .returns<PackageWithDetails[]>(),100 |       supabase101 |         .from('purchases')102 |         .select(`103 |           id,104 |           total_amount,105 |           payment_status,106 |           purchased_at,107 |           payment_method108 |         `)109 |         .eq('user_id', customer.id)110 |     ]);111 | 112 |     if (bookingsResult.error) {113 |       return NextResponse.json(114 |         { success: false, error: 'Failed to fetch bookings' },115 |         { status: 500 }116 |       );117 |     }118 | 119 |     if (packagesResult.error) {120 |       return NextResponse.json(121 |         { success: false, error: 'Failed to fetch packages' },122 |         { status: 500 }123 |       );124 |     }125 | 126 |     if (purchasesResult.error) {127 |       return NextResponse.json(128 |         { success: false, error: 'Failed to fetch purchases' },129 |         { status: 500 }130 |       );131 |     }132 | 133 |     const bookings = bookingsResult.data;134 |     const packages = packagesResult.data;135 |     const purchases = purchasesResult.data;136 | 137 |     const totalBookings = bookings?.length || 0;138 |     const completedBookings = bookings?.filter((b: BookingData) => b.status === 'completed').length || 0;139 |     const upcomingBookings = bookings?.filter((b: BookingData) =>140 |       b.status === 'confirmed' && new Date(b.created_at) > new Date()141 |     ).length || 0;142 | 143 |     const activePackages = (packages as PackageWithDetails[])?.filter((p: PackageWithDetails) => {144 |       const packagePrice = p.package_prices?.[0];145 |       const sessionsCount = packagePrice?.package_definitions?.[0]?.sessions_count || 0;146 |       const totalSessions = sessionsCount * (p.quantity || 1);147 |       const sessionsRemaining = totalSessions - (p.sessions_used || 0);148 |       return p.is_active && sessionsRemaining > 0;149 |     }).length || 0;150 | 151 |     const totalSpent = purchases?.reduce((sum: number, purchase: PurchaseData) => {152 |       if (purchase.payment_status === 'completed') {153 |         return sum + (purchase.total_amount || 0);154 |       }155 |       return sum;156 |     }, 0) || 0;157 | 158 |     const averageRating = bookings?.length > 0159 |       ? bookings160 |           .filter((b: BookingData) => b.rating)161 |           .reduce((sum: number, b: BookingData) => sum + (b.rating || 0), 0) /162 |           bookings.filter((b: BookingData) => b.rating).length163 |       : 0;164 | 165 |     const loyaltyPoints = Math.floor(totalSpent / 10) + completedBookings;166 | 167 |     const stats = {168 |       totalBookings,169 |       activePackages,170 |       totalSpent,171 |       upcomingSessions: upcomingBookings,172 |       completedSessions: completedBookings,173 |       averageRating: Math.round(averageRating * 10) / 10,174 |       loyaltyPoints175 |     };176 | 177 |         return NextResponse.json({178 |           success: true,179 |           data: stats180 |         });181 |       },182 |       5 * 60 * 1000183 |     );184 | 185 |   } catch (error) {186 |     if (error instanceof Error && error.message === 'Customer not found') {187 |       return NextResponse.json(188 |         { success: false, error: 'Customer not found' },189 |         { status: 404 }190 |       );191 |     }192 |     return NextResponse.json(193 |       { success: false, error: 'Failed to fetch dashboard statistics' },194 |       { status: 500 }195 |     );196 |   }197 | }198 | 199 | export const GET = withApiOptimization(handler, {200 |   cache: true,201 |   cacheTTL: 300,202 |   compress: true,203 |   rateLimit: true,204 |   rateLimitMax: 50205 | });
==================================================END: frontend/app/api/client/dashboard-stats/route.ts==================================================


==================================================FILE: frontend/app/api/client/live-session/config/route.tsSIZE: 1.57 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { prisma } from '@/lib/prisma';  4 |   5 | export async function GET(request: NextRequest) {  6 |   try {  7 |     const user = await requireAuth(request);  8 |     if (!user) {  9 |       return NextResponse.json({ 10 |         success: false, 11 |         error: 'Unauthorized', 12 |         message: 'Authentication required' 13 |       }, { status: 401 }); 14 |     } 15 |  16 |     const config = { 17 |       id: 'live-session-1', 18 |       name: 'SoulPath Live Sessions', 19 |       provider: 'zoom' as const, 20 |       apiKey: process.env.ZOOM_API_KEY || '', 21 |       isActive: true, 22 |       settings: { 23 |         allowVideo: true, 24 |         allowAudio: true, 25 |         allowChat: true, 26 |         allowScreenShare: true, 27 |         maxParticipants: 10, 28 |         recordingEnabled: true 29 |       } 30 |     }; 31 |  32 |     return NextResponse.json({ 33 |       success: true, 34 |       data: config 35 |     }); 36 |  37 |   } catch (error) { 38 |     return NextResponse.json({ 39 |       success: false, 40 |       error: 'Internal server error', 41 |       message: 'Failed to load live session configuration' 42 |     }, { status: 500 }); 43 |   } finally { 44 |     await prisma.$disconnect(); 45 |   } 46 | }
==================================================END: frontend/app/api/client/live-session/config/route.ts==================================================


==================================================FILE: frontend/app/api/client/live-session/create-meeting/route.tsSIZE: 3.30 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { prisma } from '@/lib/prisma';  4 | import { z } from 'zod';  5 |   6 | const createMeetingSchema = z.object({  7 |   sessionId: z.string().min(1, 'Session ID is required'),  8 |   title: z.string().min(1, 'Title is required'),  9 |   duration: z.number().int().min(1, 'Duration must be at least 1 minute'), 10 |   settings: z.object({ 11 |     videoEnabled: z.boolean().default(true), 12 |     audioEnabled: z.boolean().default(true), 13 |     chatEnabled: z.boolean().default(true), 14 |     screenShareEnabled: z.boolean().default(false) 15 |   }).optional() 16 | }); 17 |  18 | export async function POST(request: NextRequest) { 19 |   try { 20 |     const user = await requireAuth(request); 21 |     if (!user) { 22 |       return NextResponse.json({ 23 |         success: false, 24 |         error: 'Unauthorized', 25 |         message: 'Authentication required' 26 |       }, { status: 401 }); 27 |     } 28 |  29 |     const body = await request.json(); 30 |     const validation = createMeetingSchema.safeParse(body); 31 |  32 |     if (!validation.success) { 33 |       return NextResponse.json({ 34 |         success: false, 35 |         error: 'Validation failed', 36 |         message: 'Invalid meeting data', 37 |         details: validation.error.issues 38 |       }, { status: 400 }); 39 |     } 40 |  41 |     const { title, duration, settings } = validation.data; 42 |  43 |     const meetingId = `meeting_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`; 44 |  45 |     const provider = process.env.LIVE_SESSION_PROVIDER || 'zoom'; 46 |     let meetingUrl = ''; 47 |  48 |     switch (provider) { 49 |       case 'zoom': 50 |         meetingUrl = `https: 51 |         break; 52 |       case 'meet': 53 |         meetingUrl = `https: 54 |         break; 55 |       case 'teams': 56 |         meetingUrl = `https: 57 |         break; 58 |       default: 59 |         meetingUrl = `https: 60 |     } 61 |  62 |     return NextResponse.json({ 63 |       success: true, 64 |       data: { 65 |         meetingId, 66 |         meetingUrl, 67 |         title, 68 |         duration, 69 |         settings: settings || { 70 |           videoEnabled: true, 71 |           audioEnabled: true, 72 |           chatEnabled: true, 73 |           screenShareEnabled: false 74 |         }, 75 |         createdAt: new Date().toISOString() 76 |       }, 77 |       message: 'Meeting created successfully' 78 |     }); 79 |  80 |   } catch (error) { 81 |     return NextResponse.json({ 82 |       success: false, 83 |       error: 'Internal server error', 84 |       message: 'Failed to create meeting' 85 |     }, { status: 500 }); 86 |   } finally { 87 |     await prisma.$disconnect(); 88 |   } 89 | }
==================================================END: frontend/app/api/client/live-session/create-meeting/route.ts==================================================


==================================================FILE: frontend/app/api/client/live-session/upcoming/route.tsSIZE: 2.53 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { prisma } from '@/lib/prisma';  4 |   5 | export async function GET(request: NextRequest) {  6 |   try {  7 |     const user = await requireAuth(request);  8 |     if (!user) {  9 |       return NextResponse.json({ 10 |         success: false, 11 |         error: 'Unauthorized', 12 |         message: 'Authentication required' 13 |       }, { status: 401 }); 14 |     } 15 |  16 |     const upcomingSessions = [ 17 |       { 18 |         id: 'session-1', 19 |         title: 'Spiritual Guidance Session', 20 |         description: 'One-on-one spiritual guidance and consultation', 21 |         startTime: new Date(Date.now() + 2 * 60 * 60 * 1000).toISOString(), 22 |         endTime: new Date(Date.now() + 3 * 60 * 60 * 1000).toISOString(), 23 |         duration: 60, 24 |         status: 'scheduled' as const, 25 |         participants: 1, 26 |         maxParticipants: 2 27 |       }, 28 |       { 29 |         id: 'session-2', 30 |         title: 'Group Meditation Session', 31 |         description: 'Guided group meditation and spiritual discussion', 32 |         startTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), 33 |         endTime: new Date(Date.now() + 25 * 60 * 60 * 1000).toISOString(), 34 |         duration: 90, 35 |         status: 'scheduled' as const, 36 |         participants: 3, 37 |         maxParticipants: 8 38 |       }, 39 |       { 40 |         id: 'session-3', 41 |         title: 'Live Q&A Session', 42 |         description: 'Ask questions and receive spiritual guidance', 43 |         startTime: new Date(Date.now() - 30 * 60 * 1000).toISOString(), 44 |         endTime: new Date(Date.now() + 30 * 60 * 1000).toISOString(), 45 |         duration: 60, 46 |         status: 'live' as const, 47 |         participants: 5, 48 |         maxParticipants: 10 49 |       } 50 |     ]; 51 |  52 |     return NextResponse.json({ 53 |       success: true, 54 |       data: upcomingSessions 55 |     }); 56 |  57 |   } catch (error) { 58 |     return NextResponse.json({ 59 |       success: false, 60 |       error: 'Internal server error', 61 |       message: 'Failed to load upcoming sessions' 62 |     }, { status: 500 }); 63 |   } finally { 64 |     await prisma.$disconnect(); 65 |   } 66 | }
==================================================END: frontend/app/api/client/live-session/upcoming/route.ts==================================================


==================================================FILE: frontend/app/api/client/me/route.tsSIZE: 4.90 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { z } from 'zod';  4 | import { prisma } from '@/lib/prisma';  5 |   6 | const updateUserProfileSchema = z.object({  7 |   fullName: z.string().min(1, 'Full name is required').max(255, 'Name too long'),  8 |   phone: z.string().optional(),  9 |   birthDate: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, 'Invalid date format (YYYY-MM-DD)').optional(), 10 |   birthTime: z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format (HH:MM)').optional(), 11 |   birthPlace: z.string().optional(), 12 |   question: z.string().optional(), 13 |   language: z.enum(['en', 'es']).default('en'), 14 |   notes: z.string().optional() 15 | }); 16 |  17 | export async function GET(request: NextRequest) { 18 |   try { 19 |     const user = await requireAuth(request); 20 |     if (!user) { 21 |       return NextResponse.json({ 22 |         success: false, 23 |         error: 'Unauthorized', 24 |         message: 'Authentication required' 25 |       }, { status: 401 }); 26 |     } 27 |  28 |     const userProfile = await prisma.user.findUnique({ 29 |       where: { id: user.id }, 30 |       select: { 31 |         id: true, 32 |         email: true, 33 |         fullName: true, 34 |         phone: true, 35 |         role: true, 36 |         status: true, 37 |         birthDate: true, 38 |         birthTime: true, 39 |         birthPlace: true, 40 |         question: true, 41 |         language: true, 42 |         adminNotes: true, 43 |         scheduledDate: true, 44 |         scheduledTime: true, 45 |         sessionType: true, 46 |         notes: true, 47 |         createdAt: true, 48 |         updatedAt: true, 49 |         _count: { 50 |           select: { 51 |             bookings: true, 52 |             purchases: true, 53 |             userPackages: true 54 |           } 55 |         } 56 |       } 57 |     }); 58 |  59 |     if (!userProfile) { 60 |       return NextResponse.json({ 61 |         success: false, 62 |         error: 'Profile not found', 63 |         message: 'User profile does not exist' 64 |       }, { status: 404 }); 65 |     } 66 |  67 |     return NextResponse.json({ 68 |       success: true, 69 |       data: userProfile 70 |     }); 71 |  72 |   } catch (error) { 73 |     return NextResponse.json({ 74 |       success: false, 75 |       error: 'Internal server error', 76 |       message: 'Failed to retrieve user profile', 77 |       details: error instanceof Error ? error.message : 'Unknown error' 78 |     }, { status: 500 }); 79 |   } finally { 80 |     await prisma.$disconnect(); 81 |   } 82 | } 83 |  84 | export async function PUT(request: NextRequest) { 85 |   try { 86 |     const user = await requireAuth(request); 87 |     if (!user) { 88 |       return NextResponse.json({ 89 |         success: false, 90 |         error: 'Unauthorized', 91 |         message: 'Authentication required' 92 |       }, { status: 401 }); 93 |     } 94 |  95 |     const body = await request.json(); 96 |     const validation = updateUserProfileSchema.safeParse(body); 97 |  98 |     if (!validation.success) { 99 |       return NextResponse.json({100 |         success: false,101 |         error: 'Validation failed',102 |         message: 'Invalid profile data',103 |         details: validation.error.issues104 |       }, { status: 400 });105 |     }106 | 107 |     const updateData = validation.data;108 | 109 |     const updatedProfile = await prisma.user.update({110 |       where: { id: user.id },111 |       data: {112 |         fullName: updateData.fullName,113 |         phone: updateData.phone,114 |         birthDate: updateData.birthDate,115 |         birthTime: updateData.birthTime,116 |         birthPlace: updateData.birthPlace,117 |         question: updateData.question,118 |         language: updateData.language,119 |         notes: updateData.notes120 |       },121 |       select: {122 |         id: true,123 |         email: true,124 |         fullName: true,125 |         phone: true,126 |         role: true,127 |         status: true,128 |         birthDate: true,129 |         birthTime: true,130 |         birthPlace: true,131 |         question: true,132 |         language: true,133 |         adminNotes: true,134 |         scheduledDate: true,135 |         scheduledTime: true,136 |         sessionType: true,137 |         notes: true,138 |         createdAt: true,139 |         updatedAt: true140 |       }141 |     });142 | 143 |     return NextResponse.json({144 |       success: true,145 |       message: 'Profile updated successfully',146 |       data: updatedProfile147 |     });148 | 149 |   } catch (error) {150 |     return NextResponse.json({151 |       success: false,152 |       error: 'Internal server error',153 |       message: 'Failed to update user profile',154 |       details: error instanceof Error ? error.message : 'Unknown error'155 |     }, { status: 500 });156 |   } finally {157 |     await prisma.$disconnect();158 |   }159 | }
==================================================END: frontend/app/api/client/me/route.ts==================================================


==================================================FILE: frontend/app/api/client/my-bookings/route.tsSIZE: 8.40 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { requireAuth } from '@/lib/auth';  4 |   5 | interface BookingData {  6 |   id: string;  7 |   date: string;  8 |   time: string;  9 |   status: string; 10 |   session_type: string; 11 |   price?: number; 12 |   notes?: string; 13 |   rating?: number; 14 |   feedback?: string; 15 |   created_at: string; 16 |   completed_at?: string; 17 |   customer_packages?: { 18 |     id: string; 19 |     package_definitions?: { 20 |       name: string; 21 |       description?: string; 22 |     }[]; 23 |   }[]; 24 |   schedules?: { 25 |     id: string; 26 |     session_type: string; 27 |     capacity: number; 28 |     booked_count: number; 29 |   }[]; 30 | } 31 |  32 | export async function GET(request: NextRequest) { 33 |   try { 34 |     const supabase = createClient( 35 |       process.env.NEXT_PUBLIC_SUPABASE_URL!, 36 |       process.env.SUPABASE_SERVICE_ROLE_KEY! 37 |     ); 38 |     const user = await requireAuth(request); 39 |  40 |     if (!user) { 41 |       return NextResponse.json( 42 |         { success: false, error: 'Unauthorized' }, 43 |         { status: 401 } 44 |       ); 45 |     } 46 |  47 |     const { data: customer, error: customerError } = await supabase 48 |       .from('customers') 49 |       .select('id, email') 50 |       .eq('email', user.email) 51 |       .single(); 52 |  53 |     if (customerError || !customer) { 54 |       return NextResponse.json( 55 |         { success: false, error: 'Customer not found' }, 56 |         { status: 404 } 57 |       ); 58 |     } 59 |  60 |     const { data: bookings, error: bookingsError } = await supabase 61 |       .from('bookings') 62 |       .select(` 63 |         id, 64 |         date, 65 |         time, 66 |         status, 67 |         session_type, 68 |         price, 69 |         notes, 70 |         rating, 71 |         feedback, 72 |         created_at, 73 |         completed_at, 74 |         customer_packages ( 75 |           id, 76 |           package_definitions ( 77 |             name, 78 |             description 79 |           ) 80 |         ), 81 |         schedules ( 82 |           id, 83 |           session_type, 84 |           capacity, 85 |           booked_count 86 |         ) 87 |       `) 88 |       .eq('customer_id', customer.id) 89 |       .order('date', { ascending: false }); 90 |  91 |     if (bookingsError) { 92 |       return NextResponse.json( 93 |         { success: false, error: 'Failed to fetch bookings' }, 94 |         { status: 500 } 95 |       ); 96 |     } 97 |  98 |     const transformedBookings = bookings?.map((booking: BookingData) => ({ 99 |       id: booking.id,100 |       date: booking.date,101 |       time: booking.time,102 |       status: booking.status,103 |       sessionType: booking.session_type,104 |       packageId: booking.customer_packages?.[0]?.id,105 |       packageName: booking.customer_packages?.[0]?.package_definitions?.[0]?.name,106 |       createdAt: booking.created_at107 |     })) || [];108 | 109 |     return NextResponse.json({110 |       success: true,111 |       data: transformedBookings112 |     });113 | 114 |   } catch (error) {115 |     return NextResponse.json(116 |       { success: false, error: 'Internal server error' },117 |       { status: 500 }118 |     );119 |   }120 | }121 | 122 | export async function POST(request: NextRequest) {123 |   try {124 |     const supabase = createClient(125 |       process.env.NEXT_PUBLIC_SUPABASE_URL!,126 |       process.env.SUPABASE_SERVICE_ROLE_KEY!127 |     );128 |     const user = await requireAuth(request);129 | 130 |     if (!user) {131 |       return NextResponse.json(132 |         { success: false, error: 'Unauthorized' },133 |         { status: 401 }134 |       );135 |     }136 | 137 |     const body = await request.json();138 |     const {139 |       packageId,140 |       scheduleId,141 |       clientName,142 |       clientEmail,143 |       clientPhone,144 |       birthDate,145 |       birthTime,146 |       birthPlace,147 |       question,148 |       specialRequests,149 |       language150 |     } = body;151 | 152 |     if (!packageId || !scheduleId || !clientName || !clientEmail || !birthDate || !birthPlace || !question) {153 |       return NextResponse.json(154 |         { success: false, error: 'Missing required fields' },155 |         { status: 400 }156 |       );157 |     }158 | 159 |     const { data: customer, error: customerError } = await supabase160 |       .from('customers')161 |       .select('id, email')162 |       .eq('email', user.email)163 |       .single();164 | 165 |     if (customerError || !customer) {166 |       return NextResponse.json(167 |         { success: false, error: 'Customer not found' },168 |         { status: 404 }169 |       );170 |     }171 | 172 |     const { data: packageData, error: packageError } = await supabase173 |       .from('customer_packages')174 |       .select(`175 |         id,176 |         sessions_remaining,177 |         status,178 |         package_definitions (179 |           name,180 |           session_duration_id181 |         )182 |       `)183 |       .eq('id', packageId)184 |       .eq('customer_id', customer.id)185 |       .single();186 | 187 |     if (packageError || !packageData) {188 |       return NextResponse.json(189 |         { success: false, error: 'Package not found or not owned by customer' },190 |         { status: 404 }191 |       );192 |     }193 | 194 |     if (packageData.status !== 'active') {195 |       return NextResponse.json(196 |         { success: false, error: 'Package is not active' },197 |         { status: 400 }198 |       );199 |     }200 | 201 |     if (packageData.sessions_remaining <= 0) {202 |       return NextResponse.json(203 |         { success: false, error: 'No sessions remaining in this package' },204 |         { status: 400 }205 |       );206 |     }207 | 208 |     const { data: schedule, error: scheduleError } = await supabase209 |       .from('schedules')210 |       .select('id, date, time, capacity, booked_count, is_available')211 |       .eq('id', scheduleId)212 |       .single();213 | 214 |     if (scheduleError || !schedule) {215 |       return NextResponse.json(216 |         { success: false, error: 'Schedule not found' },217 |         { status: 404 }218 |       );219 |     }220 | 221 |     if (!schedule.is_available || schedule.booked_count >= schedule.capacity) {222 |       return NextResponse.json(223 |         { success: false, error: 'Schedule is not available' },224 |         { status: 400 }225 |       );226 |     }227 | 228 |     const { data: existingBooking, error: existingBookingError } = await supabase229 |       .from('bookings')230 |       .select('id')231 |       .eq('customer_id', customer.id)232 |       .eq('schedule_id', scheduleId)233 |       .single();234 | 235 |     if (existingBooking && !existingBookingError) {236 |       return NextResponse.json(237 |         { success: false, error: 'You already have a booking for this schedule' },238 |         { status: 400 }239 |       );240 |     }241 | 242 |     const { data: newBooking, error: bookingCreateError } = await supabase243 |       .from('bookings')244 |       .insert({245 |         customer_id: customer.id,246 |         customer_package_id: packageId,247 |         schedule_id: scheduleId,248 |         date: schedule.date,249 |         time: schedule.time,250 |         status: 'pending',251 |         session_type: packageData.package_definitions?.[0]?.name || 'Standard Reading',252 |         client_name: clientName,253 |         client_email: clientEmail,254 |         client_phone: clientPhone,255 |         birth_date: birthDate,256 |         birth_time: birthTime,257 |         birth_place: birthPlace,258 |         question: question,259 |         special_requests: specialRequests,260 |         language: language261 |       })262 |       .select()263 |       .single();264 | 265 |     if (bookingCreateError) {266 |       return NextResponse.json(267 |         { success: false, error: 'Failed to create booking' },268 |         { status: 500 }269 |       );270 |     }271 | 272 |     const { error: scheduleUpdateError } = await supabase273 |       .from('schedules')274 |       .update({ booked_count: schedule.booked_count + 1 })275 |       .eq('id', scheduleId);276 | 277 |     if (scheduleUpdateError) {278 | 279 |     }280 | 281 |     const { error: packageUpdateError } = await supabase282 |       .from('customer_packages')283 |       .update({ sessions_remaining: packageData.sessions_remaining - 1 })284 |       .eq('id', packageId);285 | 286 |     if (packageUpdateError) {287 | 288 |     }289 | 290 |     return NextResponse.json({291 |       success: true,292 |       data: {293 |         booking: newBooking,294 |         message: 'Booking created successfully'295 |       }296 |     });297 | 298 |   } catch (error) {299 |     return NextResponse.json(300 |       { success: false, error: 'Internal server error' },301 |       { status: 500 }302 |     );303 |   }304 | }
==================================================END: frontend/app/api/client/my-bookings/route.ts==================================================


==================================================FILE: frontend/app/api/client/my-packages/route.tsSIZE: 5.50 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { z } from 'zod';  4 | import { prisma } from '@/lib/prisma';  5 |   6 | const querySchema = z.object({  7 |   isActive: z.enum(['true', 'false']).optional(),  8 |   hasRemainingSessions: z.enum(['true', 'false']).optional(),  9 |   page: z.coerce.number().int().min(1).default(1), 10 |   limit: z.coerce.number().int().min(1).max(50).default(20) 11 | }); 12 |  13 | export async function GET(request: NextRequest) { 14 |   try { 15 |     const user = await requireAuth(request); 16 |     if (!user) { 17 |       return NextResponse.json({ 18 |         success: false, 19 |         error: 'Unauthorized', 20 |         message: 'Authentication required' 21 |       }, { status: 401 }); 22 |     } 23 |  24 |     const { searchParams } = new URL(request.url); 25 |     const queryParams = Object.fromEntries(searchParams.entries()); 26 |     const validation = querySchema.safeParse(queryParams); 27 |  28 |     if (!validation.success) { 29 |       return NextResponse.json({ 30 |         success: false, 31 |         error: 'Invalid query parameters', 32 |         details: validation.error.issues 33 |       }, { status: 400 }); 34 |     } 35 |  36 |     const { isActive, hasRemainingSessions, page, limit } = validation.data; 37 |     const offset = (page - 1) * limit; 38 |  39 |     const where: Record<string, unknown> = { 40 |       userId: user.id 41 |     }; 42 |  43 |     if (isActive !== undefined) { 44 |       where.isActive = isActive === 'true'; 45 |     } 46 |  47 |     const [userPackages, totalCount] = await Promise.all([ 48 |       prisma.userPackage.findMany({ 49 |         where, 50 |         select: { 51 |           id: true, 52 |           quantity: true, 53 |           sessionsUsed: true, 54 |           isActive: true, 55 |           expiresAt: true, 56 |           createdAt: true, 57 |           updatedAt: true, 58 |           purchase: { 59 |             select: { 60 |               id: true, 61 |               totalAmount: true, 62 |               paymentStatus: true, 63 |               purchasedAt: true 64 |             } 65 |           }, 66 |           packagePrice: { 67 |             select: { 68 |               id: true, 69 |               price: true, 70 |               pricingMode: true, 71 |               packageDefinition: { 72 |                 select: { 73 |                   id: true, 74 |                   name: true, 75 |                   description: true, 76 |                   sessionsCount: true, 77 |                   packageType: true, 78 |                   maxGroupSize: true, 79 |                   sessionDuration: { 80 |                     select: { 81 |                       id: true, 82 |                       name: true, 83 |                       duration_minutes: true, 84 |                       description: true 85 |                     } 86 |                   } 87 |                 } 88 |               }, 89 |               currency: { 90 |                 select: { 91 |                   id: true, 92 |                   code: true, 93 |                   name: true, 94 |                   symbol: true 95 |                 } 96 |               } 97 |             } 98 |           } 99 |         },100 |         skip: offset,101 |         take: limit,102 |         orderBy: { createdAt: 'desc' }103 |       }),104 |       prisma.userPackage.count({ where })105 |     ]);106 | 107 |     const transformedPackages = userPackages.map((pkg) => {108 |       const totalSessions = pkg.packagePrice.packageDefinition.sessionsCount * (pkg.quantity || 1);109 |       const sessionsRemaining = totalSessions - (pkg.sessionsUsed || 0);110 | 111 |       return {112 |         id: pkg.id,113 |         name: pkg.packagePrice.packageDefinition.name,114 |         description: pkg.packagePrice.packageDefinition.description,115 |         sessionsRemaining,116 |         totalSessions,117 |         sessionsUsed: pkg.sessionsUsed,118 |         quantity: pkg.quantity,119 |         expiresAt: pkg.expiresAt,120 |         isActive: pkg.isActive,121 |         purchaseDate: pkg.purchase.purchasedAt,122 |         price: pkg.packagePrice.price,123 |         sessionDuration: pkg.packagePrice.packageDefinition.sessionDuration.duration_minutes,124 |         packageType: pkg.packagePrice.packageDefinition.packageType,125 |         maxGroupSize: pkg.packagePrice.packageDefinition.maxGroupSize,126 |         currency: pkg.packagePrice.currency.symbol,127 |         currencyCode: pkg.packagePrice.currency.code,128 |         paymentStatus: pkg.purchase.paymentStatus,129 |         totalAmount: pkg.purchase.totalAmount130 |       };131 |     });132 | 133 |     let filteredPackages = transformedPackages;134 |     if (hasRemainingSessions === 'true') {135 |       filteredPackages = transformedPackages.filter(pkg => pkg.sessionsRemaining > 0);136 |     } else if (hasRemainingSessions === 'false') {137 |       filteredPackages = transformedPackages.filter(pkg => pkg.sessionsRemaining <= 0);138 |     }139 | 140 |     const totalPages = Math.ceil(totalCount / limit);141 | 142 |     return NextResponse.json({143 |       success: true,144 |       data: filteredPackages,145 |       pagination: {146 |         page,147 |         limit,148 |         total: totalCount,149 |         totalPages150 |       }151 |     });152 | 153 |   } catch (error) {154 |     return NextResponse.json({155 |       success: false,156 |       error: 'Internal server error',157 |       message: 'Failed to fetch user packages',158 |       details: error instanceof Error ? error.message : 'Unknown error'159 |     }, { status: 500 });160 |   } finally {161 |     await prisma.$disconnect();162 |   }163 | }
==================================================END: frontend/app/api/client/my-packages/route.ts==================================================


==================================================FILE: frontend/app/api/client/packages/route.tsSIZE: 3.63 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { z } from 'zod';  4 | import { prisma } from '@/lib/prisma';  5 |   6 | const querySchema = z.object({  7 |   currency: z.string().length(3).optional(),  8 |   packageType: z.string().optional(),  9 |   page: z.coerce.number().int().min(1).default(1), 10 |   limit: z.coerce.number().int().min(1).max(50).default(20) 11 | }); 12 |  13 | export async function GET(request: NextRequest) { 14 |   try { 15 |     const user = await requireAuth(request); 16 |     if (!user) { 17 |       return NextResponse.json({ 18 |         success: false, 19 |         error: 'Unauthorized', 20 |         message: 'Authentication required' 21 |       }, { status: 401 }); 22 |     } 23 |  24 |     const { searchParams } = new URL(request.url); 25 |     const queryParams = Object.fromEntries(searchParams.entries()); 26 |     const validation = querySchema.safeParse(queryParams); 27 |  28 |     if (!validation.success) { 29 |       return NextResponse.json({ 30 |         success: false, 31 |         error: 'Invalid query parameters', 32 |         details: validation.error.issues 33 |       }, { status: 400 }); 34 |     } 35 |  36 |     const { currency, packageType, page, limit } = validation.data; 37 |     const offset = (page - 1) * limit; 38 |  39 |     const where: Record<string, unknown> = { 40 |       isActive: true 41 |     }; 42 |  43 |     if (packageType) { 44 |       where.packageType = packageType; 45 |     } 46 |  47 |     const [packageDefinitions, totalCount] = await Promise.all([ 48 |       prisma.packageDefinition.findMany({ 49 |         where, 50 |         select: { 51 |           id: true, 52 |           name: true, 53 |           description: true, 54 |           sessionsCount: true, 55 |           packageType: true, 56 |           maxGroupSize: true, 57 |           isActive: true, 58 |           createdAt: true, 59 |           updatedAt: true, 60 |           sessionDuration: { 61 |             select: { 62 |               id: true, 63 |               name: true, 64 |               duration_minutes: true, 65 |               description: true 66 |             } 67 |           }, 68 |           packagePrices: { 69 |             where: { 70 |               isActive: true, 71 |               ...(currency && { currency: { code: currency } }) 72 |             }, 73 |             select: { 74 |               id: true, 75 |               price: true, 76 |               pricingMode: true, 77 |               isActive: true, 78 |               currency: { 79 |                 select: { 80 |                   id: true, 81 |                   code: true, 82 |                   name: true, 83 |                   symbol: true 84 |                 } 85 |               } 86 |             }, 87 |             orderBy: { price: 'asc' } 88 |           } 89 |         }, 90 |         skip: offset, 91 |         take: limit, 92 |         orderBy: { name: 'asc' } 93 |       }), 94 |       prisma.packageDefinition.count({ where }) 95 |     ]); 96 |  97 |     const totalPages = Math.ceil(totalCount / limit); 98 |  99 |     return NextResponse.json({100 |       success: true,101 |       data: packageDefinitions,102 |       pagination: {103 |         page,104 |         limit,105 |         total: totalCount,106 |         totalPages107 |       }108 |     });109 | 110 |   } catch (error) {111 |     return NextResponse.json({112 |       success: false,113 |       error: 'Internal server error',114 |       message: 'Failed to fetch packages',115 |       details: error instanceof Error ? error.message : 'Unknown error'116 |     }, { status: 500 });117 |   } finally {118 |     await prisma.$disconnect();119 |   }120 | }
==================================================END: frontend/app/api/client/packages/route.ts==================================================


==================================================FILE: frontend/app/api/client/payment-methods/route.tsSIZE: 1.73 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET() {  5 |   try {  6 |   7 |     const paymentMethods = await prisma.paymentMethodConfig.findMany({  8 |       where: {  9 |         isActive: true 10 |       }, 11 |       select: { 12 |         id: true, 13 |         name: true, 14 |         type: true, 15 |         description: true, 16 |         icon: true, 17 |         requiresConfirmation: true, 18 |         autoAssignPackage: true, 19 |         isActive: true 20 |       }, 21 |       orderBy: { name: 'asc' } 22 |     }); 23 |  24 |     const transformedMethods = paymentMethods.map(method => ({ 25 |       id: method.id, 26 |       name: method.name, 27 |       type: method.type || 'custom', 28 |       description: method.description || '', 29 |       icon: method.icon || 'https: 30 |       requiresConfirmation: method.requiresConfirmation || false, 31 |       autoAssignPackage: method.autoAssignPackage || true, 32 |       isActive: method.isActive || true 33 |     })); 34 |  35 |     return NextResponse.json({ 36 |       success: true, 37 |       data: transformedMethods 38 |     }); 39 |  40 |   } catch (error) { 41 |     return NextResponse.json({ 42 |       success: false, 43 |       error: 'Internal server error', 44 |       message: 'Failed to fetch payment methods', 45 |       details: error instanceof Error ? error.message : 'Unknown error' 46 |     }, { status: 500 }); 47 |   } finally { 48 |     await prisma.$disconnect(); 49 |   } 50 | }
==================================================END: frontend/app/api/client/payment-methods/route.ts==================================================


==================================================FILE: frontend/app/api/client/purchase/route.tsSIZE: 10.12 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { prisma } from '@/lib/prisma';  4 | import { z } from 'zod';  5 | import { createEmailService } from '@/lib/brevo-email-service';  6 |   7 | const createPurchaseSchema = z.object({  8 |   packagePriceId: z.number().int('Invalid package price ID'),  9 |   paymentMethodId: z.number().int('Invalid payment method ID'), 10 |   quantity: z.number().int().min(1, 'Quantity must be at least 1').default(1), 11 |   notes: z.string().optional(), 12 |   paymentToken: z.string().optional() 13 | }); 14 |  15 | export async function GET() { 16 |  17 |   return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); 18 | } 19 |  20 | export async function POST(request: NextRequest) { 21 |   try { 22 |     const user = await requireAuth(request); 23 |     if (!user) { 24 |       return NextResponse.json({ 25 |         success: false, 26 |         error: 'Unauthorized', 27 |         message: 'Authentication required' 28 |       }, { status: 401 }); 29 |     } 30 |  31 |     const body = await request.json(); 32 |     const validation = createPurchaseSchema.safeParse(body); 33 |  34 |     if (!validation.success) { 35 |       return NextResponse.json({ 36 |         success: false, 37 |         error: 'Validation failed', 38 |         message: 'Invalid purchase data', 39 |         details: validation.error.issues 40 |       }, { status: 400 }); 41 |     } 42 |  43 |     const { packagePriceId, paymentMethodId, quantity, notes, paymentToken } = validation.data; 44 |  45 |     const packagePrice = await prisma.packagePrice.findUnique({ 46 |       where: { id: packagePriceId }, 47 |       include: { 48 |         packageDefinition: { 49 |           select: { 50 |             id: true, 51 |             name: true, 52 |             description: true, 53 |             sessionsCount: true, 54 |             isActive: true 55 |           } 56 |         }, 57 |         currency: { 58 |           select: { 59 |             id: true, 60 |             code: true, 61 |             symbol: true, 62 |             name: true 63 |           } 64 |         } 65 |       } 66 |     }); 67 |  68 |     if (!packagePrice) { 69 |       return NextResponse.json({ 70 |         success: false, 71 |         error: 'Package not found', 72 |         message: 'The specified package price does not exist' 73 |       }, { status: 404 }); 74 |     } 75 |  76 |     if (!packagePrice.packageDefinition.isActive) { 77 |       return NextResponse.json({ 78 |         success: false, 79 |         error: 'Package inactive', 80 |         message: 'This package is currently not available for purchase' 81 |       }, { status: 400 }); 82 |     } 83 |  84 |     const paymentMethod = await prisma.paymentMethodConfig.findUnique({ 85 |       where: { id: paymentMethodId }, 86 |       select: { 87 |         id: true, 88 |         type: true, 89 |         name: true, 90 |         description: true, 91 |         icon: true, 92 |         isActive: true, 93 |         requiresConfirmation: true, 94 |         autoAssignPackage: true, 95 |         providerConfig: true 96 |       } 97 |     }); 98 |  99 |     if (!paymentMethod || !paymentMethod.isActive) {100 |       return NextResponse.json({101 |         success: false,102 |         error: 'Payment method not found',103 |         message: 'The specified payment method is not available'104 |       }, { status: 404 });105 |     }106 | 107 |     const totalAmount = Number(packagePrice.price) * quantity;108 | 109 |     const purchase = await prisma.purchase.create({110 |       data: {111 |         userId: user.id,112 |         totalAmount: totalAmount,113 |         currencyCode: packagePrice.currency.code,114 |         paymentMethod: paymentMethod.name,115 |         paymentStatus: 'pending',116 |         notes: notes117 |       }118 |     });119 | 120 |     if (paymentMethod.type === 'izipay' && paymentToken) {121 |       try {122 |         const izipayConfig = (paymentMethod.providerConfig as Record<string, unknown>)?.izipayConfig;123 | 124 |         if (!izipayConfig || !(izipayConfig as Record<string, unknown>).username || !(izipayConfig as Record<string, unknown>).password) {125 |           throw new Error('Izipay configuration is incomplete');126 |         }127 | 128 |         const credentials = Buffer.from(`${(izipayConfig as Record<string, unknown>).username}:${(izipayConfig as Record<string, unknown>).password}`).toString('base64');129 | 130 |         const izipayPayload = {131 |           amount: Math.round(totalAmount * 100),132 |           currency: packagePrice.currency.code,133 |           paymentToken: paymentToken,134 |           customer: {135 |             email: user.email,136 |             name: user.email,137 |           },138 |           orderId: purchase.id.toString(),139 |           metadata: {140 |             packageName: packagePrice.packageDefinition.name,141 |             quantity: quantity.toString(),142 |             userId: user.id.toString()143 |           }144 |         };145 | 146 |         const izipayResponse = await fetch('https:147 |           method: 'POST',148 |           headers: {149 |             'Authorization': `Basic ${credentials}`,150 |             'Content-Type': 'application/json',151 |             'Accept': 'application/json'152 |           },153 |           body: JSON.stringify(izipayPayload)154 |         });155 | 156 |         const izipayResult = await izipayResponse.json();157 |         if (izipayResponse.ok && izipayResult.status === 'SUCCESS') {158 | 159 |           await prisma.purchase.update({160 |             where: { id: purchase.id },161 |             data: {162 |               paymentStatus: 'completed',163 |               transactionId: izipayResult.transactionId || paymentToken,164 |               purchasedAt: new Date()165 |             }166 |           });167 | 168 |           } else {169 | 170 |           await prisma.purchase.update({171 |             where: { id: purchase.id },172 |             data: {173 |               paymentStatus: 'failed',174 |               notes: `Payment failed: ${izipayResult.errorMessage || 'Unknown error'}`175 |             }176 |           });177 | 178 |           throw new Error(izipayResult.errorMessage || 'Payment processing failed');179 |         }180 |       } catch (error: unknown) {181 | 182 |         await prisma.purchase.update({183 |           where: { id: purchase.id },184 |           data: {185 |             paymentStatus: 'failed',186 |             notes: `Payment error: ${error instanceof Error ? error.message : 'Unknown error'}`187 |           }188 |         });189 | 190 |         return NextResponse.json({191 |           success: false,192 |           error: 'Payment failed',193 |           message: error instanceof Error ? error.message : 'Payment processing failed'194 |         }, { status: 400 });195 |       }196 |     }197 | 198 |     let userPackage = null;199 |     if (paymentMethod.autoAssignPackage) {200 |       userPackage = await prisma.userPackage.create({201 |         data: {202 |           userId: user.id,203 |           purchaseId: purchase.id,204 |           packagePriceId: packagePriceId,205 |           quantity: quantity,206 |           sessionsUsed: 0,207 |           isActive: true,208 |           expiresAt: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000)209 |         },210 |         include: {211 |           packagePrice: {212 |             include: {213 |               packageDefinition: true214 |             }215 |           }216 |         }217 |       });218 |       }219 | 220 |     try {221 |       const emailService = await createEmailService();222 |       if (emailService) {223 |         const replacements = {224 |           client_name: user.email,225 |           package_name: packagePrice.packageDefinition.name,226 |           quantity: quantity.toString(),227 |           total_amount: `${packagePrice.currency.symbol}${totalAmount.toFixed(2)}`,228 |           payment_method: paymentMethod.name,229 |           purchase_date: new Date().toLocaleDateString(),230 |           sessions_count: packagePrice.packageDefinition.sessionsCount.toString()231 |         };232 | 233 |         await emailService.sendTemplateEmail(234 |           user.email,235 |           'purchase_confirmation',236 |           'Purchase Confirmation - SoulPath',237 |           replacements238 |         );239 |         }240 |     } catch (emailError) {241 | 242 |     }243 | 244 |     return NextResponse.json({245 |       success: true,246 |       data: {247 |         purchase: {248 |           id: purchase.id,249 |           totalAmount: purchase.totalAmount,250 |           currencyCode: purchase.currencyCode,251 |           paymentMethod: purchase.paymentMethod,252 |           paymentStatus: purchase.paymentStatus,253 |           notes: purchase.notes,254 |           purchasedAt: purchase.purchasedAt,255 |           package: {256 |             name: packagePrice.packageDefinition.name,257 |             description: packagePrice.packageDefinition.description,258 |             sessionsCount: packagePrice.packageDefinition.sessionsCount259 |           },260 |           paymentMethodDetails: {261 |             name: paymentMethod.name,262 |             type: paymentMethod.type263 |           },264 |           currency: {265 |             symbol: packagePrice.currency.symbol,266 |             code: packagePrice.currency.code267 |           }268 |         },269 |         userPackage: userPackage ? {270 |           id: userPackage.id,271 |           sessionsUsed: userPackage.sessionsUsed,272 |           isActive: userPackage.isActive,273 |           quantity: userPackage.quantity274 |         } : null275 |       },276 |       message: 'Purchase created successfully'277 |     });278 | 279 |   } catch (error) {280 |     return NextResponse.json({281 |       success: false,282 |       error: 'Internal server error',283 |       message: 'Failed to process purchase'284 |     }, { status: 500 });285 |   } finally {286 |     await prisma.$disconnect();287 |   }288 | }
==================================================END: frontend/app/api/client/purchase/route.ts==================================================


==================================================FILE: frontend/app/api/client/purchase-history/route.tsSIZE: 2.93 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { requireAuth } from '@/lib/auth';  4 |   5 | interface PurchaseWithDetails {  6 |   id: string;  7 |   created_at: string;  8 |   amount: number;  9 |   status: string; 10 |   transaction_id?: string; 11 |   package_definitions?: Array<{ 12 |     id: string; 13 |     name: string; 14 |     description?: string; 15 |     sessions_count?: number; 16 |   }>; 17 |   payment_methods?: Array<{ 18 |     id: string; 19 |     name: string; 20 |     description?: string; 21 |   }>; 22 |   currencies?: Array<{ 23 |     symbol: string; 24 |     code: string; 25 |     name?: string; 26 |   }>; 27 | } 28 |  29 | export async function GET(request: NextRequest) { 30 |   try { 31 |     const supabase = createClient( 32 |       process.env.NEXT_PUBLIC_SUPABASE_URL!, 33 |       process.env.SUPABASE_SERVICE_ROLE_KEY! 34 |     ); 35 |     const user = await requireAuth(request); 36 |  37 |     if (!user) { 38 |       return NextResponse.json( 39 |         { success: false, error: 'Unauthorized' }, 40 |         { status: 401 } 41 |       ); 42 |     } 43 |  44 |     const { data: customer, error: customerError } = await supabase 45 |       .from('customers') 46 |       .select('id, email') 47 |       .eq('email', user.email) 48 |       .single(); 49 |  50 |     if (customerError || !customer) { 51 |       return NextResponse.json( 52 |         { success: false, error: 'Customer not found' }, 53 |         { status: 404 } 54 |       ); 55 |     } 56 |  57 |     const { data: purchases, error: purchasesError } = await supabase 58 |       .from('purchases') 59 |       .select(` 60 |         id, 61 |         created_at, 62 |         amount, 63 |         status, 64 |         transaction_id, 65 |         payment_methods ( 66 |           id, 67 |           name, 68 |           description 69 |         ), 70 |         package_definitions ( 71 |           id, 72 |           name, 73 |           description, 74 |           sessions_count 75 |         ), 76 |         currencies ( 77 |           symbol, 78 |           code, 79 |           name 80 |         ) 81 |       `) 82 |       .eq('customer_id', customer.id) 83 |       .order('created_at', { ascending: false }) 84 |       .returns<PurchaseWithDetails[]>(); 85 |  86 |     if (purchasesError) { 87 |       return NextResponse.json( 88 |         { success: false, error: 'Failed to fetch purchase history' }, 89 |         { status: 500 } 90 |       ); 91 |     } 92 |  93 |     const transformedPurchases = (purchases as PurchaseWithDetails[])?.map((purchase: PurchaseWithDetails) => ({ 94 |       id: purchase.id, 95 |       date: purchase.created_at, 96 |       packageName: purchase.package_definitions?.[0]?.name || 'Unknown Package', 97 |       amount: purchase.amount, 98 |       status: purchase.status, 99 |       paymentMethod: purchase.payment_methods?.[0]?.name || 'Unknown'100 |     })) || [];101 | 102 |     return NextResponse.json({103 |       success: true,104 |       data: transformedPurchases105 |     });106 | 107 |   } catch (error) {108 |     return NextResponse.json(109 |       { success: false, error: 'Internal server error' },110 |       { status: 500 }111 |     );112 |   }113 | }
==================================================END: frontend/app/api/client/purchase-history/route.ts==================================================


==================================================FILE: frontend/app/api/client/schedule-slots/route.tsSIZE: 4.48 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { requireAuth } from '@/lib/auth';  3 | import { z } from 'zod';  4 | import { prisma } from '@/lib/prisma';  5 |   6 | const querySchema = z.object({  7 |   dateFrom: z.string().datetime().optional(),  8 |   dateTo: z.string().datetime().optional(),  9 |   isAvailable: z.enum(['true', 'false']).optional(), 10 |   page: z.coerce.number().int().min(1).default(1), 11 |   limit: z.coerce.number().int().min(1).max(50).default(20) 12 | }); 13 |  14 | export async function GET(request: NextRequest) { 15 |   try { 16 |     const user = await requireAuth(request); 17 |     if (!user) { 18 |       return NextResponse.json({ 19 |         success: false, 20 |         error: 'Unauthorized', 21 |         message: 'Authentication required' 22 |       }, { status: 401 }); 23 |     } 24 |  25 |     const { searchParams } = new URL(request.url); 26 |     const queryParams = Object.fromEntries(searchParams.entries()); 27 |     const validation = querySchema.safeParse(queryParams); 28 |  29 |     if (!validation.success) { 30 |       return NextResponse.json({ 31 |         success: false, 32 |         error: 'Invalid query parameters', 33 |         details: validation.error.issues 34 |       }, { status: 400 }); 35 |     } 36 |  37 |     const { dateFrom, dateTo, isAvailable, page, limit } = validation.data; 38 |     const offset = (page - 1) * limit; 39 |  40 |     const where: Record<string, unknown> = { 41 |       isAvailable: true 42 |     }; 43 |  44 |     if (dateFrom) { 45 |       where.startTime = { gte: new Date(dateFrom) }; 46 |     } 47 |     if (dateTo) { 48 |       where.startTime = { 49 |         ...(where.startTime || {}), 50 |         lte: new Date(dateTo) 51 |       }; 52 |     } 53 |     if (isAvailable !== undefined) { 54 |       where.isAvailable = isAvailable === 'true'; 55 |     } 56 |  57 |     where.startTime = { 58 |       ...(where.startTime || {}), 59 |       gte: new Date() 60 |     }; 61 |  62 |     const [scheduleSlots, totalCount] = await Promise.all([ 63 |       prisma.scheduleSlot.findMany({ 64 |         where, 65 |         select: { 66 |           id: true, 67 |           startTime: true, 68 |           endTime: true, 69 |           capacity: true, 70 |           bookedCount: true, 71 |           isAvailable: true, 72 |           scheduleTemplate: { 73 |             select: { 74 |               id: true, 75 |               dayOfWeek: true, 76 |               startTime: true, 77 |               endTime: true, 78 |               capacity: true, 79 |               sessionDuration: { 80 |                 select: { 81 |                   id: true, 82 |                   name: true, 83 |                   duration_minutes: true 84 |                 } 85 |               } 86 |             } 87 |           }, 88 |           _count: { 89 |             select: { 90 |               bookings: true 91 |             } 92 |           } 93 |         }, 94 |         skip: offset, 95 |         take: limit, 96 |         orderBy: { startTime: 'asc' } 97 |       }), 98 |       prisma.scheduleSlot.count({ where }) 99 |     ]);100 | 101 |     const transformedSlots = scheduleSlots.map(slot => ({102 |       id: slot.id.toString(),103 |       date: slot.startTime.toISOString().split('T')[0],104 |       time: slot.startTime.toTimeString().split(' ')[0].substring(0, 5),105 |       isAvailable: slot.isAvailable && (slot.bookedCount || 0) < (slot.capacity || 1),106 |       capacity: slot.capacity || 1,107 |       bookedCount: slot.bookedCount || 0,108 |       sessionType: slot.scheduleTemplate.sessionDuration?.name || 'Session',109 |       price: 0,110 |       duration: slot.scheduleTemplate.sessionDuration?.duration_minutes || 60,111 |       startTime: slot.startTime.toISOString(),112 |       endTime: slot.endTime.toISOString()113 |     }));114 | 115 |     const totalPages = Math.ceil(totalCount / limit);116 | 117 |     return NextResponse.json({118 |       success: true,119 |       data: transformedSlots,120 |       pagination: {121 |         page,122 |         limit,123 |         total: totalCount,124 |         totalPages125 |       }126 |     });127 | 128 |   } catch (error) {129 |     return NextResponse.json({130 |       success: false,131 |       error: 'Internal server error',132 |       message: 'Failed to fetch schedule slots',133 |       details: error instanceof Error ? error.message : 'Unknown error'134 |     }, { status: 500 });135 |   } finally {136 |     await prisma.$disconnect();137 |   }138 | }
==================================================END: frontend/app/api/client/schedule-slots/route.ts==================================================


==================================================FILE: frontend/app/api/content/route.tsSIZE: 17.12 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import { withCache } from '@/lib/cache';  4 |   5 | export const revalidate = 3600;  6 |   7 | interface NestedContent {  8 |   [key: string]: string | NestedContent | Array<{ title: string; text: string }>;  9 | } 10 |  11 | interface TransformedContent { 12 |   en: NestedContent; 13 |   es: NestedContent; 14 | } 15 |  16 | function transformFlatContentToNested(flatContent: Record<string, string>): TransformedContent { 17 |   const nestedContent: TransformedContent = { 18 |     en: {} as NestedContent, 19 |     es: {} as NestedContent 20 |   }; 21 |  22 |   if (flatContent) { 23 |  24 |     nestedContent.en.hero = { 25 |       title: flatContent.heroTitleEn || 'MatMax Yoga Studio', 26 |       tagline: 'Transform your life through spiritual guidance and healing', 27 |       description: 'Experience profound transformation through personalized spiritual sessions, energy healing, and guidance on your journey to inner peace and self-discovery.', 28 |       ctaPrimary: 'Book Your Session', 29 |       ctaSecondary: 'Learn More', 30 |       subtitle: flatContent.heroSubtitleEn || 'Your journey to wellness starts here' 31 |     }; 32 |     nestedContent.es.hero = { 33 |       title: flatContent.heroTitleEs || 'MatMax Yoga Studio', 34 |       tagline: 'Transforma tu vida a través de la guía espiritual y la sanación', 35 |       description: 'Experimenta una transformación profunda a través de sesiones espirituales personalizadas, sanación energética y guía en tu camino hacia la paz interior y el autodescubrimiento.', 36 |       ctaPrimary: 'Reserva tu Sesión', 37 |       ctaSecondary: 'Conoce Más', 38 |       subtitle: flatContent.heroSubtitleEs || 'Tu camino al bienestar comienza aquí' 39 |     }; 40 |  41 |     nestedContent.en.about = { 42 |       title: flatContent.aboutTitleEn || 'About MatMax Yoga Studio', 43 |       text: flatContent.aboutContentEn || 'MatMax Yoga Studio is dedicated to helping people build strength, flexibility, and inner peace through mindful movement and breath. Our classes support wellbeing and balance for all levels.', 44 |       description: flatContent.aboutContentEn || 'MatMax Yoga Studio is dedicated to helping people build strength, flexibility, and inner peace through mindful movement and breath. Our classes support wellbeing and balance for all levels.', 45 |       statsClients: 'Clients Helped', 46 |       statsYears: 'Years Experience', 47 |       statsSessions: 'Sessions Completed', 48 |       statsCountries: 'Countries Served', 49 |       valuesTitle: 'Our Core Values', 50 |       value1Title: 'Compassion', 51 |       value1Description: 'We approach every client with deep empathy and understanding, creating a safe space for healing and growth.', 52 |       value2Title: 'Authenticity', 53 |       value2Description: 'Our guidance comes from genuine spiritual wisdom and personal experience, not from textbooks or theories.', 54 |       value3Title: 'Transformation', 55 |       value3Description: 'We believe in the power of real change and are committed to helping you achieve lasting transformation.', 56 |       storyTitle: 'Jose\'s Story', 57 |       storyText: 'My journey began over 15 years ago when I experienced a profound spiritual awakening that changed my life forever. Since then, I\'ve dedicated myself to helping others find their own path to spiritual growth and personal transformation. Through years of study, practice, and working with clients from around the world, I\'ve developed a unique approach that combines traditional spiritual wisdom with modern understanding of human psychology and energy work.' 58 |     }; 59 |     nestedContent.es.about = { 60 |       title: flatContent.aboutTitleEs || 'Acerca de MatMax Yoga Studio', 61 |       text: flatContent.aboutContentEs || 'MatMax Yoga Studio está dedicado a ayudarte a construir fuerza, flexibilidad y paz interior a través del movimiento consciente y la respiración. Nuestras clases apoyan el bienestar y el equilibrio para todos los niveles.', 62 |       description: flatContent.aboutContentEs || 'MatMax Yoga Studio está dedicado a ayudarte a construir fuerza, flexibilidad y paz interior a través del movimiento consciente y la respiración. Nuestras clases apoyan el bienestar y el equilibrio para todos los niveles.', 63 |       statsClients: 'Clientes Ayudados', 64 |       statsYears: 'Años de Experiencia', 65 |       statsSessions: 'Sesiones Completadas', 66 |       statsCountries: 'Países Atendidos', 67 |       valuesTitle: 'Nuestros Valores Fundamentales', 68 |       value1Title: 'Compasión', 69 |       value1Description: 'Nos acercamos a cada cliente con profunda empatía y comprensión, creando un espacio seguro para la sanación y el crecimiento.', 70 |       value2Title: 'Autenticidad', 71 |       value2Description: 'Nuestra guía proviene de la sabiduría espiritual genuina y la experiencia personal, no de libros de texto o teorías.', 72 |       value3Title: 'Transformación', 73 |       value3Description: 'Creemos en el poder del cambio real y estamos comprometidos a ayudarte a lograr una transformación duradera.', 74 |       storyTitle: 'La Historia de José', 75 |       storyText: 'Mi viaje comenzó hace más de 15 años cuando experimenté un despertar espiritual profundo que cambió mi vida para siempre. Desde entonces, me he dedicado a ayudar a otros a encontrar su propio camino hacia el crecimiento espiritual y la transformación personal. A través de años de estudio, práctica y trabajo con clientes de todo el mundo, he desarrollado un enfoque único que combina la sabiduría espiritual tradicional con la comprensión moderna de la psicología humana y el trabajo energético.' 76 |     }; 77 |  78 |     nestedContent.en.approach = { 79 |       title: flatContent.approachTitleEn || 'Our Approach', 80 |       content: flatContent.approachContentEn || 'We use a holistic approach to wellness.', 81 |       items: [ 82 |         { 83 |           title: 'Heart-Centered Healing', 84 |           text: 'Connect with your emotional core and release past traumas through compassionate guidance and energy work.' 85 |         }, 86 |         { 87 |           title: 'Mindful Transformation', 88 |           text: 'Develop mental clarity and break free from limiting beliefs that hold you back from your true potential.' 89 |         }, 90 |         { 91 |           title: 'Spiritual Awakening', 92 |           text: 'Discover your spiritual path and deepen your connection to the divine through meditation and spiritual practices.' 93 |         } 94 |       ] as Array<{ title: string; text: string }> 95 |     }; 96 |     nestedContent.es.approach = { 97 |       title: flatContent.approachTitleEs || 'Nuestro Enfoque', 98 |       content: flatContent.approachContentEs || 'Usamos un enfoque holístico para el bienestar.', 99 |       items: [100 |         {101 |           title: 'Sanación Centrada en el Corazón',102 |           text: 'Conecta con tu núcleo emocional y libera traumas pasados a través de guía compasiva y trabajo energético.'103 |         },104 |         {105 |           title: 'Transformación Consciente',106 |           text: 'Desarrolla claridad mental y libérate de creencias limitantes que te impiden alcanzar tu verdadero potencial.'107 |         },108 |         {109 |           title: 'Despertar Espiritual',110 |           text: 'Descubre tu camino espiritual y profundiza tu conexión con lo divino a través de la meditación y prácticas espirituales.'111 |         }112 |       ] as Array<{ title: string; text: string }>113 |     };114 | 115 |     nestedContent.en.services = {116 |       title: flatContent.servicesTitleEn || 'Our Services',117 |       content: flatContent.servicesContentEn || 'Professional wellness services in a peaceful environment.'118 |     };119 |     nestedContent.es.services = {120 |       title: flatContent.servicesTitleEs || 'Nuestros Servicios',121 |       content: flatContent.servicesContentEs || 'Servicios profesionales de bienestar en un ambiente pacífico.'122 |     };123 | 124 |     nestedContent.en.nav = {125 |       invitation: 'Invitation',126 |       approach: 'Approach',127 |       session: 'Session',128 |       about: 'About',129 |       apply: 'Apply'130 |     };131 |     nestedContent.es.nav = {132 |       invitation: 'Invitación',133 |       approach: 'Enfoque',134 |       session: 'Sesión',135 |       about: 'Acerca de',136 |       apply: 'Aplicar'137 |     };138 | 139 |     nestedContent.en.cta = {140 |       bookReading: 'Book Your Reading'141 |     };142 |     nestedContent.es.cta = {143 |       bookReading: 'Reserva Tu Lectura'144 |     };145 |   }146 | 147 |   return nestedContent;148 | }149 | 150 | export async function GET() {151 |   try {152 | 153 |     const transformedContent = await withCache(154 |       'content',155 |       async () => {156 |         try {157 | 158 |           const content = await prisma.content.findFirst();159 | 160 |           if (!content) {161 |             try {162 |               const defaultContent = await prisma.content.create({163 |                 data: {164 |                   heroTitleEn: 'MatMax Yoga Studio',165 |                   heroTitleEs: 'MatMax Yoga Studio',166 |                   heroSubtitleEn: 'Your journey to wellness starts here',167 |                   heroSubtitleEs: 'Tu camino al bienestar comienza aquí',168 |                   aboutTitleEn: 'About Us',169 |                   aboutTitleEs: 'Sobre Nosotros',170 |                   aboutContentEn: 'We are dedicated to helping you achieve your wellness goals.',171 |                   aboutContentEs: 'Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.',172 |                   approachTitleEn: 'Our Approach',173 |                   approachTitleEs: 'Nuestro Enfoque',174 |                   approachContentEn: 'We use a holistic approach to wellness.',175 |                   approachContentEs: 'Usamos un enfoque holístico para el bienestar.',176 |                   servicesTitleEn: 'Our Services',177 |                   servicesTitleEs: 'Nuestros Servicios',178 |                   servicesContentEn: 'Professional wellness services in a peaceful environment.',179 |                   servicesContentEs: 'Servicios profesionales de bienestar en un ambiente pacífico.'180 |                 }181 |               });182 |               return transformFlatContentToNested(defaultContent as unknown as Record<string, string>);183 |             } catch (createError) {184 |               const defaultContent: Record<string, string> = {185 |                 heroTitleEn: 'MatMax Yoga Studio',186 |                 heroTitleEs: 'MatMax Yoga Studio',187 |                 heroSubtitleEn: 'Your journey to wellness starts here',188 |                 heroSubtitleEs: 'Tu camino al bienestar comienza aquí',189 |                 aboutTitleEn: 'About Us',190 |                 aboutTitleEs: 'Sobre Nosotros',191 |                 aboutContentEn: 'We are dedicated to helping you achieve your wellness goals.',192 |                 aboutContentEs: 'Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.',193 |                 approachTitleEn: 'Our Approach',194 |                 approachTitleEs: 'Nuestro Enfoque',195 |                 approachContentEn: 'We use a holistic approach to wellness.',196 |                 approachContentEs: 'Usamos un enfoque holístico para el bienestar.',197 |                 servicesTitleEn: 'Our Services',198 |                 servicesTitleEs: 'Nuestros Servicios',199 |                 servicesContentEn: 'Professional wellness services in a peaceful environment.',200 |                 servicesContentEs: 'Servicios profesionales de bienestar en un ambiente pacífico.'201 |               };202 |               return transformFlatContentToNested(defaultContent);203 |             }204 |           }205 | 206 |           return transformFlatContentToNested(content as unknown as Record<string, string>);207 |         } catch {208 |           const defaultContent: Record<string, string> = {209 |             heroTitleEn: 'MatMax Yoga Studio',210 |             heroTitleEs: 'MatMax Yoga Studio',211 |             heroSubtitleEn: 'Your journey to wellness starts here',212 |             heroSubtitleEs: 'Tu camino al bienestar comienza aquí',213 |             aboutTitleEn: 'About Us',214 |             aboutTitleEs: 'Sobre Nosotros',215 |             aboutContentEn: 'We are dedicated to helping you achieve your wellness goals.',216 |             aboutContentEs: 'Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.',217 |             approachTitleEn: 'Our Approach',218 |             approachTitleEs: 'Nuestro Enfoque',219 |             approachContentEn: 'We use a holistic approach to wellness.',220 |             approachContentEs: 'Usamos un enfoque holístico para el bienestar.',221 |             servicesTitleEn: 'Our Services',222 |             servicesTitleEs: 'Nuestros Servicios',223 |             servicesContentEn: 'Professional wellness services in a peaceful environment.',224 |             servicesContentEs: 'Servicios profesionales de bienestar en un ambiente pacífico.'225 |           };226 |           return transformFlatContentToNested(defaultContent);227 |         }228 |       },229 |       15 * 60 * 1000230 |     );231 | 232 |     return NextResponse.json({ content: transformedContent });233 |   } catch (error) {234 |     :', error);235 | 236 |     const defaultContent: Record<string, string> = {237 |       heroTitleEn: 'MatMax Yoga Studio',238 |       heroTitleEs: 'MatMax Yoga Studio',239 |       heroSubtitleEn: 'Your journey to wellness starts here',240 |       heroSubtitleEs: 'Tu camino al bienestar comienza aquí',241 |       aboutTitleEn: 'About Us',242 |       aboutTitleEs: 'Sobre Nosotros',243 |       aboutContentEn: 'We are dedicated to helping you achieve your wellness goals.',244 |       aboutContentEs: 'Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.',245 |       approachTitleEn: 'Our Approach',246 |       approachTitleEs: 'Nuestro Enfoque',247 |       approachContentEn: 'We use a holistic approach to wellness.',248 |       approachContentEs: 'Usamos un enfoque holístico para el bienestar.',249 |       servicesTitleEn: 'Our Services',250 |       servicesTitleEs: 'Nuestros Servicios',251 |       servicesContentEn: 'Professional wellness services in a peaceful environment.',252 |       servicesContentEs: 'Servicios profesionales de bienestar en un ambiente pacífico.'253 |     };254 |     const transformedContent = transformFlatContentToNested(defaultContent);255 |     return NextResponse.json({ content: transformedContent });256 |   }257 | }258 | 259 | export async function PUT(request: NextRequest) {260 |   try {261 |     const body = await request.json();262 | 263 |     let content = await prisma.content.findFirst();264 | 265 |     if (!content) {266 | 267 |       content = await prisma.content.create({268 |         data: {269 |           heroTitleEn: body.heroTitleEn || 'Welcome to SOULPATH',270 |           heroTitleEs: body.heroTitleEs || 'Bienvenido a SOULPATH',271 |           heroSubtitleEn: body.heroSubtitleEn || 'Your journey to wellness starts here',272 |           heroSubtitleEs: body.heroSubtitleEs || 'Tu camino al bienestar comienza aquí',273 |           aboutTitleEn: body.aboutTitleEn || 'About Us',274 |           aboutTitleEs: body.aboutTitleEs || 'Sobre Nosotros',275 |           aboutContentEn: body.aboutContentEn || 'We are dedicated to helping you achieve your wellness goals.',276 |           aboutContentEs: body.aboutContentEs || 'Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.',277 |           approachTitleEn: body.approachTitleEn || 'Our Approach',278 |           approachTitleEs: body.approachTitleEs || 'Nuestro Enfoque',279 |           approachContentEn: body.approachContentEn || 'We use a holistic approach to wellness.',280 |           approachContentEs: body.approachContentEs || 'Usamos un enfoque holístico para el bienestar.',281 |           servicesTitleEn: body.servicesTitleEn || 'Our Services',282 |           servicesTitleEs: body.servicesTitleEs || 'Nuestros Servicios',283 |           servicesContentEn: body.servicesContentEn || 'Professional wellness services in a peaceful environment.',284 |           servicesContentEs: body.servicesContentEs || 'Servicios profesionales de bienestar en un ambiente pacífico.'285 |         }286 |       });287 |     } else {288 | 289 |       content = await prisma.content.update({290 |         where: { id: content.id },291 |         data: {292 |           heroTitleEn: body.heroTitleEn,293 |           heroTitleEs: body.heroTitleEs,294 |           heroSubtitleEn: body.heroSubtitleEn,295 |           heroSubtitleEs: body.heroSubtitleEs,296 |           aboutTitleEn: body.aboutTitleEn,297 |           aboutTitleEs: body.aboutTitleEs,298 |           aboutContentEn: body.aboutContentEn,299 |           aboutContentEs: body.aboutContentEs,300 |           approachTitleEn: body.approachTitleEn,301 |           approachTitleEs: body.approachTitleEs,302 |           approachContentEn: body.approachContentEn,303 |           approachContentEs: body.approachContentEs,304 |           servicesTitleEn: body.servicesTitleEn,305 |           servicesTitleEs: body.servicesTitleEs,306 |           servicesContentEn: body.servicesContentEn,307 |           servicesContentEs: body.servicesContentEs308 |         }309 |       });310 |     }311 | 312 |     const transformedContent = transformFlatContentToNested(content as unknown as Record<string, string>);313 |     return NextResponse.json({ content: transformedContent });314 |   } catch (error) {315 |     return NextResponse.json({ error: 'Failed to update content' }, { status: 500 });316 |   }317 | }
==================================================END: frontend/app/api/content/route.ts==================================================


==================================================FILE: frontend/app/api/debug/schedule-slots/route.tsSIZE: 1.88 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET() {  5 |   try {  6 |   7 |     const connectionTest = await prisma.$queryRaw`SELECT 1 as test`;  8 |   9 |     const simpleQuery = await prisma.scheduleSlot.findMany({ 10 |       take: 1, 11 |       select: { 12 |         id: true, 13 |         startTime: true, 14 |         endTime: true, 15 |         capacity: true, 16 |         bookedCount: true, 17 |         isAvailable: true 18 |       } 19 |     }); 20 |  21 |     const complexQuery = await prisma.scheduleSlot.findMany({ 22 |       take: 1, 23 |       select: { 24 |         id: true, 25 |         startTime: true, 26 |         endTime: true, 27 |         capacity: true, 28 |         bookedCount: true, 29 |         isAvailable: true, 30 |         scheduleTemplate: { 31 |           select: { 32 |             id: true, 33 |             dayOfWeek: true, 34 |             sessionDuration: { 35 |               select: { 36 |                 id: true, 37 |                 name: true, 38 |                 duration_minutes: true 39 |               } 40 |             } 41 |           } 42 |         } 43 |       } 44 |     }); 45 |     return NextResponse.json({ 46 |       success: true, 47 |       message: 'Debug test successful', 48 |       data: { 49 |         connectionTest, 50 |         simpleQuery, 51 |         complexQuery 52 |       } 53 |     }); 54 |  55 |   } catch (error) { 56 |     return NextResponse.json({ 57 |       success: false, 58 |       error: 'Debug test failed', 59 |       details: error instanceof Error ? error.message : 'Unknown error', 60 |       stack: error instanceof Error ? error.stack : undefined 61 |     }, { status: 500 }); 62 |   } 63 | }
==================================================END: frontend/app/api/debug/schedule-slots/route.ts==================================================


==================================================FILE: frontend/app/api/feedback/route.tsSIZE: 3.69 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function POST(request: NextRequest) {  5 |   try {  6 |     const { conversationLogId, sessionId, rating, comment } = await request.json();  7 |   8 |     if (!conversationLogId || !sessionId || !rating) {  9 |       return NextResponse.json( 10 |         { error: 'Missing required fields: conversationLogId, sessionId, rating' }, 11 |         { status: 400 } 12 |       ); 13 |     } 14 |  15 |     if (rating !== 1 && rating !== 2) { 16 |       return NextResponse.json( 17 |         { error: 'Rating must be 1 (negative) or 2 (positive)' }, 18 |         { status: 400 } 19 |       ); 20 |     } 21 |  22 |     const conversationLog = await prisma.conversationLog.findUnique({ 23 |       where: { id: conversationLogId } 24 |     }); 25 |  26 |     if (!conversationLog) { 27 |       return NextResponse.json( 28 |         { error: 'Conversation log not found' }, 29 |         { status: 404 } 30 |       ); 31 |     } 32 |  33 |     const existingFeedback = await prisma.userFeedback.findFirst({ 34 |       where: { 35 |         conversationLogId: conversationLogId 36 |       } 37 |     }); 38 |  39 |     let feedback; 40 |     if (existingFeedback) { 41 |  42 |       feedback = await prisma.userFeedback.update({ 43 |         where: { id: existingFeedback.id }, 44 |         data: { 45 |           rating, 46 |           comment: comment || null, 47 |           reviewedForTraining: false 48 |         } 49 |       }); 50 |     } else { 51 |  52 |       feedback = await prisma.userFeedback.create({ 53 |         data: { 54 |           conversationLogId, 55 |           sessionId, 56 |           rating, 57 |           comment: comment || null, 58 |           reviewedForTraining: false 59 |         } 60 |       }); 61 |     } 62 |  63 |     return NextResponse.json({ 64 |       success: true, 65 |       message: 'Feedback submitted successfully', 66 |       feedbackId: feedback.id 67 |     }); 68 |  69 |   } catch (error) { 70 |     return NextResponse.json( 71 |       { 72 |         success: false, 73 |         error: 'Failed to submit feedback', 74 |         details: error instanceof Error ? error.message : 'Unknown error' 75 |       }, 76 |       { status: 500 } 77 |     ); 78 |   } finally { 79 |     await prisma.$disconnect(); 80 |   } 81 | } 82 |  83 | export async function GET(request: NextRequest) { 84 |   try { 85 |     const { searchParams } = new URL(request.url); 86 |     const sessionId = searchParams.get('session_id'); 87 |     const conversationLogId = searchParams.get('conversation_log_id'); 88 |  89 |     if (!sessionId && !conversationLogId) { 90 |       return NextResponse.json( 91 |         { error: 'Either sessionId or conversationLogId is required' }, 92 |         { status: 400 } 93 |       ); 94 |     } 95 |  96 |     const feedback = await prisma.userFeedback.findMany({ 97 |       where: { 98 |         ...(sessionId ? { sessionId } : {}), 99 |         ...(conversationLogId ? { conversationLogId: parseInt(conversationLogId) } : {})100 |       },101 |       include: {102 |         conversationLog: {103 |           select: {104 |             userMessage: true,105 |             botResponse: true,106 |             timestamp: true107 |           }108 |         }109 |       },110 |       orderBy: { createdAt: 'desc' }111 |     });112 | 113 |     return NextResponse.json({114 |       success: true,115 |       feedback: feedback.map(f => ({116 |         id: f.id,117 |         conversationLogId: f.conversationLogId,118 |         sessionId: f.sessionId,119 |         rating: f.rating,120 |         comment: f.comment,121 |         createdAt: f.createdAt,122 |         reviewedForTraining: f.reviewedForTraining,123 |         conversation: f.conversationLog124 |       }))125 |     });126 | 127 |   } catch (error) {128 |     return NextResponse.json(129 |       {130 |         success: false,131 |         error: 'Failed to fetch feedback',132 |         details: error instanceof Error ? error.message : 'Unknown error'133 |       },134 |       { status: 500 }135 |     );136 |   } finally {137 |     await prisma.$disconnect();138 |   }139 | }
==================================================END: frontend/app/api/feedback/route.ts==================================================


==================================================FILE: frontend/app/api/health/route.tsSIZE: 1.38 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET() {  5 |   try {  6 |   7 |     await prisma.$queryRaw`SELECT 1`;  8 |   9 |     let userCount = 0; 10 |     let bookingCount = 0; 11 |     let purchaseCount = 0; 12 |  13 |     try { 14 |       userCount = await prisma.user.count(); 15 |     } catch (error) { 16 |       } 17 |  18 |     try { 19 |       bookingCount = await prisma.booking.count(); 20 |     } catch (error) { 21 |       } 22 |  23 |     try { 24 |       purchaseCount = await prisma.purchase.count(); 25 |     } catch (error) { 26 |       } 27 |  28 |     return NextResponse.json({ 29 |       status: 'healthy', 30 |       timestamp: new Date().toISOString(), 31 |       database: 'connected', 32 |       stats: { 33 |         users: userCount, 34 |         bookings: bookingCount, 35 |         purchases: purchaseCount 36 |       }, 37 |       version: '2.0.0', 38 |       refactored: true 39 |     }); 40 |   } catch (error) { 41 |     return NextResponse.json({ 42 |       status: 'unhealthy', 43 |       timestamp: new Date().toISOString(), 44 |       database: 'disconnected', 45 |       error: error instanceof Error ? error.message : 'Unknown error' 46 |     }, { status: 500 }); 47 |   } finally { 48 |     await prisma.$disconnect(); 49 |   } 50 | }
==================================================END: frontend/app/api/health/route.ts==================================================


==================================================FILE: frontend/app/api/images/route.tsSIZE: 1.72 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 |   4 | const supabase = createClient(  5 |   process.env.NEXT_PUBLIC_SUPABASE_URL!,  6 |   process.env.SUPABASE_SERVICE_ROLE_KEY!  7 | );  8 |   9 | const defaultImages = { 10 |   id: 1, 11 |   profileImage: '/assets/cf4f95a6cc4d03023c0e98479a93fe16d4ef06f2.png', 12 |   heroImage: null, 13 |   aboutImage: null, 14 |   createdAt: new Date().toISOString(), 15 |   updatedAt: new Date().toISOString() 16 | }; 17 |  18 | export async function GET() { 19 |   try { 20 |     const { data, error } = await supabase 21 |       .from('images') 22 |       .select('*') 23 |       .single(); 24 |  25 |     if (error) { 26 |  27 |       if (error.code === 'PGRST116') { 28 |         return NextResponse.json({ images: defaultImages }); 29 |       } 30 |  31 |       return NextResponse.json({ images: defaultImages }); 32 |     } 33 |  34 |     return NextResponse.json({ images: data }); 35 |   } catch (error) { 36 |     return NextResponse.json({ images: defaultImages }); 37 |   } 38 | } 39 |  40 | export async function POST(request: NextRequest) { 41 |   try { 42 |     const body = await request.json(); 43 |  44 |     const { data, error } = await supabase 45 |       .from('images') 46 |       .upsert(body, { onConflict: 'id' }) 47 |       .select() 48 |       .single(); 49 |  50 |     if (error) { 51 |       return NextResponse.json({ images: defaultImages }); 52 |     } 53 |  54 |     return NextResponse.json({ images: data }); 55 |   } catch (error) { 56 |     return NextResponse.json({ images: defaultImages }); 57 |   } 58 | }
==================================================END: frontend/app/api/images/route.ts==================================================


==================================================FILE: frontend/app/api/logo/route.tsSIZE: 3.09 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient, SupabaseClient } from '@supabase/supabase-js';  3 | import { withCache } from '@/lib/cache';  4 |   5 | let supabaseClient: SupabaseClient | null = null;  6 |   7 | function createSupabaseClient() {  8 |   if (supabaseClient) {  9 |     return supabaseClient; 10 |   } 11 |  12 |   const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL; 13 |   const supabaseKey = process.env.SUPABASE_SERVICE_ROLE_KEY; 14 |  15 |   if (!supabaseUrl || !supabaseKey) { 16 |     throw new Error('Missing Supabase environment variables'); 17 |   } 18 |  19 |   supabaseClient = createClient(supabaseUrl, supabaseKey); 20 |   return supabaseClient; 21 | } 22 |  23 | const defaultLogo = { 24 |   id: 1, 25 |   type: 'image', 26 |   text: 'MatMax Yoga Studio', 27 |   imageUrl: '/logo_matmax.png', 28 |   isActive: true, 29 |   createdAt: new Date().toISOString(), 30 |   updatedAt: new Date().toISOString() 31 | }; 32 |  33 | export async function GET() { 34 |   try { 35 |  36 |     const logoSettings = await withCache( 37 |       'logo_settings', 38 |       async () => { 39 |         const supabase = createSupabaseClient(); 40 |  41 |         const { data, error } = await supabase 42 |           .from('logo') 43 |           .select('*') 44 |           .single(); 45 |  46 |         if (error) { 47 |  48 |           if (error.code === 'PGRST205' || error.code === 'PGRST116') { 49 |             return defaultLogo; 50 |           } 51 |  52 |           return defaultLogo; 53 |         } 54 |  55 |         return data; 56 |       }, 57 |       30 * 60 * 1000 58 |     ); 59 |  60 |     return NextResponse.json({ logoSettings }); 61 |   } catch (error) { 62 |     return NextResponse.json({ logoSettings: defaultLogo }); 63 |   } 64 | } 65 |  66 | export async function POST(request: NextRequest) { 67 |   try { 68 |     const supabase = createSupabaseClient(); 69 |     const body = await request.json(); 70 |  71 |     try { 72 |       const { data, error } = await supabase 73 |         .from('logo') 74 |         .upsert(body, { onConflict: 'id' }) 75 |         .select() 76 |         .single(); 77 |  78 |       if (error) { 79 |         return NextResponse.json({ logoSettings: defaultLogo }); 80 |       } 81 |  82 |       return NextResponse.json({ logoSettings: data }); 83 |     } catch (tableError: unknown) { 84 |  85 |       if (tableError && typeof tableError === 'object' && 'code' in tableError && tableError.code === 'PGRST205') { 86 |         return NextResponse.json({ logoSettings: defaultLogo }); 87 |       } 88 |       throw tableError; 89 |     } 90 |   } catch (error) { 91 |     return NextResponse.json({ logoSettings: defaultLogo }); 92 |   } 93 | }
==================================================END: frontend/app/api/logo/route.ts==================================================


==================================================FILE: frontend/app/api/ml/retrain/route.tsSIZE: 6.34 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import MLPipelineService from '@/lib/services/ml-pipeline-service';  4 | import OpenRouterService from '@/lib/services/openrouter-service';  5 | import * as path from 'path';  6 |   7 | const openRouter = new OpenRouterService();  8 | const mlPipeline = new MLPipelineService(prisma, openRouter);  9 |  10 | export async function POST(request: NextRequest) { 11 |   try { 12 |     const { triggerSource = 'manual', minNewDataPoints = 10 } = await request.json(); 13 |  14 |     const trainingData = await mlPipeline.generateTrainingData({ 15 |       minConfidence: 0.6, 16 |       includeNegativeFeedback: true, 17 |       includeFallbackCases: true, 18 |       limit: 200 19 |     }); 20 |  21 |     if (trainingData.length < minNewDataPoints) { 22 |       return NextResponse.json({ 23 |         success: false, 24 |         message: `Insufficient training data. Generated ${trainingData.length} examples, need at least ${minNewDataPoints}`, 25 |         jobId: null 26 |       }); 27 |     } 28 |  29 |     const trainingDataFile = await saveTrainingDataToFile(trainingData as unknown as Record<string, unknown>[]); 30 |  31 |     const modelVersion = await trainRasaModel(); 32 |  33 |     const performance = await mlPipeline.evaluateModel(modelVersion); 34 |     }`); 35 |  36 |     const feedbackIds = await getUnreviewedFeedbackIds(); 37 |     if (feedbackIds.length > 0) { 38 |       await mlPipeline.markFeedbackAsReviewed(feedbackIds); 39 |       } 40 |  41 |     let abTestId = null; 42 |     if (performance.evaluationResults.accuracy > 0.8) { 43 |       const abTest = await mlPipeline.createABTest({ 44 |         experimentName: `Model Comparison ${new Date().toISOString().split('T')[0]}`, 45 |         modelAVersion: 'current_production', 46 |         modelBVersion: modelVersion, 47 |         trafficSplit: 0.1, 48 |         successMetric: 'booking_completion_rate' 49 |       }); 50 |       abTestId = abTest.id; 51 |       } 52 |  53 |     return NextResponse.json({ 54 |       success: true, 55 |       message: 'ML retraining pipeline completed successfully', 56 |       jobId: `retrain_${Date.now()}`, 57 |       results: { 58 |         trainingDataCount: trainingData.length, 59 |         modelVersion, 60 |         performance: { 61 |           accuracy: performance.evaluationResults.accuracy, 62 |           bookingSuccessRate: performance.bookingSuccessRate, 63 |           avgConversationTurns: performance.avgConversationTurns 64 |         }, 65 |         abTestId 66 |       } 67 |     }); 68 |  69 |   } catch (error) { 70 |     return NextResponse.json( 71 |       { 72 |         success: false, 73 |         error: 'ML retraining pipeline failed', 74 |         details: error instanceof Error ? error.message : 'Unknown error' 75 |       }, 76 |       { status: 500 } 77 |     ); 78 |   } finally { 79 |     await prisma.$disconnect(); 80 |   } 81 | } 82 |  83 | async function saveTrainingDataToFile(trainingData: Record<string, unknown>[]): Promise<string> { 84 |   const fs = await import('fs/promises'); 85 |   const path = await import('path'); 86 |  87 |   const rasaDataDir = path.default.join(process.cwd(), 'rasa', 'data'); 88 |   const fileName = `training_data_${Date.now()}.yml`; 89 |   const filePath = path.default.join(rasaDataDir, fileName); 90 |  91 |   const rasaFormat = convertToRasaFormat(trainingData); 92 |  93 |   await fs.default.writeFile(filePath, rasaFormat, 'utf8'); 94 |   return filePath; 95 | } 96 |  97 | function convertToRasaFormat(trainingData: Record<string, unknown>[]): string { 98 |   const intentGroups: Record<string, string[]> = {}; 99 | 100 |   for (const data of trainingData) {101 |     const intent = data.intent as string;102 |     const text = data.text as string;103 |     if (!intentGroups[intent]) {104 |       intentGroups[intent] = [];105 |     }106 | 107 |     let example = text;108 |     if (data.entities && Array.isArray(data.entities) && data.entities.length > 0) {109 | 110 |       const sortedEntities = (data.entities as Array<{ start: number; end: number; value: string; entity: string }>).sort((a, b) => b.start - a.start);111 |       for (const entity of sortedEntities) {112 |         const before = example.substring(0, entity.start);113 |         const after = example.substring(entity.end);114 |         example = `${before}[${entity.value}](${entity.entity})${after}`;115 |       }116 |     }117 | 118 |     intentGroups[intent].push(`    - ${example}`);119 |   }120 | 121 |   let yaml = 'version: "3.1"\n\nnlu:\n';122 | 123 |   for (const [intent, examples] of Object.entries(intentGroups)) {124 |     yaml += `- intent: ${intent}\n  examples: |\n`;125 |     yaml += examples.join('\n') + '\n\n';126 |   }127 | 128 |   return yaml;129 | }130 | 131 | async function trainRasaModel(): Promise<string> {132 |   const { exec } = await import('child_process');133 |   const { promisify } = await import('util');134 |   const execAsync = promisify(exec);135 | 136 |   const rasaDir = path.join(process.cwd(), 'rasa');137 | 138 |   try {139 | 140 |     const { stdout, stderr } = await execAsync('rasa train', { cwd: rasaDir });141 | 142 |     if (stderr && !stderr.includes('WARNING')) {143 |       throw new Error(`Rasa training error: ${stderr}`);144 |     }145 | 146 |     const modelMatch = stdout.match(/model-(\d{8}-\d{6}-\w+)/);147 |     const modelVersion = modelMatch ? modelMatch[1] : `model_${Date.now()}`;148 | 149 |     return modelVersion;150 |   } catch (error) {151 |     throw new Error(`Failed to train Rasa model: ${error}`);152 |   }153 | }154 | 155 | async function getUnreviewedFeedbackIds(): Promise<number[]> {156 |   const feedback = await prisma.userFeedback.findMany({157 |     where: { reviewedForTraining: false },158 |     select: { id: true },159 |     take: 100160 |   });161 | 162 |   return feedback.map(f => f.id);163 | }
==================================================END: frontend/app/api/ml/retrain/route.ts==================================================


==================================================FILE: frontend/app/api/orchestrator/route.tsSIZE: 8.76 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.3-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED === 'true', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'console' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'consulta_estado': { 38 |     action: 'consultar_estado', 39 |     apiEndpoint: '/admin/bookings', 40 |     requiredEntities: ['solicitud_id', 'cita_id', 'email'], 41 |     optionalEntities: ['tipo_consulta'], 42 |     description: 'Consultar el estado de una solicitud o cita' 43 |   }, 44 |   'agendar_cita': { 45 |     action: 'agendar_cita', 46 |     apiEndpoint: '/booking', 47 |     requiredEntities: ['fecha', 'hora', 'email'], 48 |     optionalEntities: ['tipo_sesion', 'paquete_id', 'tamaño_grupo', 'notas'], 49 |     description: 'Agendar una nueva cita' 50 |   }, 51 |   'consultar_paquetes': { 52 |     action: 'consultar_paquetes', 53 |     apiEndpoint: '/packages', 54 |     requiredEntities: [], 55 |     optionalEntities: ['tipo_paquete', 'moneda', 'duración'], 56 |     description: 'Consultar paquetes disponibles' 57 |   }, 58 |   'pagar_servicio': { 59 |     action: 'pagar_servicio', 60 |     apiEndpoint: '/client/purchase', 61 |     requiredEntities: ['monto', 'método_pago', 'email'], 62 |     optionalEntities: ['cita_id', 'paquete_id', 'moneda', 'notas'], 63 |     description: 'Procesar un pago' 64 |   }, 65 |   'cancelar_cita': { 66 |     action: 'cancelar_cita', 67 |     apiEndpoint: '/client/bookings', 68 |     requiredEntities: ['cita_id', 'email'], 69 |     optionalEntities: ['motivo'], 70 |     description: 'Cancelar una cita existente' 71 |   }, 72 |   'consultar_historial': { 73 |     action: 'consultar_historial', 74 |     apiEndpoint: '/client/purchase-history', 75 |     requiredEntities: ['email'], 76 |     optionalEntities: ['tipo_historial', 'fecha_desde', 'fecha_hasta'], 77 |     description: 'Consultar historial del usuario' 78 |   }, 79 |   'consultar_horarios': { 80 |     action: 'consultar_horarios', 81 |     apiEndpoint: '/schedule-slots', 82 |     requiredEntities: [], 83 |     optionalEntities: ['fecha', 'duración', 'tipo_sesion'], 84 |     description: 'Consultar horarios disponibles' 85 |   }, 86 |   'actualizar_perfil': { 87 |     action: 'actualizar_perfil', 88 |     apiEndpoint: '/client/me', 89 |     requiredEntities: ['email'], 90 |     optionalEntities: ['nombre', 'teléfono', 'fecha_nacimiento', 'lugar_nacimiento'], 91 |     description: 'Actualizar información del perfil' 92 |   }, 93 |   'saludo': { 94 |     action: 'saludo', 95 |     requiredEntities: [], 96 |     optionalEntities: ['nombre'], 97 |     description: 'Manejar saludos y bienvenidas' 98 |   }, 99 |   'despedida': {100 |     action: 'despedida',101 |     requiredEntities: [],102 |     optionalEntities: [],103 |     description: 'Manejar despedidas'104 |   },105 |   'ayuda': {106 |     action: 'ayuda',107 |     requiredEntities: [],108 |     optionalEntities: ['tema_ayuda'],109 |     description: 'Proporcionar ayuda y soporte'110 |   }111 | };112 | 113 | let orchestrator: ConversationalOrchestrator | null = null;114 | 115 | function getOrchestrator(): ConversationalOrchestrator {116 |   if (!orchestrator) {117 |     orchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping);118 |   }119 |   return orchestrator;120 | }121 | 122 | export async function GET(request: NextRequest) {123 |   try {124 |     const { searchParams } = new URL(request.url);125 |     const action = searchParams.get('action');126 | 127 |     const orchestrator = getOrchestrator();128 | 129 |     switch (action) {130 |       case 'health':131 |         const healthCheck = await orchestrator.healthCheck();132 |         return NextResponse.json({133 |           success: true,134 |           data: healthCheck,135 |           timestamp: new Date().toISOString()136 |         });137 | 138 |       case 'stats':139 |         const userId = searchParams.get('userId');140 |         const dateFrom = searchParams.get('dateFrom');141 |         const dateTo = searchParams.get('dateTo');142 | 143 |         const stats = await orchestrator.getConversationStats(144 |           userId || undefined,145 |           dateFrom || undefined,146 |           dateTo || undefined147 |         );148 | 149 |         return NextResponse.json({150 |           success: true,151 |           data: stats,152 |           timestamp: new Date().toISOString()153 |         });154 | 155 |       case 'logs':156 |         const logUserId = searchParams.get('userId');157 |         const limit = parseInt(searchParams.get('limit') || '50');158 |         const offset = parseInt(searchParams.get('offset') || '0');159 | 160 |         if (!logUserId) {161 |           return NextResponse.json({162 |             success: false,163 |             error: 'userId is required for logs action'164 |           }, { status: 400 });165 |         }166 | 167 |         const logs = await orchestrator.getConversationLogs(logUserId, limit, offset);168 | 169 |         return NextResponse.json({170 |           success: true,171 |           data: logs,172 |           pagination: {173 |             limit,174 |             offset,175 |             total: logs.length176 |           },177 |           timestamp: new Date().toISOString()178 |         });179 | 180 |       case 'config':181 |         return NextResponse.json({182 |           success: true,183 |           data: {184 |             config: orchestratorConfig,185 |             intentActionMapping186 |           },187 |           timestamp: new Date().toISOString()188 |         });189 | 190 |       default:191 |         return NextResponse.json({192 |           success: true,193 |           message: 'Conversational Orchestrator API',194 |           availableActions: ['health', 'stats', 'logs', 'config'],195 |           timestamp: new Date().toISOString()196 |         });197 |     }198 | 199 |   } catch (error) {200 |     return NextResponse.json({201 |       success: false,202 |       error: 'Internal server error',203 |       code: 'INTERNAL_ERROR',204 |       details: error instanceof Error ? error.message : 'Unknown error'205 |     }, { status: 500 });206 |   }207 | }208 | 209 | export async function POST(request: NextRequest) {210 |   try {211 |     const body = await request.json();212 |     const { action, data } = body;213 | 214 |     const orchestrator = getOrchestrator();215 | 216 |     switch (action) {217 |       case 'clean-logs':218 |         const daysToKeep = data?.daysToKeep || 30;219 |         const cleanedCount = await orchestrator.cleanOldLogs(daysToKeep);220 | 221 |         return NextResponse.json({222 |           success: true,223 |           data: {224 |             cleanedCount,225 |             daysToKeep226 |           },227 |           message: `Cleaned ${cleanedCount} old log entries`228 |         });229 | 230 |       case 'test-message':231 |         const { message, userId } = data;232 | 233 |         if (!message || !userId) {234 |           return NextResponse.json({235 |             success: false,236 |             error: 'message and userId are required for test-message action'237 |           }, { status: 400 });238 |         }239 | 240 |         const mockWebhook = {241 |           Body: message,242 |           From: `whatsapp:${userId}`,243 |           To: `whatsapp:${process.env.TWILIO_PHONE_NUMBER}`,244 |           MessageSid: `test_${Date.now()}`,245 |           Timestamp: new Date().toISOString(),246 |           ProfileName: 'Test User'247 |         };248 | 249 |         const result = await orchestrator.processWhatsAppMessage(mockWebhook);250 | 251 |         return NextResponse.json({252 |           success: true,253 |           data: result,254 |           message: 'Test message processed'255 |         });256 | 257 |       default:258 |         return NextResponse.json({259 |           success: false,260 |           error: `Unknown action: ${action}`,261 |           availableActions: ['clean-logs', 'test-message']262 |         }, { status: 400 });263 |     }264 | 265 |   } catch (error) {266 |     return NextResponse.json({267 |       success: false,268 |       error: 'Internal server error',269 |       code: 'INTERNAL_ERROR',270 |       details: error instanceof Error ? error.message : 'Unknown error'271 |     }, { status: 500 });272 |   }273 | }
==================================================END: frontend/app/api/orchestrator/route.ts==================================================


==================================================FILE: frontend/app/api/orchestrator/test/route.tsSIZE: 9.86 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.3-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED === 'true', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'console' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'consulta_estado': { 38 |     action: 'consultar_estado', 39 |     apiEndpoint: '/admin/bookings', 40 |     requiredEntities: ['solicitud_id', 'cita_id', 'email'], 41 |     optionalEntities: ['tipo_consulta'], 42 |     description: 'Consultar el estado de una solicitud o cita' 43 |   }, 44 |   'agendar_cita': { 45 |     action: 'agendar_cita', 46 |     apiEndpoint: '/booking', 47 |     requiredEntities: ['fecha', 'hora', 'email'], 48 |     optionalEntities: ['tipo_sesion', 'paquete_id', 'tamaño_grupo', 'notas'], 49 |     description: 'Agendar una nueva cita' 50 |   }, 51 |   'consultar_paquetes': { 52 |     action: 'consultar_paquetes', 53 |     apiEndpoint: '/packages', 54 |     requiredEntities: [], 55 |     optionalEntities: ['tipo_paquete', 'moneda', 'duración'], 56 |     description: 'Consultar paquetes disponibles' 57 |   }, 58 |   'pagar_servicio': { 59 |     action: 'pagar_servicio', 60 |     apiEndpoint: '/client/purchase', 61 |     requiredEntities: ['monto', 'método_pago', 'email'], 62 |     optionalEntities: ['cita_id', 'paquete_id', 'moneda', 'notas'], 63 |     description: 'Procesar un pago' 64 |   }, 65 |   'cancelar_cita': { 66 |     action: 'cancelar_cita', 67 |     apiEndpoint: '/client/bookings', 68 |     requiredEntities: ['cita_id', 'email'], 69 |     optionalEntities: ['motivo'], 70 |     description: 'Cancelar una cita existente' 71 |   }, 72 |   'consultar_historial': { 73 |     action: 'consultar_historial', 74 |     apiEndpoint: '/client/purchase-history', 75 |     requiredEntities: ['email'], 76 |     optionalEntities: ['tipo_historial', 'fecha_desde', 'fecha_hasta'], 77 |     description: 'Consultar historial del usuario' 78 |   }, 79 |   'consultar_horarios': { 80 |     action: 'consultar_horarios', 81 |     apiEndpoint: '/schedule-slots', 82 |     requiredEntities: [], 83 |     optionalEntities: ['fecha', 'duración', 'tipo_sesion'], 84 |     description: 'Consultar horarios disponibles' 85 |   }, 86 |   'actualizar_perfil': { 87 |     action: 'actualizar_perfil', 88 |     apiEndpoint: '/client/me', 89 |     requiredEntities: ['email'], 90 |     optionalEntities: ['nombre', 'teléfono', 'fecha_nacimiento', 'lugar_nacimiento'], 91 |     description: 'Actualizar información del perfil' 92 |   }, 93 |   'saludo': { 94 |     action: 'saludo', 95 |     requiredEntities: [], 96 |     optionalEntities: ['nombre'], 97 |     description: 'Manejar saludos y bienvenidas' 98 |   }, 99 |   'despedida': {100 |     action: 'despedida',101 |     requiredEntities: [],102 |     optionalEntities: [],103 |     description: 'Manejar despedidas'104 |   },105 |   'ayuda': {106 |     action: 'ayuda',107 |     requiredEntities: [],108 |     optionalEntities: ['tema_ayuda'],109 |     description: 'Proporcionar ayuda y soporte'110 |   }111 | };112 | 113 | let orchestrator: ConversationalOrchestrator | null = null;114 | 115 | function getOrchestrator(): ConversationalOrchestrator {116 |   if (!orchestrator) {117 |     orchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping);118 |   }119 |   return orchestrator;120 | }121 | 122 | export async function POST(request: NextRequest) {123 |   try {124 |     const body = await request.json();125 |     const { message, userId, testType } = body;126 | 127 |     if (!message) {128 |       return NextResponse.json({129 |         success: false,130 |         error: 'Message is required'131 |       }, { status: 400 });132 |     }133 | 134 |     const testUserId = userId || `test_${Date.now()}`;135 |     const orchestrator = getOrchestrator();136 | 137 |     const mockWebhook = {138 |       Body: message,139 |       From: `whatsapp:${testUserId}`,140 |       To: `whatsapp:${process.env.TWILIO_PHONE_NUMBER || '+1234567890'}`,141 |       MessageSid: `test_${Date.now()}`,142 |       Timestamp: new Date().toISOString(),143 |       ProfileName: 'Test User'144 |     };145 | 146 |     const startTime = Date.now();147 |     const result = await orchestrator.processWhatsAppMessage(mockWebhook);148 |     const processingTime = Date.now() - startTime;149 | 150 |     return NextResponse.json({151 |       success: true,152 |       data: {153 |         ...result,154 |         processingTime,155 |         testType: testType || 'full',156 |         timestamp: new Date().toISOString()157 |       }158 |     });159 | 160 |   } catch (error) {161 |     return NextResponse.json({162 |       success: false,163 |       error: 'Test failed',164 |       code: 'TEST_ERROR',165 |       details: error instanceof Error ? error.message : 'Unknown error'166 |     }, { status: 500 });167 |   }168 | }169 | 170 | export async function GET(request: NextRequest) {171 |   try {172 |     const { searchParams } = new URL(request.url);173 |     const testType = searchParams.get('type') || 'health';174 | 175 |     const orchestrator = getOrchestrator();176 | 177 |     switch (testType) {178 |       case 'health':179 |         const healthCheck = await orchestrator.healthCheck();180 |         return NextResponse.json({181 |           success: true,182 |           data: {183 |             health: healthCheck,184 |             config: {185 |               rasa: {186 |                 url: orchestratorConfig.rasa.url,187 |                 confidence_threshold: orchestratorConfig.rasa.confidence_threshold188 |               },189 |               openrouter: {190 |                 baseUrl: orchestratorConfig.openrouter.baseUrl,191 |                 model: orchestratorConfig.openrouter.model192 |               },193 |               twilio: {194 |                 phoneNumber: orchestratorConfig.twilio.phoneNumber195 |               },196 |               logging: {197 |                 enabled: orchestratorConfig.logging.enabled,198 |                 level: orchestratorConfig.logging.level,199 |                 storage: orchestratorConfig.logging.storage200 |               }201 |             }202 |           },203 |           timestamp: new Date().toISOString()204 |         });205 | 206 |       case 'examples':207 |         return NextResponse.json({208 |           success: true,209 |           data: {210 |             testMessages: [211 |               {212 |                 intent: 'saludo',213 |                 message: 'Hola, ¿cómo estás?',214 |                 description: 'Mensaje de saludo básico'215 |               },216 |               {217 |                 intent: 'consultar_paquetes',218 |                 message: '¿Qué paquetes tienen disponibles?',219 |                 description: 'Consulta de paquetes'220 |               },221 |               {222 |                 intent: 'agendar_cita',223 |                 message: 'Quiero agendar una cita para mañana a las 3pm',224 |                 description: 'Agendar cita con fecha y hora'225 |               },226 |               {227 |                 intent: 'consulta_estado',228 |                 message: '¿Cuál es el estado de mi solicitud 12345?',229 |                 description: 'Consulta de estado con ID'230 |               },231 |               {232 |                 intent: 'pagar_servicio',233 |                 message: 'Quiero pagar $50 por mi paquete con tarjeta de crédito',234 |                 description: 'Pago con método específico'235 |               },236 |               {237 |                 intent: 'consultar_horarios',238 |                 message: '¿Qué horarios tienen disponibles para esta semana?',239 |                 description: 'Consulta de horarios disponibles'240 |               },241 |               {242 |                 intent: 'cancelar_cita',243 |                 message: 'Necesito cancelar mi cita del viernes',244 |                 description: 'Cancelación de cita'245 |               },246 |               {247 |                 intent: 'ayuda',248 |                 message: '¿Cómo funciona el sistema de citas?',249 |                 description: 'Solicitud de ayuda'250 |               }251 |             ],252 |             intents: Object.keys(intentActionMapping),253 |             entities: [254 |               'solicitud_id', 'cita_id', 'email', 'fecha', 'hora', 'tipo_sesion',255 |               'paquete_id', 'monto', 'método_pago', 'moneda', 'nombre', 'teléfono',256 |               'fecha_nacimiento', 'lugar_nacimiento', 'tamaño_grupo', 'notas'257 |             ]258 |           },259 |           timestamp: new Date().toISOString()260 |         });261 | 262 |       case 'stats':263 |         const stats = await orchestrator.getConversationStats();264 |         return NextResponse.json({265 |           success: true,266 |           data: stats,267 |           timestamp: new Date().toISOString()268 |         });269 | 270 |       default:271 |         return NextResponse.json({272 |           success: true,273 |           message: 'Orchestrator Test API',274 |           availableTests: ['health', 'examples', 'stats'],275 |           usage: {276 |             GET: 'Use ?type=health|examples|stats',277 |             POST: 'Send {message, userId?, testType?} to test message processing'278 |           },279 |           timestamp: new Date().toISOString()280 |         });281 |     }282 | 283 |   } catch (error) {284 |     return NextResponse.json({285 |       success: false,286 |       error: 'Test API error',287 |       code: 'TEST_API_ERROR',288 |       details: error instanceof Error ? error.message : 'Unknown error'289 |     }, { status: 500 });290 |   }291 | }
==================================================END: frontend/app/api/orchestrator/test/route.ts==================================================


==================================================FILE: frontend/app/api/otp/send/route.tsSIZE: 3.26 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import { labsMobileSmsService, LabsMobileSmsService } from '@/lib/labsmobile-sms-service';  4 | import { z } from 'zod';  5 |   6 | const sendOtpSchema = z.object({  7 |   phoneNumber: z.string().min(1, 'Phone number is required'),  8 |   countryCode: z.string().min(1, 'Country code is required'),  9 |   language: z.string().optional().default('en'), 10 | }); 11 |  12 | export async function POST(request: NextRequest) { 13 |   try { 14 |     const body = await request.json(); 15 |     const { phoneNumber, countryCode, language } = sendOtpSchema.parse(body); 16 |  17 |     if (!LabsMobileSmsService.validatePhoneNumber(phoneNumber, countryCode)) { 18 |       const cleanNumber = phoneNumber.replace(/\D/g, ''); 19 |       return NextResponse.json( 20 |         { 21 |           error: `Invalid phone number format for ${countryCode}. Received: "${cleanNumber}" (${cleanNumber.length} digits). Please check the example format.` 22 |         }, 23 |         { status: 400 } 24 |       ); 25 |     } 26 |  27 |     const formattedPhoneNumber = LabsMobileSmsService.formatPhoneNumber(phoneNumber, countryCode); 28 |  29 |     const existingOtp = await prisma.otpVerification.findFirst({ 30 |       where: { 31 |         phoneNumber: formattedPhoneNumber, 32 |         isVerified: false, 33 |         expiresAt: { 34 |           gt: new Date() 35 |         } 36 |       } 37 |     }); 38 |  39 |     if (existingOtp) { 40 |  41 |       const timeDiff = existingOtp.expiresAt.getTime() - new Date().getTime(); 42 |       if (timeDiff > 8 * 60 * 1000) { 43 |         return NextResponse.json( 44 |           { error: 'Please wait before requesting a new OTP code' }, 45 |           { status: 429 } 46 |         ); 47 |       } 48 |     } 49 |  50 |     const otpCode = LabsMobileSmsService.generateOtpCode(6); 51 |     const expiresAt = new Date(Date.now() + 10 * 60 * 1000); 52 |  53 |     const otpVerification = await prisma.otpVerification.create({ 54 |       data: { 55 |         phoneNumber: formattedPhoneNumber, 56 |         countryCode, 57 |         otpCode, 58 |         expiresAt, 59 |         attempts: 0, 60 |         maxAttempts: 3 61 |       } 62 |     }); 63 |  64 |     try { 65 |       await labsMobileSmsService.sendOtpSms(formattedPhoneNumber, otpCode, language); 66 |  67 |       return NextResponse.json({ 68 |         success: true, 69 |         message: 'OTP sent successfully', 70 |         otpId: otpVerification.id, 71 |         expiresAt: expiresAt.toISOString() 72 |       }); 73 |     } catch (smsError) { 74 |  75 |       await prisma.otpVerification.delete({ 76 |         where: { id: otpVerification.id } 77 |       }); 78 |  79 |       return NextResponse.json( 80 |         { error: 'Failed to send OTP. Please try again.' }, 81 |         { status: 500 } 82 |       ); 83 |     } 84 |  85 |   } catch (error) { 86 |     if (error instanceof z.ZodError) { 87 |       return NextResponse.json( 88 |         { error: 'Invalid request data', details: error.issues }, 89 |         { status: 400 } 90 |       ); 91 |     } 92 |  93 |     return NextResponse.json( 94 |       { error: 'Internal server error' }, 95 |       { status: 500 } 96 |     ); 97 |   } 98 | }
==================================================END: frontend/app/api/otp/send/route.ts==================================================


==================================================FILE: frontend/app/api/otp/verify/route.tsSIZE: 4.04 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import { z } from 'zod';  4 |   5 | const verifyOtpSchema = z.object({  6 |   phoneNumber: z.string().min(1, 'Phone number is required'),  7 |   otpCode: z.string().min(6, 'OTP code must be at least 6 digits').max(6, 'OTP code must be at most 6 digits'),  8 | });  9 |  10 | export async function POST(request: NextRequest) { 11 |   try { 12 |     const body = await request.json(); 13 |     const { phoneNumber, otpCode } = verifyOtpSchema.parse(body); 14 |  15 |     const otpVerification = await prisma.otpVerification.findFirst({ 16 |       where: { 17 |         phoneNumber, 18 |         otpCode, 19 |         isVerified: false, 20 |         expiresAt: { 21 |           gt: new Date() 22 |         } 23 |       }, 24 |       orderBy: { 25 |         createdAt: 'desc' 26 |       } 27 |     }); 28 |  29 |     if (!otpVerification) { 30 |  31 |       const expiredOtp = await prisma.otpVerification.findFirst({ 32 |         where: { 33 |           phoneNumber, 34 |           otpCode, 35 |           isVerified: false 36 |         }, 37 |         orderBy: { 38 |           createdAt: 'desc' 39 |         } 40 |       }); 41 |  42 |       if (expiredOtp) { 43 |         if (expiredOtp.expiresAt < new Date()) { 44 |           return NextResponse.json( 45 |             { error: 'OTP code has expired. Please request a new one.' }, 46 |             { status: 400 } 47 |           ); 48 |         } 49 |  50 |         if (expiredOtp.attempts >= expiredOtp.maxAttempts) { 51 |           return NextResponse.json( 52 |             { error: 'Maximum verification attempts exceeded. Please request a new OTP.' }, 53 |             { status: 400 } 54 |           ); 55 |         } 56 |       } 57 |  58 |       return NextResponse.json( 59 |         { error: 'Invalid OTP code' }, 60 |         { status: 400 } 61 |       ); 62 |     } 63 |  64 |     if (otpVerification.attempts >= otpVerification.maxAttempts) { 65 |       return NextResponse.json( 66 |         { error: 'Maximum verification attempts exceeded. Please request a new OTP.' }, 67 |         { status: 400 } 68 |       ); 69 |     } 70 |  71 |     if (otpVerification.expiresAt < new Date()) { 72 |       return NextResponse.json( 73 |         { error: 'OTP code has expired. Please request a new one.' }, 74 |         { status: 400 } 75 |       ); 76 |     } 77 |  78 |     await prisma.otpVerification.update({ 79 |       where: { id: otpVerification.id }, 80 |       data: { 81 |         isVerified: true, 82 |         attempts: otpVerification.attempts + 1 83 |       } 84 |     }); 85 |  86 |     const existingUser = await prisma.user.findFirst({ 87 |       where: { 88 |         phone: phoneNumber 89 |       }, 90 |       select: { 91 |         id: true, 92 |         email: true, 93 |         fullName: true, 94 |         phone: true, 95 |         birthDate: true, 96 |         birthTime: true, 97 |         birthPlace: true, 98 |         language: true, 99 |         status: true100 |       }101 |     });102 | 103 |     if (existingUser) {104 | 105 |       return NextResponse.json({106 |         success: true,107 |         message: 'OTP verified successfully',108 |         user: {109 |           id: existingUser.id,110 |           email: existingUser.email,111 |           fullName: existingUser.fullName,112 |           phone: existingUser.phone,113 |           birthDate: existingUser.birthDate?.toISOString().split('T')[0],114 |           birthTime: existingUser.birthTime?.toString().substring(0, 5),115 |           birthPlace: existingUser.birthPlace,116 |           language: existingUser.language,117 |           status: existingUser.status118 |         },119 |         isExistingCustomer: true120 |       });121 |     } else {122 | 123 |       return NextResponse.json({124 |         success: true,125 |         message: 'OTP verified successfully',126 |         user: {127 |           phone: phoneNumber128 |         },129 |         isExistingCustomer: false130 |       });131 |     }132 | 133 |   } catch (error) {134 |     if (error instanceof z.ZodError) {135 |       return NextResponse.json(136 |         { error: 'Invalid request data', details: error.issues },137 |         { status: 400 }138 |       );139 |     }140 | 141 |     return NextResponse.json(142 |       { error: 'Internal server error' },143 |       { status: 500 }144 |     );145 |   }146 | }
==================================================END: frontend/app/api/otp/verify/route.ts==================================================


==================================================FILE: frontend/app/api/packages/route.tsSIZE: 3.51 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET(request: NextRequest) {  5 |   try {  6 |     const { searchParams } = new URL(request.url);  7 |     const activeOnly = searchParams.get('active') !== 'false';  8 |     const currency = searchParams.get('currency') || 'PEN';  9 |  10 |     const packages = await prisma.packageDefinition.findMany({ 11 |       where: { 12 |         isActive: activeOnly ? true : undefined 13 |       }, 14 |       select: { 15 |         id: true, 16 |         name: true, 17 |         description: true, 18 |         sessionsCount: true, 19 |         packageType: true, 20 |         maxGroupSize: true, 21 |         isPopular: true, 22 |         featured: true, 23 |         displayOrder: true, 24 |         packagePrices: { 25 |           where: { 26 |             isActive: true, 27 |             currency: { 28 |               code: currency 29 |             } 30 |           }, 31 |           select: { 32 |             id: true, 33 |             price: true, 34 |             pricingMode: true, 35 |             isActive: true, 36 |             currency: { 37 |               select: { 38 |                 id: true, 39 |                 code: true, 40 |                 name: true, 41 |                 symbol: true 42 |               } 43 |             } 44 |           }, 45 |           orderBy: { 46 |             price: 'asc' 47 |           } 48 |         }, 49 |         sessionDuration: { 50 |           select: { 51 |             id: true, 52 |             name: true, 53 |             duration_minutes: true, 54 |             description: true 55 |           } 56 |         } 57 |       }, 58 |       orderBy: [ 59 |         { displayOrder: 'asc' }, 60 |         { name: 'asc' } 61 |       ] 62 |     }); 63 |  64 |     const transformedPackages = packages.map(pkg => { 65 |  66 |       const price = pkg.packagePrices[0]; 67 |  68 |       if (!price) { 69 |         return null; 70 |       } 71 |  72 |       return { 73 |         id: price.id, 74 |         price: Number(price.price), 75 |         packageDefinition: { 76 |           id: pkg.id, 77 |           name: pkg.name, 78 |           description: pkg.description || '', 79 |           sessionsCount: pkg.sessionsCount, 80 |           isActive: true, 81 |           packageType: pkg.packageType, 82 |           maxGroupSize: pkg.maxGroupSize, 83 |           isPopular: pkg.isPopular, 84 |           featured: pkg.featured, 85 |           displayOrder: pkg.displayOrder, 86 |           sessionDuration: pkg.sessionDuration 87 |         }, 88 |         currency: { 89 |           id: price.currency.id, 90 |           code: price.currency.code, 91 |           symbol: price.currency.symbol, 92 |           name: price.currency.name 93 |         }, 94 |         pricingMode: price.pricingMode, 95 |         isActive: price.isActive 96 |       }; 97 |     }).filter(Boolean); 98 |  99 |     return NextResponse.json({100 |       success: true,101 |       data: transformedPackages,102 |       meta: {103 |         currency,104 |         total: transformedPackages.length105 |       }106 |     });107 | 108 |   } catch (error) {109 |     return NextResponse.json({110 |       success: false,111 |       error: 'Failed to fetch packages',112 |       message: 'An error occurred while fetching packages',113 |       details: process.env.NODE_ENV === 'development' ? (error instanceof Error ? error.message : 'Unknown error') : 'Internal server error'114 |     }, { status: 500 });115 |   }116 | }
==================================================END: frontend/app/api/packages/route.ts==================================================


==================================================FILE: frontend/app/api/payment-methods/route.tsSIZE: 1.12 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { PrismaClient } from '@prisma/client';  3 |   4 | export async function GET() {  5 |   const prisma = new PrismaClient();  6 |   7 |   try {  8 |     const paymentMethods = await prisma.paymentMethodConfig.findMany({  9 |       where: { 10 |         isActive: true 11 |       }, 12 |       select: { 13 |         id: true, 14 |         name: true, 15 |         type: true, 16 |         description: true, 17 |         icon: true, 18 |         requiresConfirmation: true, 19 |         autoAssignPackage: true, 20 |         isActive: true 21 |       }, 22 |       orderBy: { 23 |         name: 'asc' 24 |       } 25 |     }); 26 |  27 |     return NextResponse.json({ 28 |       success: true, 29 |       data: paymentMethods 30 |     }); 31 |  32 |   } catch (error) { 33 |     const message = error instanceof Error ? error.message : 'Unknown error'; 34 |     return NextResponse.json( 35 |       { 36 |         error: 'Failed to fetch payment methods', 37 |         details: message 38 |       }, 39 |       { status: 500 } 40 |     ); 41 |   } finally { 42 |     await prisma.$disconnect(); 43 |   } 44 | }
==================================================END: frontend/app/api/payment-methods/route.ts==================================================


==================================================FILE: frontend/app/api/performance/route.tsSIZE: 1.20 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { performanceMonitor, cacheMetrics } from '@/lib/performance';  3 | import { apiCache } from '@/lib/cache';  4 |   5 | export async function GET() {  6 |   try {  7 |     const metrics = performanceMonitor.getAllMetrics();  8 |     const cacheStats = apiCache.getStats();  9 |     const cacheDetails = cacheMetrics.getStats(); 10 |  11 |     return NextResponse.json({ 12 |       success: true, 13 |       performance: { 14 |         metrics, 15 |         cache: { 16 |           ...cacheStats, 17 |           ...cacheDetails 18 |         } 19 |       }, 20 |       timestamp: new Date().toISOString() 21 |     }); 22 |   } catch (error) { 23 |     return NextResponse.json( 24 |       { error: 'Failed to fetch performance metrics' }, 25 |       { status: 500 } 26 |     ); 27 |   } 28 | } 29 |  30 | export async function POST() { 31 |   try { 32 |  33 |     performanceMonitor.clearMetrics(); 34 |     cacheMetrics.reset(); 35 |  36 |     return NextResponse.json({ 37 |       success: true, 38 |       message: 'Performance metrics cleared' 39 |     }); 40 |   } catch (error) { 41 |     return NextResponse.json( 42 |       { error: 'Failed to clear performance metrics' }, 43 |       { status: 500 } 44 |     ); 45 |   } 46 | }
==================================================END: frontend/app/api/performance/route.ts==================================================


==================================================FILE: frontend/app/api/redis/route.tsSIZE: 2.20 KB==================================================
  1 | import { createClient } from "redis";  2 | import { NextResponse } from "next/server";  3 |   4 | let redis: ReturnType<typeof createClient> | null = null;  5 |   6 | async function getRedisClient() {  7 |   if (!redis) {  8 |     redis = createClient({  9 |       url: process.env.REDIS_URL || process.env.REDISCLOUD_URL || 'redis: 10 |     }); 11 |  12 |     redis.on('error', (err) => { 13 |       }); 14 |  15 |     redis.on('connect', () => { 16 |       }); 17 |  18 |     await redis.connect(); 19 |   } 20 |   return redis; 21 | } 22 |  23 | export async function GET() { 24 |   try { 25 |     const redisClient = await getRedisClient(); 26 |     const value = await redisClient.get("myKey"); 27 |  28 |     return NextResponse.json({ value }); 29 |   } catch (error) { 30 |     return NextResponse.json( 31 |       { error: 'Failed to get value from Redis' }, 32 |       { status: 500 } 33 |     ); 34 |   } 35 | } 36 |  37 | export async function POST(request: Request) { 38 |   try { 39 |     const redisClient = await getRedisClient(); 40 |     const body = await request.json(); 41 |     const { key, value } = body; 42 |  43 |     if (!key || value === undefined) { 44 |       return NextResponse.json( 45 |         { error: 'Key and value are required' }, 46 |         { status: 400 } 47 |       ); 48 |     } 49 |  50 |     await redisClient.set(key, String(value)); 51 |  52 |     return NextResponse.json({ 53 |       success: true, 54 |       key, 55 |       value 56 |     }); 57 |   } catch (error) { 58 |     return NextResponse.json( 59 |       { error: 'Failed to set value in Redis' }, 60 |       { status: 500 } 61 |     ); 62 |   } 63 | } 64 |  65 | export async function DELETE(request: Request) { 66 |   try { 67 |     const redisClient = await getRedisClient(); 68 |     const { searchParams } = new URL(request.url); 69 |     const key = searchParams.get('key'); 70 |  71 |     if (!key) { 72 |       return NextResponse.json( 73 |         { error: 'Key parameter is required' }, 74 |         { status: 400 } 75 |       ); 76 |     } 77 |  78 |     const result = await redisClient.del(key); 79 |  80 |     return NextResponse.json({ 81 |       success: true, 82 |       key, 83 |       deleted: result > 0 84 |     }); 85 |   } catch (error) { 86 |     return NextResponse.json( 87 |       { error: 'Failed to delete key from Redis' }, 88 |       { status: 500 } 89 |     ); 90 |   } 91 | }
==================================================END: frontend/app/api/redis/route.ts==================================================


==================================================FILE: frontend/app/api/redis-test/route.tsSIZE: 3.10 KB==================================================
  1 | import { createClient } from 'redis';  2 | import { NextRequest, NextResponse } from 'next/server';  3 | import { RedisMonitor } from '@/lib/redis';  4 |   5 | export async function GET(request: NextRequest) {  6 |   const startTime = Date.now();  7 |   8 |   try {  9 |  10 |     const redis = createClient({ 11 |       url: process.env.REDIS_URL || process.env.REDISCLOUD_URL || 'redis: 12 |     }); 13 |  14 |     await redis.connect(); 15 |  16 |     const testKey = 'test:item'; 17 |     const testValue = JSON.stringify({ 18 |       message: 'Hello from Redis!', 19 |       timestamp: new Date().toISOString(), 20 |       userAgent: request.headers.get('user-agent') 21 |     }); 22 |  23 |     await redis.setEx(testKey, 300, testValue); 24 |  25 |     const result = await redis.get(testKey); 26 |  27 |     const ttl = await redis.ttl(testKey); 28 |  29 |     await redis.disconnect(); 30 |  31 |     RedisMonitor.recordOperation('redis_test', Date.now() - startTime); 32 |  33 |     return NextResponse.json({ 34 |       success: true, 35 |       data: { 36 |         stored: JSON.parse(result || '{}'), 37 |         ttl, 38 |         redisConnected: true, 39 |         performance: RedisMonitor.getStats() 40 |       } 41 |     }, { status: 200 }); 42 |  43 |   } catch (error) { 44 |  45 |     RedisMonitor.recordOperation('redis_test_error', Date.now() - startTime); 46 |  47 |     return NextResponse.json({ 48 |       success: false, 49 |       error: 'Redis connection failed', 50 |       message: error instanceof Error ? error.message : 'Unknown error', 51 |       fallbackCache: true 52 |     }, { status: 200 }); 53 |   } 54 | } 55 |  56 | export async function POST(request: NextRequest) { 57 |   const startTime = Date.now(); 58 |  59 |   try { 60 |  61 |     const redis = await createClient({ 62 |       url: process.env.REDIS_URL || process.env.REDISCLOUD_URL || 'redis: 63 |     }).connect(); 64 |  65 |     const body = await request.json(); 66 |     const { key, value, ttl = 300 } = body; 67 |  68 |     if (!key || !value) { 69 |       return NextResponse.json({ 70 |         success: false, 71 |         error: 'Missing key or value in request body' 72 |       }, { status: 400 }); 73 |     } 74 |  75 |     await redis.setEx(key, ttl, JSON.stringify(value)); 76 |  77 |     const storedValue = await redis.get(key); 78 |  79 |     await redis.disconnect(); 80 |  81 |     RedisMonitor.recordOperation('redis_set', Date.now() - startTime); 82 |  83 |     return NextResponse.json({ 84 |       success: true, 85 |       data: { 86 |         key, 87 |         stored: JSON.parse(storedValue || '{}'), 88 |         ttl, 89 |         redisConnected: true 90 |       } 91 |     }, { status: 200 }); 92 |  93 |   } catch (error) { 94 |  95 |     RedisMonitor.recordOperation('redis_set_error', Date.now() - startTime); 96 |  97 |     return NextResponse.json({ 98 |       success: false, 99 |       error: 'Failed to store data in Redis',100 |       message: error instanceof Error ? error.message : 'Unknown error'101 |     }, { status: 500 });102 |   }103 | }
==================================================END: frontend/app/api/redis-test/route.ts==================================================


==================================================FILE: frontend/app/api/revalidate/route.tsSIZE: 2.13 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { revalidatePath, revalidateTag } from 'next/cache';  3 |   4 | export async function POST(request: NextRequest) {  5 |   try {  6 |     const { searchParams } = new URL(request.url);  7 |     const path = searchParams.get('path');  8 |     const tag = searchParams.get('tag');  9 |  10 |     if (!path && !tag) { 11 |       return NextResponse.json( 12 |         { error: 'Missing path or tag parameter' }, 13 |         { status: 400 } 14 |       ); 15 |     } 16 |  17 |     if (path) { 18 |  19 |       revalidatePath(path); 20 |       } 21 |  22 |     if (tag) { 23 |  24 |       revalidateTag(tag); 25 |       } 26 |  27 |     revalidatePath('/'); 28 |     revalidatePath('/admin'); 29 |  30 |     revalidateTag('content'); 31 |     revalidateTag('translations'); 32 |     revalidateTag('sections'); 33 |  34 |     return NextResponse.json({ 35 |       success: true, 36 |       message: 'Revalidation completed', 37 |       revalidated: { 38 |         path: path || null, 39 |         tag: tag || null, 40 |         home: '/', 41 |         admin: '/admin', 42 |         contentTags: ['content', 'translations', 'sections'] 43 |       } 44 |     }); 45 |  46 |   } catch (error) { 47 |     return NextResponse.json( 48 |       { 49 |         error: 'Revalidation failed', 50 |         details: error instanceof Error ? error.message : 'Unknown error' 51 |       }, 52 |       { status: 500 } 53 |     ); 54 |   } 55 | } 56 |  57 | export async function GET() { 58 |   return NextResponse.json({ 59 |     message: 'Revalidation endpoint is working', 60 |     usage: { 61 |       method: 'POST', 62 |       parameters: { 63 |         path: 'Optional: Path to revalidate (e.g., /api/revalidate?path=/about)', 64 |         tag: 'Optional: Tag to revalidate (e.g., /api/revalidate?tag=content)' 65 |       }, 66 |       examples: [ 67 |         'POST /api/revalidate?path=/', 68 |         'POST /api/revalidate?tag=content', 69 |         'POST /api/revalidate?path=/&tag=translations' 70 |       ] 71 |     } 72 |   }); 73 | }
==================================================END: frontend/app/api/revalidate/route.ts==================================================


==================================================FILE: frontend/app/api/schedule-slots/route.tsSIZE: 2.81 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { PrismaClient } from '@prisma/client';  3 |   4 | export async function GET(request: NextRequest) {  5 |   const prisma = new PrismaClient();  6 |   7 |   try {  8 |     const { searchParams } = new URL(request.url);  9 |     const availableOnly = searchParams.get('available') === 'true'; 10 |     const date = searchParams.get('date'); 11 |  12 |     const whereClause: Record<string, unknown> = {}; 13 |  14 |     if (availableOnly) { 15 |       whereClause.isAvailable = true; 16 |  17 |       whereClause.OR = [ 18 |         { capacity: null }, 19 |         { 20 |           AND: [ 21 |             { capacity: { not: null } }, 22 |             { bookedCount: { lt: prisma.scheduleSlot.fields.capacity } } 23 |           ] 24 |         } 25 |       ]; 26 |     } 27 |  28 |     if (date) { 29 |       const startOfDay = new Date(date); 30 |       const endOfDay = new Date(date); 31 |       endOfDay.setDate(endOfDay.getDate() + 1); 32 |  33 |       whereClause.startTime = { 34 |         gte: startOfDay, 35 |         lt: endOfDay 36 |       }; 37 |     } 38 |  39 |     const slots = await prisma.scheduleSlot.findMany({ 40 |       where: whereClause, 41 |       select: { 42 |         id: true, 43 |         startTime: true, 44 |         endTime: true, 45 |         capacity: true, 46 |         bookedCount: true, 47 |         isAvailable: true, 48 |         scheduleTemplate: { 49 |           select: { 50 |             sessionDuration: { 51 |               select: { 52 |                 name: true, 53 |                 duration_minutes: true 54 |               } 55 |             } 56 |           } 57 |         } 58 |       }, 59 |       orderBy: [ 60 |         { startTime: 'asc' } 61 |       ] 62 |     }); 63 |  64 |     const transformedSlots = slots.map(slot => ({ 65 |       id: slot.id, 66 |       date: slot.startTime.toISOString().split('T')[0], 67 |       time: slot.startTime.toTimeString().split(' ')[0].substring(0, 5), 68 |       isAvailable: slot.isAvailable && (slot.capacity === null || (slot.bookedCount || 0) < slot.capacity), 69 |       capacity: slot.capacity, 70 |       bookedCount: slot.bookedCount || 0, 71 |       duration: slot.scheduleTemplate.sessionDuration?.duration_minutes || 60, 72 |       sessionType: slot.scheduleTemplate.sessionDuration?.name || 'Standard Session' 73 |     })); 74 |  75 |     return NextResponse.json({ 76 |       success: true, 77 |       slots: transformedSlots 78 |     }); 79 |  80 |   } catch (error) { 81 |     return NextResponse.json({ 82 |       success: false, 83 |       error: 'Failed to fetch schedule slots', 84 |       message: 'An error occurred while fetching schedule slots' 85 |     }, { status: 500 }); 86 |   } finally { 87 |     await prisma.$disconnect(); 88 |   } 89 | }
==================================================END: frontend/app/api/schedule-slots/route.ts==================================================


==================================================FILE: frontend/app/api/schedules/route.tsSIZE: 5.30 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { z } from 'zod';  4 |   5 | const supabase = createClient(  6 |   process.env.NEXT_PUBLIC_SUPABASE_URL!,  7 |   process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!  8 | );  9 |  10 | const scheduleCreateSchema = z.object({ 11 |   day_of_week: z.string().min(1, 'Day of week is required'), 12 |   start_time: z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format (HH:MM)'), 13 |   end_time: z.string().regex(/^\d{2}:\d{2}$/, 'Invalid time format (HH:MM)'), 14 |   capacity: z.number().min(1, 'Capacity must be at least 1').max(10, 'Capacity cannot exceed 10').optional(), 15 |   is_available: z.boolean().default(true), 16 |   auto_available: z.boolean().default(true).optional(), 17 |   session_duration_id: z.number().optional() 18 | }); 19 |  20 | export async function GET(request: NextRequest) { 21 |   try { 22 |     const { searchParams } = new URL(request.url); 23 |     const dayOfWeek = searchParams.get('day_of_week'); 24 |     const available = searchParams.get('available'); 25 |  26 |     let query = supabase 27 |       .from('schedule_templates') 28 |       .select('*') 29 |       .order('day_of_week', { ascending: true }) 30 |       .order('start_time', { ascending: true }); 31 |  32 |     if (dayOfWeek) { 33 |       query = query.eq('day_of_week', dayOfWeek); 34 |     } 35 |  36 |     if (available !== null) { 37 |       query = query.eq('is_available', available === 'true'); 38 |     } 39 |  40 |     const { data: schedules, error } = await query; 41 |  42 |     if (error) { 43 |       return NextResponse.json({ 44 |         success: false, 45 |         error: 'Database error', 46 |         message: 'Failed to fetch schedules', 47 |         details: error.message, 48 |         toast: { 49 |           type: 'error', 50 |           title: 'Database Error', 51 |           description: 'Failed to fetch schedules. Please try again.' 52 |         } 53 |       }, { status: 500 }); 54 |     } 55 |  56 |     return NextResponse.json({ 57 |       success: true, 58 |       data: schedules 59 |     }); 60 |  61 |   } catch (error) { 62 |     return NextResponse.json({ 63 |       success: false, 64 |       error: 'Internal server error', 65 |       message: 'An unexpected error occurred', 66 |       toast: { 67 |         type: 'error', 68 |         title: 'Unexpected Error', 69 |         description: 'An unexpected error occurred. Please try again.' 70 |       } 71 |     }, { status: 500 }); 72 |   } 73 | } 74 |  75 | export async function POST(request: NextRequest) { 76 |   try { 77 |     const body = await request.json(); 78 |  79 |     const validation = scheduleCreateSchema.safeParse(body); 80 |     if (!validation.success) { 81 |       return NextResponse.json({ 82 |         success: false, 83 |         error: 'Validation failed', 84 |         message: 'Schedule data validation failed', 85 |         details: validation.error.issues, 86 |         toast: { 87 |           type: 'error', 88 |           title: 'Validation Error', 89 |           description: 'Schedule data validation failed. Please check the form fields.' 90 |         } 91 |       }, { status: 400 }); 92 |     } 93 |  94 |     const scheduleData = validation.data; 95 |  96 |     const { data: existingSchedule } = await supabase 97 |       .from('schedule_templates') 98 |       .select('id') 99 |       .eq('day_of_week', scheduleData.day_of_week)100 |       .eq('start_time', scheduleData.start_time)101 |       .single();102 | 103 |     if (existingSchedule) {104 |       return NextResponse.json({105 |         success: false,106 |         error: 'Schedule already exists',107 |         message: 'A schedule already exists for this day and time',108 |         toast: {109 |           type: 'error',110 |           title: 'Schedule Exists',111 |           description: 'A schedule already exists for this day and time'112 |         }113 |       }, { status: 409 });114 |     }115 | 116 |     const { data, error } = await supabase117 |       .from('schedule_templates')118 |       .insert({119 |         day_of_week: scheduleData.day_of_week,120 |         start_time: scheduleData.start_time,121 |         end_time: scheduleData.end_time,122 |         capacity: scheduleData.capacity,123 |         is_available: scheduleData.is_available,124 |         auto_available: scheduleData.auto_available,125 |         session_duration_id: scheduleData.session_duration_id,126 |         created_at: new Date().toISOString()127 |       })128 |       .select()129 |       .single();130 | 131 |     if (error) {132 |       return NextResponse.json({133 |         success: false,134 |         error: 'Database error',135 |         message: 'Failed to create schedule',136 |         details: error.message,137 |         toast: {138 |           type: 'error',139 |           title: 'Schedule Creation Failed',140 |           description: 'Failed to create schedule. Please try again.'141 |         }142 |       }, { status: 500 });143 |     }144 | 145 |     return NextResponse.json({146 |       success: true,147 |       message: 'Schedule created successfully',148 |       data,149 |       toast: {150 |         type: 'success',151 |         title: 'Success!',152 |         description: `Schedule for ${data.day_of_week} at ${data.start_time} created successfully`153 |       }154 |     }, { status: 201 });155 | 156 |   } catch (error) {157 |     return NextResponse.json({158 |       success: false,159 |       error: 'Internal server error',160 |       message: 'An unexpected error occurred',161 |       toast: {162 |         type: 'error',163 |         title: 'Unexpected Error',164 |         description: 'An unexpected error occurred. Please try again.'165 |       }166 |     }, { status: 500 });167 |   }168 | }
==================================================END: frontend/app/api/schedules/route.ts==================================================


==================================================FILE: frontend/app/api/sections/route.tsSIZE: 6.09 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import { withCache } from '@/lib/cache';  4 |   5 | export const revalidate = 3600;  6 |   7 | export async function GET() {  8 |   const startTime = Date.now();  9 |  10 |   try { 11 |  12 |     const defaultSections = [ 13 |       { 14 |         id: 'invitation', 15 |         type: 'hero', 16 |         title: 'Invitation', 17 |         description: 'Main landing section with cosmic theme', 18 |         icon: 'Star', 19 |         component: 'HeroSection', 20 |         order: 0, 21 |         enabled: true, 22 |         mobileConfig: { 23 |           padding: 'pt-20 pb-12', 24 |           layout: 'center', 25 |           imageSize: 'large' 26 |         }, 27 |         desktopConfig: { 28 |           padding: 'pt-16 pb-20', 29 |           layout: 'center', 30 |           imageSize: 'large' 31 |         } 32 |       }, 33 |       { 34 |         id: 'approach', 35 |         type: 'content', 36 |         title: 'Our Approach', 37 |         description: 'How we work and our methodology', 38 |         icon: 'Compass', 39 |         component: 'ApproachSection', 40 |         order: 1, 41 |         enabled: true, 42 |         mobileConfig: { 43 |           padding: 'pt-20 pb-12', 44 |           layout: 'stack', 45 |           imageSize: 'medium' 46 |         }, 47 |         desktopConfig: { 48 |           padding: 'pt-16 pb-20', 49 |           layout: 'grid', 50 |           imageSize: 'medium' 51 |         } 52 |       }, 53 |       { 54 |         id: 'session', 55 |         type: 'content', 56 |         title: 'Sessions & Services', 57 |         description: 'Available services and session types', 58 |         icon: 'Clock', 59 |         component: 'SessionSection', 60 |         order: 2, 61 |         enabled: true, 62 |         mobileConfig: { 63 |           padding: 'pt-20 pb-12', 64 |           layout: 'stack', 65 |           imageSize: 'medium' 66 |         }, 67 |         desktopConfig: { 68 |           padding: 'pt-16 pb-20', 69 |           layout: 'grid', 70 |           imageSize: 'medium' 71 |         } 72 |       }, 73 |       { 74 |         id: 'about', 75 |         type: 'content', 76 |         title: 'About MatMax Yoga Studio', 77 |         description: 'Information about MatMax Yoga Studio and our approach', 78 |         icon: 'User', 79 |         component: 'AboutSection', 80 |         order: 3, 81 |         enabled: true, 82 |         mobileConfig: { 83 |           padding: 'pt-20 pb-12', 84 |           layout: 'stack', 85 |           imageSize: 'large' 86 |         }, 87 |         desktopConfig: { 88 |           padding: 'pt-16 pb-20', 89 |           layout: 'grid', 90 |           imageSize: 'large' 91 |         } 92 |       }, 93 |       { 94 |         id: 'apply', 95 |         type: 'form', 96 |         title: 'Book Your Session', 97 |         description: 'Booking form and scheduling', 98 |         icon: 'Calendar', 99 |         component: 'BookingSection',100 |         order: 4,101 |         enabled: true,102 |         mobileConfig: {103 |           padding: 'pt-20 pb-12',104 |           layout: 'center',105 |           imageSize: 'small'106 |         },107 |         desktopConfig: {108 |           padding: 'pt-16 pb-20',109 |           layout: 'center',110 |           imageSize: 'small'111 |         }112 |       }113 |     ];114 | 115 |     let sections;116 |     try {117 |       sections = await withCache(118 |         'sections',119 |         async () => {120 |           try {121 |             return await prisma.section.findMany({122 |               where: { enabled: true },123 |               orderBy: { order: 'asc' },124 |               select: {125 |                 sectionId: true,126 |                 type: true,127 |                 title: true,128 |                 description: true,129 |                 icon: true,130 |                 component: true,131 |                 order: true,132 |                 enabled: true,133 |                 mobileConfig: true,134 |                 desktopConfig: true135 |               }136 |             });137 |           } catch {138 |             return [] as Array<Record<string, unknown>>;139 |           }140 |         },141 |         10 * 60 * 1000142 |       );143 | 144 |       if (sections && sections.length > 0) {145 | 146 |         const transformedSections = sections.map(section => ({147 |           id: section.sectionId,148 |           type: section.type,149 |           title: section.title,150 |           description: section.description,151 |           icon: section.icon,152 |           component: section.component,153 |           order: section.order,154 |           enabled: section.enabled,155 |           mobileConfig: section.mobileConfig || {},156 |           desktopConfig: section.desktopConfig || {}157 |         }));158 | 159 |         const processingTime = Date.now() - startTime;160 | 161 |         return NextResponse.json({162 |           success: true,163 |           sections: transformedSections,164 |           timestamp: new Date().toISOString(),165 |           processingTime: `${processingTime}ms`,166 |           source: 'database'167 |         });168 |       }169 |     } catch {170 | 171 |     }172 | 173 |     ');174 | 175 |     const processingTime = Date.now() - startTime;176 | 177 |     return NextResponse.json({178 |       success: true,179 |       sections: defaultSections,180 |       timestamp: new Date().toISOString(),181 |       processingTime: `${processingTime}ms`,182 |       source: 'default',183 |       message: 'Using default section configuration'184 |     });185 | 186 |   } catch (error) {187 |     const processingTime = Date.now() - startTime;188 |     :`, error);189 | 190 |     const errorMessage = error instanceof Error ? error.message : 'Unknown error';191 | 192 |     return NextResponse.json({193 |       error: 'Internal server error',194 |       message: errorMessage,195 |       timestamp: new Date().toISOString(),196 |       processingTime: `${processingTime}ms`,197 |       sections: [198 |         {199 |           id: 'invitation',200 |           type: 'hero',201 |           title: 'Invitation',202 |           description: 'Main landing section with cosmic theme',203 |           icon: 'Star',204 |           component: 'HeroSection',205 |           order: 0,206 |           enabled: true207 |         }208 |       ]209 |     }, { status: 500 });210 |   }211 | }
==================================================END: frontend/app/api/sections/route.ts==================================================


==================================================FILE: frontend/app/api/seo/route.tsSIZE: 1.51 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { createClient } from '@supabase/supabase-js';  3 | import { requireAuth } from '@/lib/auth';  4 |   5 | const supabase = createClient(  6 |   process.env.NEXT_PUBLIC_SUPABASE_URL!,  7 |   process.env.SUPABASE_SERVICE_ROLE_KEY!  8 | );  9 |  10 | export async function GET() { 11 |   try { 12 |     const { data, error } = await supabase 13 |       .from('seo') 14 |       .select('*') 15 |       .single(); 16 |  17 |     if (error) { 18 |       return NextResponse.json({ error: 'Failed to fetch SEO settings' }, { status: 500 }); 19 |     } 20 |  21 |     return NextResponse.json({ seo: data }); 22 |   } catch (error) { 23 |     return NextResponse.json({ error: 'Internal server error' }, { status: 500 }); 24 |   } 25 | } 26 |  27 | export async function POST(request: NextRequest) { 28 |   try { 29 |     const user = await requireAuth(request); 30 |     if (!user) { 31 |       return NextResponse.json({ error: 'Unauthorized' }, { status: 401 }); 32 |     } 33 |  34 |     const body = await request.json(); 35 |  36 |     const { data, error } = await supabase 37 |       .from('seo') 38 |       .upsert(body, { onConflict: 'id' }) 39 |       .select() 40 |       .single(); 41 |  42 |     if (error) { 43 |       return NextResponse.json({ error: 'Failed to update SEO settings' }, { status: 500 }); 44 |     } 45 |  46 |     return NextResponse.json({ seo: data }); 47 |   } catch (error) { 48 |     return NextResponse.json({ error: 'Internal server error' }, { status: 500 }); 49 |   } 50 | }
==================================================END: frontend/app/api/seo/route.ts==================================================


==================================================FILE: frontend/app/api/telegram/webhook/route.tsSIZE: 13.21 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.3-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED !== 'false', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'database' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'greet': { 38 |     action: 'greet_user', 39 |     apiEndpoint: undefined, 40 |     description: undefined 41 |   }, 42 |   'book_session': { 43 |     action: 'book_session', 44 |     apiEndpoint: '/bookings', 45 |     description: 'Te ayudo a reservar una sesión. ¿Qué tipo de sesión te interesa?' 46 |   }, 47 |   'ask_packages': { 48 |     action: 'view_packages', 49 |     apiEndpoint: '/packages', 50 |     description: 'Aquí tienes nuestros paquetes disponibles:' 51 |   }, 52 |   'show_packages': { 53 |     action: 'view_packages', 54 |     apiEndpoint: '/packages', 55 |     description: 'Aquí tienes nuestros paquetes disponibles:' 56 |   }, 57 |   'view_packages': { 58 |     action: 'view_packages', 59 |     apiEndpoint: '/packages', 60 |     description: 'Aquí tienes nuestros paquetes disponibles:' 61 |   }, 62 |   'check_balance': { 63 |     action: 'check_balance', 64 |     apiEndpoint: '/user/balance', 65 |     description: 'Tu saldo actual es:' 66 |   }, 67 |   'contact_support': { 68 |     action: 'contact_support', 69 |     apiEndpoint: undefined, 70 |     description: 'Para contactar soporte, puedes escribirnos a support@soulpath.lat o usar nuestro chat en vivo.' 71 |   }, 72 |   'goodbye': { 73 |     action: 'goodbye', 74 |     apiEndpoint: undefined, 75 |     description: '¡Hasta luego! Que tengas un excelente día. 🙏' 76 |   } 77 | }; 78 |  79 | let orchestrator: ConversationalOrchestrator | null = null; 80 |  81 | function getTelegramOrchestrator(): ConversationalOrchestrator { 82 |   if (!orchestrator) { 83 |     orchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping); 84 |   } 85 |   return orchestrator; 86 | } 87 |  88 | function getBaseUrl(): string { 89 |  90 |   if (process.env.NEXT_PUBLIC_BASE_URL) { 91 |     return process.env.NEXT_PUBLIC_BASE_URL; 92 |   } 93 |  94 |   let port = process.env.PORT || 3000; 95 |  96 |   if (!process.env.PORT) { 97 |  98 |     port = 3001; 99 |   }100 | 101 |   const baseUrl = `http:102 |   `);103 |   return baseUrl;104 | }105 | 106 | export async function GET() {107 |   try {108 |     return NextResponse.json({109 |       status: 'ok',110 |       channel: 'telegram',111 |       timestamp: new Date().toISOString()112 |     });113 |   } catch (error) {114 |     return NextResponse.json(115 |       { error: 'Internal server error' },116 |       { status: 500 }117 |     );118 |   }119 | }120 | 121 | export async function POST(request: NextRequest) {122 |   try {123 |     const body = await request.json();124 |     );125 | 126 |     if (!body.update_id) {127 |       return NextResponse.json({ status: 'ok' });128 |     }129 | 130 |     const message = body.message;131 |     const callbackQuery = body.callback_query;132 | 133 |     if (message) {134 | 135 |       const chatId = message.chat?.id;136 |       const text = message.text;137 |       const userInfo = message.from;138 | 139 |       if (!chatId || !text) {140 |         return NextResponse.json({ status: 'ok' });141 |       }142 | 143 |       const conversationContext = {144 |         userId: chatId.toString(),145 |         sessionId: `telegram_${chatId}_${message.chat?.id}`,146 |         conversationHistory: []147 |       };148 | 149 |       const lowerText = text.toLowerCase();150 |       const isPackageRequest = lowerText.includes('paquetes') || lowerText.includes('packages') ||151 |                               lowerText.includes('lista') || lowerText.includes('list') ||152 |                               lowerText.includes('mostrar') || lowerText.includes('show') ||153 |                               lowerText.includes('ver') || lowerText.includes('see') ||154 |                               lowerText.includes('dame') || lowerText.includes('give me') ||155 |                               lowerText.includes('precios') || lowerText.includes('prices') ||156 |                               lowerText.includes('precio') || lowerText.includes('price') ||157 |                               lowerText.includes('costo') || lowerText.includes('cost') ||158 |                               lowerText.includes('tarifa') || lowerText.includes('rates') ||159 |                               lowerText.includes('cuánto') || lowerText.includes('how much');160 | 161 |       let response;162 | 163 |       if (isPackageRequest) {164 |         const baseUrl = getBaseUrl();165 |         try {166 |           const hybridResponse = await fetch(`${baseUrl}/api/chat/hybrid`, {167 |             method: 'POST',168 |             headers: {169 |               'Content-Type': 'application/json',170 |             },171 |             body: JSON.stringify({172 |               message: text,173 |               userId: chatId.toString(),174 |               conversationHistory: []175 |             }),176 |           });177 | 178 |           if (hybridResponse.ok) {179 |             const hybridData = await hybridResponse.json();180 |             if (hybridData.success && hybridData.response) {181 |               response = {182 |                 success: true,183 |                 data: {184 |                   text: hybridData.response,185 |                   intent: 'package_request',186 |                   confidence: 0.9,187 |                   entities: []188 |                 }189 |               };190 |             }191 |           }192 |         } catch (error) {193 |           }194 |       }195 | 196 |       if (!response) {197 |         const orchestrator = getTelegramOrchestrator();198 |         response = await orchestrator.processMessage(text, conversationContext);199 |       }200 | 201 |       if (!response || !('success' in response) || !response.success || !response.data || !(response.data as Record<string, unknown>).text) {202 |         const baseUrl = getBaseUrl();203 |         try {204 |           const hybridResponse = await fetch(`${baseUrl}/api/chat/hybrid`, {205 |             method: 'POST',206 |             headers: {207 |               'Content-Type': 'application/json',208 |             },209 |             body: JSON.stringify({210 |               message: text,211 |               userId: chatId.toString(),212 |               conversationHistory: []213 |             }),214 |           });215 | 216 |           if (hybridResponse.ok) {217 |             const hybridData = await hybridResponse.json();218 |             if (hybridData.success && hybridData.response) {219 |               response = {220 |                 success: true,221 |                 data: {222 |                   text: hybridData.response,223 |                   intent: 'hybrid_fallback',224 |                   confidence: 0.8,225 |                   entities: []226 |                 }227 |               };228 |             }229 |           }230 |         } catch (error) {231 |           }232 |       }233 | 234 |       if (response && 'success' in response && response.success && response.data && (response.data as Record<string, unknown>).text) {235 |         const responseText = (response.data as Record<string, unknown>).text as string;236 |         await sendTelegramMessage(chatId.toString(), responseText);237 |         } else {238 |         }239 | 240 |     } else if (callbackQuery) {241 | 242 |       const chatId = callbackQuery.message?.chat?.id;243 |       const data = callbackQuery.data;244 |       const userInfo = callbackQuery.from;245 | 246 |       if (!chatId || !data) {247 |         return NextResponse.json({ status: 'ok' });248 |       }249 | 250 |       const conversationContext = {251 |         userId: chatId.toString(),252 |         sessionId: `telegram_${chatId}_${callbackQuery.message?.chat?.id}`,253 |         conversationHistory: []254 |       };255 | 256 |       const orchestrator = getTelegramOrchestrator();257 |       const response = await orchestrator.processMessage(data, conversationContext);258 | 259 |       if (response && 'success' in response && response.success && response.data && (response.data as Record<string, unknown>).text) {260 |         const responseText = (response.data as Record<string, unknown>).text as string;261 |         await sendTelegramMessage(chatId.toString(), responseText);262 |         } else {263 |         }264 | 265 |       await answerCallbackQuery(callbackQuery.id);266 |     }267 | 268 |     return NextResponse.json({ status: 'ok' });269 | 270 |   } catch (error) {271 |     return NextResponse.json(272 |       { error: 'Internal server error' },273 |       { status: 500 }274 |     );275 |   }276 | }277 | 278 | async function sendTelegramMessage(chatId: string, text: string): Promise<void> {279 |   const botToken = process.env.TELEGRAM_BOT_TOKEN || '8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig';280 |   const url = `https:281 | 282 |   try {283 |     const response = await fetch(url, {284 |       method: 'POST',285 |       headers: {286 |         'Content-Type': 'application/json',287 |       },288 |       body: JSON.stringify({289 |         chat_id: chatId,290 |         text: text,291 |         parse_mode: 'HTML'292 |       }),293 |     });294 | 295 |     if (!response.ok) {296 |       const errorText = await response.text();297 |       } else {298 |       }299 |   } catch (error) {300 |     }301 | }302 | 303 | async function answerCallbackQuery(callbackQueryId: string): Promise<void> {304 |   const botToken = process.env.TELEGRAM_BOT_TOKEN || '8381849581:AAG7bQxK23l5m2MeKJDnMIpGEzy0SeEYSig';305 |   const url = `https:306 | 307 |   try {308 |     const response = await fetch(url, {309 |       method: 'POST',310 |       headers: {311 |         'Content-Type': 'application/json',312 |       },313 |       body: JSON.stringify({314 |         callback_query_id: callbackQueryId315 |       }),316 |     });317 | 318 |     if (!response.ok) {319 |       const errorText = await response.text();320 |       } else {321 |       }322 |   } catch (error) {323 |     }324 | }
==================================================END: frontend/app/api/telegram/webhook/route.ts==================================================


==================================================FILE: frontend/app/api/test/db/route.tsSIZE: 3.74 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 | import * as bcrypt from 'bcryptjs';  4 |   5 | export async function GET() {  6 |   try {  7 |   8 |     await prisma.$connect();  9 |  10 |     const userCount = await prisma.user.count(); 11 |  12 |     const users = await prisma.user.findMany({ 13 |       select: { 14 |         id: true, 15 |         email: true, 16 |         role: true, 17 |         fullName: true, 18 |         password: true, 19 |         createdAt: true 20 |       } 21 |     }); 22 |  23 |     try { 24 |       await prisma.user.findUnique({ 25 |         where: { email: 'test@example.com' } 26 |       }); 27 |       } catch (queryError) { 28 |       } 29 |  30 |     )); 31 |  32 |     return NextResponse.json({ 33 |       success: true, 34 |       data: { 35 |         connectionStatus: 'connected', 36 |         userCount, 37 |         users: users.map(u => ({ 38 |           id: u.id, 39 |           email: u.email, 40 |           role: u.role, 41 |           fullName: u.fullName, 42 |           hasPassword: !!u.password, 43 |           createdAt: u.createdAt 44 |         })) 45 |       } 46 |     }); 47 |  48 |   } catch (error) { 49 |     return NextResponse.json({ 50 |       success: false, 51 |       error: 'Database test failed', 52 |       message: error instanceof Error ? error.message : 'Unknown error', 53 |       details: error instanceof Error ? error.stack : undefined 54 |     }, { status: 500 }); 55 |   } 56 | } 57 |  58 | export async function POST(request: NextRequest) { 59 |   try { 60 |     const { email, password, fullName, role } = await request.json(); 61 |  62 |     if (!email || !password) { 63 |       return NextResponse.json({ 64 |         success: false, 65 |         error: 'Missing required fields', 66 |         message: 'Email and password are required' 67 |       }, { status: 400 }); 68 |     } 69 |  70 |     const existingUser = await prisma.user.findUnique({ 71 |       where: { email: email.toLowerCase() } 72 |     }); 73 |  74 |     if (existingUser) { 75 |       return NextResponse.json({ 76 |         success: false, 77 |         error: 'User already exists', 78 |         message: 'A user with this email already exists' 79 |       }, { status: 409 }); 80 |     } 81 |  82 |     const hashedPassword = await bcrypt.hash(password, 12); 83 |  84 |     const user = await prisma.user.create({ 85 |       data: { 86 |         email: email.toLowerCase(), 87 |         password: hashedPassword, 88 |         fullName: fullName || 'Test User', 89 |         role: role || 'admin' 90 |       } 91 |     }); 92 |  93 |     return NextResponse.json({ 94 |       success: true, 95 |       data: { 96 |         id: user.id, 97 |         email: user.email, 98 |         role: user.role, 99 |         fullName: user.fullName,100 |         createdAt: user.createdAt101 |       },102 |       message: 'Test user created successfully'103 |     });104 | 105 |   } catch (error) {106 |     return NextResponse.json({107 |       success: false,108 |       error: 'User creation failed',109 |       message: error instanceof Error ? error.message : 'Unknown error',110 |       details: error instanceof Error ? error.stack : undefined111 |     }, { status: 500 });112 |   }113 | }
==================================================END: frontend/app/api/test/db/route.ts==================================================


==================================================FILE: frontend/app/api/test/logging/route.tsSIZE: 1.28 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { LoggingService } from '@/lib/services/logging-service';  3 |   4 | export async function POST() {  5 |   try {  6 |     const loggingService = new LoggingService({  7 |       enabled: true,  8 |       storage: 'database',  9 |       level: 'info' 10 |     }); 11 |  12 |     const logId = await loggingService.logConversation({ 13 |       sessionId: `test_${Date.now()}`, 14 |       userId: 'test_user', 15 |       message: 'Test message from logging test endpoint', 16 |       userMessage: 'Test message from logging test endpoint', 17 |       botResponse: 'Test response from logging test endpoint', 18 |       rasaIntent: 'test', 19 |       rasaConfidence: 0.9, 20 |       rasaEntities: [], 21 |       responseGenerator: 'test', 22 |       bookingStep: null, 23 |       bookingDataSnapshot: null, 24 |       modelVersion: '1.0.0', 25 |       intent: 'test', 26 |       entities: [], 27 |       action: 'test', 28 |       rasaResponse: 'Test response', 29 |       llmResponse: 'Test response', 30 |       apiCalls: [], 31 |       processingTime: 100, 32 |       success: true, 33 |         error: undefined 34 |     }); 35 |  36 |     return NextResponse.json({ 37 |       success: true, 38 |       logId, 39 |       message: 'Test log created successfully' 40 |     }); 41 |   } catch (error) { 42 |     return NextResponse.json({ 43 |       success: false, 44 |       error: error instanceof Error ? error.message : String(error) 45 |     }, { status: 500 }); 46 |   } 47 | }
==================================================END: frontend/app/api/test/logging/route.ts==================================================


==================================================FILE: frontend/app/api/test/openrouter/route.tsSIZE: 1.15 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { OpenRouterService } from '@/lib/services/openrouter-service';  3 |   4 | export async function GET() {  5 |   try {  6 |     const openRouterService = new OpenRouterService();  7 |   8 |     const response = await openRouterService.handleChitchat({  9 |       userMessage: "Hello, test message", 10 |       conversationHistory: [ 11 |         { role: "user", content: "Hello" }, 12 |         { role: "assistant", content: "Hi there! How can I help you today?" } 13 |       ], 14 |       brandContext: { 15 |         astrologerName: "Jose Garfias", 16 |         services: ["Astrology Reading", "Spiritual Guidance"], 17 |         specialties: ["Natal Chart Analysis", "Career Guidance", "Relationship Counseling"] 18 |       } 19 |     }); 20 |  21 |     return NextResponse.json({ 22 |       success: true, 23 |       message: "OpenRouter is working", 24 |       response: response, 25 |       apiKey: process.env.OPENROUTER_API_KEY ? "Set" : "Not set" 26 |     }); 27 |   } catch (error) { 28 |     return NextResponse.json({ 29 |       success: false, 30 |       error: error instanceof Error ? error.message : String(error), 31 |       apiKey: process.env.OPENROUTER_API_KEY ? "Set" : "Not set" 32 |     }, { status: 500 }); 33 |   } 34 | }
==================================================END: frontend/app/api/test/openrouter/route.ts==================================================


==================================================FILE: frontend/app/api/test/prisma/route.tsSIZE: 2.43 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET() {  5 |   try {  6 |   7 |     await prisma.$connect();  8 |   9 |     const userCount = await prisma.user.count(); 10 |  11 |     const users = await prisma.user.findMany({ 12 |       take: 5, 13 |       select: { 14 |         id: true, 15 |         email: true, 16 |         role: true, 17 |         createdAt: true 18 |       } 19 |     }); 20 |  21 |     const testEmail = 'test@example.com'; 22 |     const uniqueUser = await prisma.user.findUnique({ 23 |       where: { email: testEmail } 24 |     }); 25 |  26 |     const rawResult = await prisma.$queryRaw`SELECT COUNT(*) as count FROM users`; 27 |     return NextResponse.json({ 28 |       success: true, 29 |       data: { 30 |         connectionStatus: 'connected', 31 |         userCount, 32 |         users: users.map(u => ({ 33 |           id: u.id, 34 |           email: u.email, 35 |           role: u.role, 36 |           createdAt: u.createdAt 37 |         })), 38 |         testQueryResults: { 39 |           countQuery: userCount, 40 |           findManyQuery: users.length, 41 |           findUniqueQuery: !!uniqueUser, 42 |           rawQuery: rawResult 43 |         } 44 |       } 45 |     }); 46 |  47 |   } catch (error) { 48 |     return NextResponse.json({ 49 |       success: false, 50 |       error: 'Prisma test failed', 51 |       message: error instanceof Error ? error.message : 'Unknown error', 52 |       details: error instanceof Error ? error.stack : undefined 53 |     }, { status: 500 }); 54 |   } 55 | }
==================================================END: frontend/app/api/test/prisma/route.ts==================================================


==================================================FILE: frontend/app/api/test-packages/route.tsSIZE: 2.19 KB==================================================
  1 | import { NextResponse } from 'next/server';  2 | import { prisma } from '@/lib/prisma';  3 |   4 | export async function GET() {  5 |   try {  6 |   7 |     await prisma.$queryRaw`SELECT 1`;  8 |   9 |     const packages = await prisma.packageDefinition.findMany({ 10 |       where: { 11 |         isActive: true 12 |       }, 13 |       select: { 14 |         id: true, 15 |         name: true, 16 |         description: true, 17 |         sessionsCount: true, 18 |         packageType: true, 19 |         maxGroupSize: true, 20 |         isPopular: true, 21 |         packagePrices: { 22 |           where: { 23 |             isActive: true 24 |           }, 25 |           select: { 26 |             price: true, 27 |             currency: { 28 |               select: { 29 |                 code: true, 30 |                 symbol: true 31 |               } 32 |             } 33 |           }, 34 |           orderBy: { 35 |             price: 'asc' 36 |           }, 37 |           take: 1 38 |         }, 39 |         sessionDuration: { 40 |           select: { 41 |             name: true, 42 |             duration_minutes: true 43 |           } 44 |         } 45 |       }, 46 |       orderBy: { 47 |         displayOrder: 'asc' 48 |       } 49 |     }); 50 |  51 |     const formattedPackages = packages.map(pkg => { 52 |       const price = pkg.packagePrices[0]; 53 |       return { 54 |         id: pkg.id, 55 |         name: pkg.name, 56 |         description: pkg.description || 'No description available', 57 |         sessionsCount: pkg.sessionsCount, 58 |         price: price ? Number(price.price) : 0, 59 |         currency: price?.currency?.symbol || '$', 60 |         duration: pkg.sessionDuration?.duration_minutes || 60, 61 |         isPopular: pkg.isPopular, 62 |         packageType: pkg.packageType, 63 |         maxGroupSize: pkg.maxGroupSize 64 |       }; 65 |     }); 66 |  67 |     return NextResponse.json({ 68 |       success: true, 69 |       packages: formattedPackages, 70 |       count: formattedPackages.length 71 |     }); 72 |  73 |   } catch (error) { 74 |     return NextResponse.json({ 75 |       success: false, 76 |       error: error instanceof Error ? error.message : 'Unknown error', 77 |       packages: [] 78 |     }, { status: 500 }); 79 |   } 80 | }
==================================================END: frontend/app/api/test-packages/route.ts==================================================


==================================================FILE: frontend/app/api/whatsapp/webhook/route.tsSIZE: 6.42 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.3-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED === 'true', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'console' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'consulta_estado': { 38 |     action: 'consultar_estado', 39 |     apiEndpoint: '/admin/bookings', 40 |     requiredEntities: ['solicitud_id', 'cita_id', 'email'], 41 |     optionalEntities: ['tipo_consulta'], 42 |     description: 'Consultar el estado de una solicitud o cita' 43 |   }, 44 |   'agendar_cita': { 45 |     action: 'agendar_cita', 46 |     apiEndpoint: '/booking', 47 |     requiredEntities: ['fecha', 'hora', 'email'], 48 |     optionalEntities: ['tipo_sesion', 'paquete_id', 'tamaño_grupo', 'notas'], 49 |     description: 'Agendar una nueva cita' 50 |   }, 51 |   'consultar_paquetes': { 52 |     action: 'consultar_paquetes', 53 |     apiEndpoint: '/packages', 54 |     requiredEntities: [], 55 |     optionalEntities: ['tipo_paquete', 'moneda', 'duración'], 56 |     description: 'Consultar paquetes disponibles' 57 |   }, 58 |   'pagar_servicio': { 59 |     action: 'pagar_servicio', 60 |     apiEndpoint: '/client/purchase', 61 |     requiredEntities: ['monto', 'método_pago', 'email'], 62 |     optionalEntities: ['cita_id', 'paquete_id', 'moneda', 'notas'], 63 |     description: 'Procesar un pago' 64 |   }, 65 |   'cancelar_cita': { 66 |     action: 'cancelar_cita', 67 |     apiEndpoint: '/client/bookings', 68 |     requiredEntities: ['cita_id', 'email'], 69 |     optionalEntities: ['motivo'], 70 |     description: 'Cancelar una cita existente' 71 |   }, 72 |   'consultar_historial': { 73 |     action: 'consultar_historial', 74 |     apiEndpoint: '/client/purchase-history', 75 |     requiredEntities: ['email'], 76 |     optionalEntities: ['tipo_historial', 'fecha_desde', 'fecha_hasta'], 77 |     description: 'Consultar historial del usuario' 78 |   }, 79 |   'consultar_horarios': { 80 |     action: 'consultar_horarios', 81 |     apiEndpoint: '/schedule-slots', 82 |     requiredEntities: [], 83 |     optionalEntities: ['fecha', 'duración', 'tipo_sesion'], 84 |     description: 'Consultar horarios disponibles' 85 |   }, 86 |   'actualizar_perfil': { 87 |     action: 'actualizar_perfil', 88 |     apiEndpoint: '/client/me', 89 |     requiredEntities: ['email'], 90 |     optionalEntities: ['nombre', 'teléfono', 'fecha_nacimiento', 'lugar_nacimiento'], 91 |     description: 'Actualizar información del perfil' 92 |   }, 93 |   'saludo': { 94 |     action: 'saludo', 95 |     requiredEntities: [], 96 |     optionalEntities: ['nombre'], 97 |     description: 'Manejar saludos y bienvenidas' 98 |   }, 99 |   'despedida': {100 |     action: 'despedida',101 |     requiredEntities: [],102 |     optionalEntities: [],103 |     description: 'Manejar despedidas'104 |   },105 |   'ayuda': {106 |     action: 'ayuda',107 |     requiredEntities: [],108 |     optionalEntities: ['tema_ayuda'],109 |     description: 'Proporcionar ayuda y soporte'110 |   }111 | };112 | 113 | let orchestrator: ConversationalOrchestrator | null = null;114 | 115 | function getOrchestrator(): ConversationalOrchestrator {116 |   if (!orchestrator) {117 |     orchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping);118 |   }119 |   return orchestrator;120 | }121 | 122 | export async function POST(request: NextRequest) {123 |   try {124 |     const body = await request.text();125 |     const signature = request.headers.get('x-twilio-signature');126 | 127 |     const formData = new URLSearchParams(body);128 |     const webhookBody = Object.fromEntries(formData.entries());129 | 130 |     .toISOString()131 |     });132 | 133 |     const orchestrator = getOrchestrator();134 |     const result = await orchestrator.processWhatsAppMessage(webhookBody, signature || undefined);135 | 136 |     if (result.success) {137 |       ?.logId,138 |         processingTime: (result.data as Record<string, unknown>)?.processingTime139 |       });140 | 141 |       return NextResponse.json(result, { status: 200 });142 |     } else {143 |       return NextResponse.json(result, { status: 400 });144 |     }145 | 146 |   } catch (error) {147 |     return NextResponse.json({148 |       success: false,149 |       error: 'Internal server error',150 |       code: 'INTERNAL_ERROR',151 |       details: error instanceof Error ? error.message : 'Unknown error'152 |     }, { status: 500 });153 |   }154 | }155 | 156 | export async function GET() {157 |   try {158 | 159 |     const orchestrator = getOrchestrator();160 |     const healthCheck = await orchestrator.healthCheck();161 | 162 |     return NextResponse.json({163 |       success: true,164 |       message: 'WhatsApp webhook is healthy',165 |       health: healthCheck,166 |       timestamp: new Date().toISOString()167 |     });168 | 169 |   } catch (error) {170 |     return NextResponse.json({171 |       success: false,172 |       error: 'Health check failed',173 |       code: 'HEALTH_CHECK_ERROR',174 |       details: error instanceof Error ? error.message : 'Unknown error'175 |     }, { status: 500 });176 |   }177 | }
==================================================END: frontend/app/api/whatsapp/webhook/route.ts==================================================


==================================================FILE: frontend/app/api/whatsapp-business/webhook/route.tsSIZE: 8.48 KB==================================================
  1 | import { NextRequest, NextResponse } from 'next/server';  2 | import { ConversationalOrchestrator } from '@/lib/services/conversational-orchestrator';  3 | import { OrchestratorConfig, IntentActionMapping } from '@/lib/types/conversational-orchestrator';  4 |   5 | const orchestratorConfig: OrchestratorConfig = {  6 |   rasa: {  7 |     url: process.env.RASA_URL || 'http:  8 |     model: process.env.RASA_MODEL || 'rasa',  9 |     confidence_threshold: parseFloat(process.env.RASA_CONFIDENCE_THRESHOLD || '0.7') 10 |   }, 11 |   openrouter: { 12 |     apiKey: process.env.OPENROUTER_API_KEY || '', 13 |     baseUrl: process.env.OPENROUTER_BASE_URL || 'https: 14 |     model: process.env.OPENROUTER_MODEL || 'meta-llama/llama-3.1-8b-instruct:free', 15 |     temperature: parseFloat(process.env.OPENROUTER_TEMPERATURE || '0.7'), 16 |     maxTokens: parseInt(process.env.OPENROUTER_MAX_TOKENS || '1000') 17 |   }, 18 |   twilio: { 19 |     accountSid: process.env.TWILIO_ACCOUNT_SID || '', 20 |     authToken: process.env.TWILIO_AUTH_TOKEN || '', 21 |     phoneNumber: process.env.TWILIO_PHONE_NUMBER || '', 22 |     webhookUrl: process.env.TWILIO_WEBHOOK_URL || '' 23 |   }, 24 |   logging: { 25 |     enabled: process.env.LOGGING_ENABLED === 'true', 26 |     level: (process.env.LOGGING_LEVEL as 'debug' | 'info' | 'warn' | 'error') || 'info', 27 |     storage: (process.env.LOGGING_STORAGE as 'database' | 'file' | 'console') || 'console' 28 |   }, 29 |   apis: { 30 |     baseUrl: process.env.API_BASE_URL || `${process.env.NEXT_PUBLIC_BASE_URL || `http: 31 |     timeout: parseInt(process.env.API_TIMEOUT || '10000'), 32 |     retries: parseInt(process.env.API_RETRIES || '3') 33 |   } 34 | }; 35 |  36 | const intentActionMapping: IntentActionMapping = { 37 |   'consulta_estado': { 38 |     action: 'consultar_estado', 39 |     apiEndpoint: '/admin/bookings', 40 |     requiredEntities: ['solicitud_id', 'cita_id', 'email'], 41 |     optionalEntities: ['tipo_consulta'], 42 |     description: 'Consultar el estado de una solicitud o cita' 43 |   }, 44 |   'agendar_cita': { 45 |     action: 'agendar_cita', 46 |     apiEndpoint: '/booking', 47 |     requiredEntities: ['fecha', 'hora', 'email'], 48 |     optionalEntities: ['tipo_sesion', 'paquete_id', 'tamaño_grupo', 'notas'], 49 |     description: 'Agendar una nueva cita' 50 |   }, 51 |   'consultar_paquetes': { 52 |     action: 'consultar_paquetes', 53 |     apiEndpoint: '/packages', 54 |     requiredEntities: [], 55 |     optionalEntities: ['tipo_paquete', 'moneda', 'duración'], 56 |     description: 'Consultar paquetes disponibles' 57 |   }, 58 |   'pagar_servicio': { 59 |     action: 'pagar_servicio', 60 |     apiEndpoint: '/client/purchase', 61 |     requiredEntities: ['monto', 'método_pago', 'email'], 62 |     optionalEntities: ['cita_id', 'paquete_id', 'moneda', 'notas'], 63 |     description: 'Procesar un pago' 64 |   }, 65 |   'cancelar_cita': { 66 |     action: 'cancelar_cita', 67 |     apiEndpoint: '/client/bookings', 68 |     requiredEntities: ['cita_id', 'email'], 69 |     optionalEntities: ['motivo'], 70 |     description: 'Cancelar una cita existente' 71 |   }, 72 |   'consultar_historial': { 73 |     action: 'consultar_historial', 74 |     apiEndpoint: '/client/purchase-history', 75 |     requiredEntities: ['email'], 76 |     optionalEntities: ['tipo_historial', 'fecha_desde', 'fecha_hasta'], 77 |     description: 'Consultar historial del usuario' 78 |   }, 79 |   'consultar_horarios': { 80 |     action: 'consultar_horarios', 81 |     apiEndpoint: '/schedule-slots', 82 |     requiredEntities: [], 83 |     optionalEntities: ['fecha', 'duración', 'tipo_sesion'], 84 |     description: 'Consultar horarios disponibles' 85 |   }, 86 |   'actualizar_perfil': { 87 |     action: 'actualizar_perfil', 88 |     apiEndpoint: '/client/me', 89 |     requiredEntities: ['email'], 90 |     optionalEntities: ['nombre', 'teléfono', 'fecha_nacimiento', 'lugar_nacimiento'], 91 |     description: 'Actualizar información del perfil' 92 |   }, 93 |   'saludo': { 94 |     action: 'saludo', 95 |     requiredEntities: [], 96 |     optionalEntities: ['nombre'], 97 |     description: 'Manejar saludos y bienvenidas' 98 |   }, 99 |   'despedida': {100 |     action: 'despedida',101 |     requiredEntities: [],102 |     optionalEntities: [],103 |     description: 'Manejar despedidas'104 |   },105 |   'ayuda': {106 |     action: 'ayuda',107 |     requiredEntities: [],108 |     optionalEntities: ['tema_ayuda'],109 |     description: 'Proporcionar ayuda y soporte'110 |   }111 | };112 | 113 | let orchestrator: ConversationalOrchestrator | null = null;114 | 115 | function getOrchestrator(): ConversationalOrchestrator {116 |   if (!orchestrator) {117 |     orchestrator = new ConversationalOrchestrator(orchestratorConfig, intentActionMapping);118 |   }119 |   return orchestrator;120 | }121 | 122 | async function sendWhatsAppMessage(phoneNumberId: string, accessToken: string, to: string, message: string) {123 |   const url = `https:124 | 125 |   const payload = {126 |     messaging_product: "whatsapp",127 |     to: to,128 |     type: "text",129 |     text: {130 |       body: message131 |     }132 |   };133 | 134 |   const response = await fetch(url, {135 |     method: 'POST',136 |     headers: {137 |       'Authorization': `Bearer ${accessToken}`,138 |       'Content-Type': 'application/json',139 |     },140 |     body: JSON.stringify(payload)141 |   });142 | 143 |   if (!response.ok) {144 |     const error = await response.text();145 |     throw new Error(`WhatsApp API error: ${response.status} - ${error}`);146 |   }147 | 148 |   return await response.json();149 | }150 | 151 | export async function GET(request: NextRequest) {152 |   try {153 |     const { searchParams } = new URL(request.url);154 |     const mode = searchParams.get('hub.mode');155 |     const token = searchParams.get('hub.verify_token');156 |     const challenge = searchParams.get('hub.challenge');157 | 158 |     if (mode === 'subscribe' && token === process.env.WHATSAPP_VERIFY_TOKEN) {159 |       return new NextResponse(challenge, { status: 200 });160 |     } else {161 |       return new NextResponse('Forbidden', { status: 403 });162 |     }163 | 164 |   } catch (error) {165 |     return new NextResponse('Internal Server Error', { status: 500 });166 |   }167 | }168 | 169 | export async function POST(request: NextRequest) {170 |   try {171 |     const body = await request.json();172 | 173 |     .toISOString()174 |     });175 | 176 |     if (body.object === 'whatsapp_business_account') {177 |       const entries = body.entry || [];178 | 179 |       for (const entry of entries) {180 |         const changes = entry.changes || [];181 | 182 |         for (const change of changes) {183 |           if (change.field === 'messages') {184 |             const messages = change.value.messages || [];185 | 186 |             for (const message of messages) {187 |               if (message.type === 'text') {188 |                 const from = message.from;189 |                 const text = message.text.body;190 | 191 |                 const orchestrator = getOrchestrator();192 |                 const result = await orchestrator.processMessage(text, from);193 | 194 |                 if (result.success && (result.data as Record<string, unknown>).response) {195 | 196 |                   await sendWhatsAppMessage(197 |                     process.env.WHATSAPP_PHONE_NUMBER_ID || '',198 |                     process.env.WHATSAPP_ACCESS_TOKEN || '',199 |                     from,200 |                     (result.data as Record<string, unknown>).response as string201 |                   );202 | 203 |                   } else {204 | 205 |                   await sendWhatsAppMessage(206 |                     process.env.WHATSAPP_PHONE_NUMBER_ID || '',207 |                     process.env.WHATSAPP_ACCESS_TOKEN || '',208 |                     from,209 |                     'Lo siento, no pude procesar tu mensaje. Por favor intenta de nuevo.'210 |                   );211 |                 }212 |               }213 |             }214 |           }215 |         }216 |       }217 |     }218 | 219 |     return NextResponse.json({ status: 'ok' }, { status: 200 });220 | 221 |   } catch (error) {222 |     return NextResponse.json({223 |       success: false,224 |       error: 'Internal server error',225 |       code: 'INTERNAL_ERROR',226 |       details: error instanceof Error ? error.message : 'Unknown error'227 |     }, { status: 500 });228 |   }229 | }
==================================================END: frontend/app/api/whatsapp-business/webhook/route.ts==================================================


==================================================FILE: frontend/app/error.tsxSIZE: 2.35 KB==================================================
  1 | 'use client';  2 |   3 | import { Button } from '@/components/ui/button';  4 | import { AlertCircle, RefreshCw, Home } from 'lucide-react';  5 |   6 | export default function Error({  7 |   error,  8 |   reset  9 | }: { 10 |   error: Error & { digest?: string }; 11 |   reset: () => void 12 | }) { 13 |   return ( 14 |     <div className="flex h-screen flex-col items-center justify-center bg-[#0a0a0a] text-white"> 15 |       <div className="relative"> 16 |         {} 17 |         <div className="absolute inset-0 bg-gradient-to-b from-[#0a0a0a] via-[#1a1a2e] to-[#16213e] opacity-50" /> 18 |  19 |         {} 20 |         <div className="relative z-10 text-center max-w-md mx-auto px-6"> 21 |           <div className="w-20 h-20 bg-red-500/20 rounded-full flex items-center justify-center mx-auto mb-6"> 22 |             <AlertCircle size={40} className="text-red-400" /> 23 |           </div> 24 |  25 |           <h2 className="text-3xl font-bold mb-4 text-[#FFD700]">Oops! Something went wrong</h2> 26 |  27 |           <p className="text-[#C0C0C0] mb-8 leading-relaxed"> 28 |             We encountered an unexpected error while loading your page. 29 |             This might be a temporary issue that will resolve itself. 30 |           </p> 31 |  32 |           {process.env.NODE_ENV === 'development' && ( 33 |             <details className="mb-6 text-left"> 34 |               <summary className="cursor-pointer text-[#FFD700] mb-2">Error Details</summary> 35 |               <pre className="bg-[#1a1a2e] p-4 rounded-lg text-sm text-red-400 overflow-auto"> 36 |                 {error.message} 37 |                 {error.stack && `\n\n${error.stack}`} 38 |               </pre> 39 |             </details> 40 |           )} 41 |  42 |           <div className="flex flex-col sm:flex-row gap-4 justify-center"> 43 |             <Button 44 |               onClick={() => reset()} 45 |               className="bg-[#FFD700] text-[#0a0a0a] hover:bg-[#FFA500] transition-colors" 46 |             > 47 |               <RefreshCw size={16} className="mr-2" /> 48 |               Try Again 49 |             </Button> 50 |  51 |             <Button 52 |               onClick={() => window.location.href = '/'} 53 |               variant="outline" 54 |               className="border-[#FFD700] text-[#FFD700] hover:bg-[#FFD700] hover:text-[#0a0a0a] transition-colors" 55 |             > 56 |               <Home size={16} className="mr-2" /> 57 |               Go Home 58 |             </Button> 59 |           </div> 60 |         </div> 61 |       </div> 62 |     </div> 63 |   ); 64 | }
==================================================END: frontend/app/error.tsx==================================================


==================================================FILE: frontend/app/izipay-demo/page.tsxSIZE: 10.07 KB==================================================
  1 | 'use client';  2 |   3 | import React, { useState } from 'react';  4 | import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';  5 | import { Input } from '@/components/ui/input';  6 | import { Label } from '@/components/ui/label';  7 | import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';  8 | import { Separator } from '@/components/ui/separator';  9 | import { Badge } from '@/components/ui/badge'; 10 | import IzipayPaymentButton from '@/components/izipay/IzipayPaymentButton'; 11 | import IzipayPaymentMethod from '@/components/izipay/IzipayPaymentMethod'; 12 |  13 | export default function IzipayDemoPage() { 14 |   const [paymentData, setPaymentData] = useState({ 15 |     amount: 100.00, 16 |     currency: 'PEN', 17 |     customerEmail: 'test@example.com', 18 |     customerName: 'Test Customer', 19 |     description: 'Wellness Services Demo Payment', 20 |   }); 21 |  22 |   const [paymentVariant, setPaymentVariant] = useState<'button' | 'inline' | 'card'>('card'); 23 |  24 |   const handleInputChange = (field: string, value: string | number) => { 25 |     setPaymentData(prev => ({ 26 |       ...prev, 27 |       [field]: value 28 |     })); 29 |   }; 30 |  31 |   const handlePaymentSuccess = (result: Record<string, unknown>) => { 32 |     alert('¡Pago exitoso! Revisa la consola para más detalles.'); 33 |   }; 34 |  35 |   const handlePaymentError = (error: string) => { 36 |     alert(`Error en el pago: ${error}`); 37 |   }; 38 |  39 |   const formatAmount = (amount: number, currency: string) => { 40 |     const formatter = new Intl.NumberFormat('es-PE', { 41 |       style: 'currency', 42 |       currency: currency, 43 |       minimumFractionDigits: 2, 44 |     }); 45 |     return formatter.format(amount); 46 |   }; 47 |  48 |   return ( 49 |     <div className="container mx-auto py-8 px-4 max-w-6xl"> 50 |       <div className="mb-8 text-center"> 51 |         <h1 className="text-3xl font-bold mb-2">Izipay Payment Demo</h1> 52 |         <p className="text-gray-600"> 53 |           Demonstración de la integración de pagos con Izipay para Perú 54 |         </p> 55 |         <Badge variant="outline" className="mt-2"> 56 |           Modo de Prueba 57 |         </Badge> 58 |       </div> 59 |  60 |       <div className="grid grid-cols-1 lg:grid-cols-2 gap-8"> 61 |         {} 62 |         <Card> 63 |           <CardHeader> 64 |             <CardTitle>Configuración del Pago</CardTitle> 65 |             <CardDescription> 66 |               Configura los parámetros de tu pago de prueba 67 |             </CardDescription> 68 |           </CardHeader> 69 |           <CardContent className="space-y-4"> 70 |             <div className="grid grid-cols-2 gap-4"> 71 |               <div> 72 |                 <Label htmlFor="amount">Monto</Label> 73 |                 <Input 74 |                   id="amount" 75 |                   type="number" 76 |                   step="0.01" 77 |                   min="1" 78 |                   value={paymentData.amount} 79 |                   onChange={(e) => handleInputChange('amount', parseFloat(e.target.value) || 0)} 80 |                 /> 81 |               </div> 82 |               <div> 83 |                 <Label htmlFor="currency">Moneda</Label> 84 |                 <Select value={paymentData.currency} onValueChange={(value) => handleInputChange('currency', value)}> 85 |                   <SelectTrigger> 86 |                     <SelectValue /> 87 |                   </SelectTrigger> 88 |                   <SelectContent> 89 |                     <SelectItem value="PEN">PEN - Sol Peruano</SelectItem> 90 |                     <SelectItem value="USD">USD - Dólar Americano</SelectItem> 91 |                   </SelectContent> 92 |                 </Select> 93 |               </div> 94 |             </div> 95 |  96 |             <div> 97 |               <Label htmlFor="customerEmail">Email del Cliente</Label> 98 |               <Input 99 |                 id="customerEmail"100 |                 type="email"101 |                 value={paymentData.customerEmail}102 |                 onChange={(e) => handleInputChange('customerEmail', e.target.value)}103 |               />104 |             </div>105 | 106 |             <div>107 |               <Label htmlFor="customerName">Nombre del Cliente</Label>108 |               <Input109 |                 id="customerName"110 |                 value={paymentData.customerName}111 |                 onChange={(e) => handleInputChange('customerName', e.target.value)}112 |               />113 |             </div>114 | 115 |             <div>116 |               <Label htmlFor="description">Descripción</Label>117 |               <Input118 |                 id="description"119 |                 value={paymentData.description}120 |                 onChange={(e) => handleInputChange('description', e.target.value)}121 |               />122 |             </div>123 | 124 |             <Separator />125 | 126 |             <div>127 |               <Label htmlFor="variant">Tipo de Componente</Label>128 |               <Select value={paymentVariant} onValueChange={(value: string) => setPaymentVariant(value as 'button' | 'inline' | 'card')}>129 |                 <SelectTrigger>130 |                   <SelectValue />131 |                 </SelectTrigger>132 |                 <SelectContent>133 |                   <SelectItem value="button">Botón Simple</SelectItem>134 |                   <SelectItem value="card">Tarjeta Completa</SelectItem>135 |                   <SelectItem value="inline">Formulario Integrado</SelectItem>136 |                 </SelectContent>137 |               </Select>138 |             </div>139 | 140 |             <div className="p-3 bg-blue-50 rounded-lg">141 |               <p className="text-sm text-blue-800">142 |                 <strong>Total:</strong> {formatAmount(paymentData.amount, paymentData.currency)}143 |               </p>144 |             </div>145 |           </CardContent>146 |         </Card>147 | 148 |         {}149 |         <Card>150 |           <CardHeader>151 |             <CardTitle>Componente de Pago</CardTitle>152 |             <CardDescription>153 |               Vista previa del componente de pago seleccionado154 |             </CardDescription>155 |           </CardHeader>156 |           <CardContent>157 |             {paymentVariant === 'button' && (158 |               <IzipayPaymentButton159 |                 amount={paymentData.amount}160 |                 currency={paymentData.currency}161 |                 customerEmail={paymentData.customerEmail}162 |                 customerName={paymentData.customerName}163 |                 description={paymentData.description}164 |                 onSuccess={handlePaymentSuccess}165 |                 onError={handlePaymentError}166 |               />167 |             )}168 | 169 |             {paymentVariant === 'card' && (170 |               <IzipayPaymentMethod171 |                 amount={paymentData.amount}172 |                 currency={paymentData.currency}173 |                 customerEmail={paymentData.customerEmail}174 |                 customerName={paymentData.customerName}175 |                 description={paymentData.description}176 |                 variant="card"177 |                 showFeatures={true}178 |                 onSuccess={handlePaymentSuccess}179 |                 onError={handlePaymentError}180 |               />181 |             )}182 | 183 |             {paymentVariant === 'inline' && (184 |               <div className="text-center py-8 text-gray-500">185 |                 <p>El formulario integrado requiere configuración adicional</p>186 |                 <p className="text-sm">Ver IZIPAY_INTEGRATION.md para más detalles</p>187 |               </div>188 |             )}189 |           </CardContent>190 |         </Card>191 |       </div>192 | 193 |       {}194 |       <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mt-8">195 |         <Card>196 |           <CardHeader>197 |             <CardTitle className="text-lg">🔒 Seguridad</CardTitle>198 |           </CardHeader>199 |           <CardContent>200 |             <ul className="text-sm space-y-1 text-gray-600">201 |               <li>• 3D Secure authentication</li>202 |               <li>• Tokenización de tarjetas</li>203 |               <li>• Encriptación SSL/TLS</li>204 |               <li>• Verificación de webhooks</li>205 |             </ul>206 |           </CardContent>207 |         </Card>208 | 209 |         <Card>210 |           <CardHeader>211 |             <CardTitle className="text-lg">💳 Tarjetas Aceptadas</CardTitle>212 |           </CardHeader>213 |           <CardContent>214 |             <ul className="text-sm space-y-1 text-gray-600">215 |               <li>• Visa</li>216 |               <li>• Mastercard</li>217 |               <li>• American Express</li>218 |               <li>• Diners Club</li>219 |             </ul>220 |           </CardContent>221 |         </Card>222 | 223 |         <Card>224 |           <CardHeader>225 |             <CardTitle className="text-lg">🌎 Cobertura</CardTitle>226 |           </CardHeader>227 |           <CardContent>228 |             <ul className="text-sm space-y-1 text-gray-600">229 |               <li>• Específico para Perú</li>230 |               <li>• Moneda: Sol Peruano (PEN)</li>231 |               <li>• Regulaciones locales</li>232 |               <li>• Soporte en español</li>233 |             </ul>234 |           </CardContent>235 |         </Card>236 |       </div>237 | 238 |       {}239 |       <Card className="mt-8">240 |         <CardHeader>241 |           <CardTitle>🧪 Tarjetas de Prueba</CardTitle>242 |           <CardDescription>243 |             Usa estas tarjetas en el entorno de sandbox para probar diferentes escenarios244 |           </CardDescription>245 |         </CardHeader>246 |         <CardContent>247 |           <div className="grid grid-cols-1 md:grid-cols-3 gap-4">248 |             <div className="p-3 bg-green-50 rounded-lg">249 |               <p className="font-medium text-green-800">Pago Exitoso</p>250 |               <p className="text-sm text-green-600 font-mono">4970100000000003</p>251 |             </div>252 |             <div className="p-3 bg-red-50 rounded-lg">253 |               <p className="font-medium text-red-800">Pago Fallido</p>254 |               <p className="text-sm text-red-600 font-mono">4970100000000004</p>255 |             </div>256 |             <div className="p-3 bg-blue-50 rounded-lg">257 |               <p className="font-medium text-blue-800">3D Secure</p>258 |               <p className="text-sm text-blue-600 font-mono">4970100000000005</p>259 |             </div>260 |           </div>261 |           <p className="text-xs text-gray-500 mt-2">262 |             Usa cualquier CVV (3 dígitos) y fecha de expiración futura263 |           </p>264 |         </CardContent>265 |       </Card>266 | 267 |       {}268 |       <div className="text-center mt-8 text-sm text-gray-500">269 |         <p>270 |           Para más información, consulta la documentación en{' '}271 |           <code className="bg-gray-100 px-1 rounded">IZIPAY_INTEGRATION.md</code>272 |         </p>273 |       </div>274 |     </div>275 |   );276 | }
==================================================END: frontend/app/izipay-demo/page.tsx==================================================


==================================================FILE: frontend/app/layout.tsxSIZE: 2.54 KB==================================================
  1 | import type { Metadata } from 'next';  2 | import { poppins, roboto } from './fonts';  3 | import './globals.css';  4 | import { createAdminClient } from '@/lib/supabase/admin';  5 | import { cn } from '@/lib/utils';  6 | import { ThemeProvider } from '@/lib/theme/ThemeProvider';  7 |   8 | async function getSeoData() {  9 |  10 |   const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY; 11 |   if (!serviceRoleKey || serviceRoleKey.length < 50) { 12 |     return null; 13 |   } 14 |  15 |   try { 16 |     const supabase = createAdminClient(); 17 |     const { data } = await supabase.from('seo').select('*').single(); 18 |     return data; 19 |   } catch (error) { 20 |  21 |     return null; 22 |   } 23 | } 24 |  25 | export async function generateMetadata(): Promise<Metadata> { 26 |   let seo = null; 27 |  28 |   try { 29 |     seo = await getSeoData(); 30 |   } catch (error) { 31 |  32 |   } 33 |  34 |   return { 35 |     title: seo?.title || 'MatMax Yoga Studio', 36 |     description: seo?.description || 'Strategic astrological counsel to navigate your life\'s most pivotal moments.', 37 |     keywords: seo?.keywords || ['astrology', 'counseling', 'spiritual guidance'], 38 |     openGraph: { 39 |       title: seo?.ogTitle || seo?.title || 'MatMax Yoga Studio', 40 |       description: seo?.ogDescription || seo?.description || 'Strategic astrological counsel to navigate your life\'s most pivotal moments.', 41 |       images: seo?.ogImage ? [seo.ogImage] : [], 42 |       type: 'website', 43 |     }, 44 |     twitter: { 45 |       card: 'summary_large_image', 46 |       title: seo?.ogTitle || seo?.title || 'MatMax Yoga Studio', 47 |       description: seo?.ogDescription || seo?.description || 'Strategic astrological counsel to navigate your life\'s most pivotal moments.', 48 |       images: seo?.ogImage ? [seo.ogImage] : [], 49 |     }, 50 |   }; 51 | } 52 |  53 | export const viewport = { 54 |   width: 'device-width', 55 |   initialScale: 1.0, 56 |   maximumScale: 1.0, 57 |   userScalable: false, 58 |   viewportFit: 'cover', 59 |   themeColor: '#0A0A23', 60 | }; 61 |  62 | export default function RootLayout({ 63 |   children, 64 | }: { 65 |   children: React.ReactNode; 66 | }) { 67 |   return ( 68 |     <html lang="en" className={`${poppins.variable} ${roboto.variable}`}> 69 |       <body className={cn( 70 |         "antialiased", 71 |         poppins.variable, 72 |         roboto.variable 73 |       )}> 74 |         <ThemeProvider initialTheme="light"> 75 |           {children} 76 |         </ThemeProvider> 77 |       </body> 78 |     </html> 79 |   ); 80 | }
==================================================END: frontend/app/layout.tsx==================================================


==================================================FILE: frontend/app/loading.tsxSIZE: 0.80 KB==================================================
  1 | export default function Loading() {  2 |   return (  3 |     <div className="flex h-screen w-full items-center justify-center bg-[#0a0a0a]">  4 |       <div className="relative">  5 |         {}  6 |         <div className="absolute inset-0 bg-gradient-to-b from-[#0a0a0a] via-[#1a1a2e] to-[#16213e] opacity-50" />  7 |   8 |         {}  9 |         <div className="relative z-10"> 10 |           <div className="w-16 h-16 border-4 border-[#FFD700]/20 border-t-[#FFD700] rounded-full animate-spin" /> 11 |           <div className="mt-4 text-center"> 12 |             <div className="w-2 h-2 bg-[#FFD700] rounded-full animate-bounce mx-auto mb-2" /> 13 |             <p className="text-[#FFD700] text-lg font-semibold">Loading MatMax Yoga Studio...</p> 14 |           </div> 15 |         </div> 16 |       </div> 17 |     </div> 18 |   ); 19 | }
==================================================END: frontend/app/loading.tsx==================================================


==================================================FILE: frontend/app/login/page.tsxSIZE: 7.62 KB==================================================
  1 | 'use client';  2 |   3 | import { useState, useEffect } from 'react';  4 | import { useRouter } from 'next/navigation';  5 | import { useAuth } from '@/hooks/useAuth';  6 | import { motion } from 'framer-motion';  7 | import { Header } from '@/components/Header';  8 | import { useTranslations, useLanguage } from '@/hooks/useTranslations';  9 | import { Eye, EyeOff } from 'lucide-react'; 10 |  11 | export default function LoginPage() { 12 |   const [email, setEmail] = useState(''); 13 |   const [password, setPassword] = useState(''); 14 |   const [isLoading, setIsLoading] = useState(false); 15 |   const [error, setError] = useState(''); 16 |   const [isMenuOpen, setIsMenuOpen] = useState(false); 17 |   const [showPassword, setShowPassword] = useState(false); 18 |   const router = useRouter(); 19 |   const { signIn, user, isAdmin } = useAuth(); 20 |   const { language, setLanguage } = useLanguage(); 21 |   const { t } = useTranslations(); 22 |   const translations = t as Record<string, string | Record<string, string>>; 23 |  24 |   useEffect(() => { 25 |     if (user) { 26 |       if (isAdmin) { 27 |         router.push('/admin'); 28 |       } else { 29 |         router.push('/account'); 30 |       } 31 |     } 32 |   }, [user, isAdmin, router]); 33 |  34 |   const handleSubmit = async (e: React.FormEvent) => { 35 |     e.preventDefault(); 36 |     setIsLoading(true); 37 |     setError(''); 38 |  39 |     try { 40 |       const { error: signInError } = await signIn(email, password); 41 |  42 |       if (signInError) { 43 |         setError((signInError as Error)?.message || 'Login failed'); 44 |         return; 45 |       } 46 |  47 |       } catch (error) { 48 |       setError('An unexpected error occurred'); 49 |     } finally { 50 |       setIsLoading(false); 51 |     } 52 |   }; 53 |  54 |   const scrollToSection = (section: string) => { 55 |  56 |     }; 57 |  58 |   const handleLoginClick = () => { 59 |  60 |     }; 61 |  62 |   return ( 63 |     <div className="min-h-screen bg-white"> 64 |       {} 65 |       <Header 66 |         language={language} 67 |         setLanguage={setLanguage} 68 |         scrollToSection={scrollToSection} 69 |         t={translations} 70 |         isMenuOpen={isMenuOpen} 71 |         setIsMenuOpen={setIsMenuOpen} 72 |         onLoginClick={handleLoginClick} 73 |         user={user} 74 |         isAdmin={isAdmin} 75 |       /> 76 |  77 |       {} 78 |       <section className="relative min-h-screen flex items-center justify-center pt-24"> 79 |         {} 80 |         <div 81 |           className="absolute inset-0 bg-cover bg-center bg-no-repeat" 82 |           style={{ 83 |             backgroundImage: 'url("/matmaxstudio.png")', 84 |           }} 85 |         > 86 |           <div className="absolute inset-0 bg-black bg-opacity-60"></div> 87 |         </div> 88 |  89 |         {} 90 |         <div className="relative z-10 w-full max-w-md mx-4"> 91 |           <motion.div 92 |             initial={{ opacity: 0, y: 20 }} 93 |             animate={{ opacity: 1, y: 0 }} 94 |             transition={{ duration: 0.5 }} 95 |             className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 shadow-2xl border border-white/20" 96 |           > 97 |             {} 98 |             <div className="text-center mb-8"> 99 |               <h1100 |                 className="text-3xl font-bold text-gray-800 mb-2"101 |                 style={{ fontFamily: 'var(--font-heading)' }}102 |               >103 |                 Welcome Back104 |               </h1>105 |               <p106 |                 className="text-gray-600"107 |                 style={{ fontFamily: 'var(--font-body)' }}108 |               >109 |                 Sign in to your account110 |               </p>111 |             </div>112 | 113 |             {}114 |             <form onSubmit={handleSubmit} className="space-y-6">115 |               {error && (116 |                 <motion.div117 |                   initial={{ opacity: 0, y: -10 }}118 |                   animate={{ opacity: 1, y: 0 }}119 |                   className="bg-red-50 border border-red-200 rounded-lg p-3 text-red-700 text-sm"120 |                 >121 |                   {error}122 |                 </motion.div>123 |               )}124 | 125 |               <div>126 |                 <label htmlFor="email" className="block text-sm font-medium text-gray-700 mb-2">127 |                   Email Address128 |                 </label>129 |                 <input130 |                   id="email"131 |                   type="email"132 |                   value={email}133 |                   onChange={(e) => setEmail(e.target.value)}134 |                   required135 |                   className="w-full px-4 py-3 border border-gray-300 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#6ea058] focus:border-transparent transition-all duration-200"136 |                   placeholder="Enter your email"137 |                   disabled={isLoading}138 |                 />139 |               </div>140 | 141 |               <div>142 |                 <label htmlFor="password" className="block text-sm font-medium text-gray-700 mb-2">143 |                   Password144 |                 </label>145 |                 <div className="relative">146 |                   <input147 |                     id="password"148 |                     type={showPassword ? "text" : "password"}149 |                     value={password}150 |                     onChange={(e) => setPassword(e.target.value)}151 |                     required152 |                     className="w-full px-4 py-3 pr-12 border border-gray-300 rounded-lg text-gray-900 placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-[#6ea058] focus:border-transparent transition-all duration-200"153 |                     placeholder="Enter your password"154 |                     disabled={isLoading}155 |                   />156 |                   <button157 |                     type="button"158 |                     onClick={() => setShowPassword(!showPassword)}159 |                     className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 hover:text-gray-700 focus:outline-none focus:text-gray-700 transition-colors duration-200"160 |                     disabled={isLoading}161 |                   >162 |                     {showPassword ? (163 |                       <EyeOff size={20} />164 |                     ) : (165 |                       <Eye size={20} />166 |                     )}167 |                   </button>168 |                 </div>169 |               </div>170 | 171 |               <motion.button172 |                 type="submit"173 |                 disabled={isLoading}174 |                 whileHover={{ scale: 1.02 }}175 |                 whileTap={{ scale: 0.98 }}176 |                 className="w-full bg-[#6ea058] hover:bg-[#5a8a4a] text-white font-semibold py-3 px-6 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"177 |                 style={{ fontFamily: 'var(--font-body)' }}178 |               >179 |                 {isLoading ? (180 |                   <div className="flex items-center justify-center">181 |                     <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white mr-2"></div>182 |                     Signing In...183 |                   </div>184 |                 ) : (185 |                   'Sign In'186 |                 )}187 |               </motion.button>188 |             </form>189 | 190 |             {}191 |             <div className="mt-6 text-center">192 |               <button193 |                 onClick={() => router.push('/')}194 |                 className="text-[#6ea058] hover:text-[#5a8a4a] transition-colors duration-200 text-sm font-medium"195 |                 style={{ fontFamily: 'var(--font-body)' }}196 |               >197 |                 ← Back to Home198 |               </button>199 |             </div>200 |           </motion.div>201 |         </div>202 |       </section>203 |     </div>204 |   );205 | }
==================================================END: frontend/app/login/page.tsx==================================================


==================================================FILE: frontend/app/not-found.tsxSIZE: 0.72 KB==================================================
  1 | import Link from 'next/link';  2 |   3 | export default function NotFound() {  4 |   return (  5 |     <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-[#191970] to-[#0A0A23] text-white">  6 |       <div className="text-center">  7 |         <h1 className="text-6xl font-bold text-[#FFD700] mb-4">404</h1>  8 |         <h2 className="text-2xl mb-4">Page Not Found</h2>  9 |         <p className="text-[#C0C0C0] mb-8"> 10 |           The page you&apos;re looking for doesn&apos;t exist. 11 |         </p> 12 |         <Link 13 |           href="/" 14 |           className="inline-block bg-[#FFD700] text-[#0A0A23] px-6 py-3 rounded-lg font-semibold hover:bg-[#FFD700]/90 transition-colors" 15 |         > 16 |           Go Home 17 |         </Link> 18 |       </div> 19 |     </div> 20 |   ); 21 | }
==================================================END: frontend/app/not-found.tsx==================================================


==================================================FILE: frontend/app/packages/page.tsxSIZE: 33.51 KB==================================================
  1 | 'use client';  2 |   3 | import React, { useState, useEffect } from 'react';  4 | import { motion, AnimatePresence } from 'framer-motion';  5 | import { Package, CheckCircle, ArrowRight, ArrowLeft, Clock, Users, Star, Loader2, AlertCircle } from 'lucide-react';  6 | import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';  7 | import { Input } from '@/components/ui/input';  8 | import { Label } from '@/components/ui/label';  9 | import { IzipayPaymentMethod } from '@/components/izipay/IzipayPaymentMethod'; 10 | import { Header } from '@/components/Header'; 11 | import { useTranslations, useLanguage } from '@/hooks/useTranslations'; 12 | import { usePackages, PackagePrice } from '@/hooks/usePackages'; 13 | import { toast } from 'sonner'; 14 |  15 | interface ScheduleSlot { 16 |   id: number; 17 |   startTime: string; 18 |   endTime: string; 19 |   capacity: number; 20 |   bookedCount: number; 21 |   isAvailable: boolean; 22 |   instructorName?: string; 23 |   scheduleTemplate: { 24 |     dayOfWeek: string; 25 |     sessionDuration: { 26 |       name: string; 27 |       duration_minutes: number; 28 |     }; 29 |   }; 30 | } 31 |  32 | interface BookingFormData { 33 |   clientName: string; 34 |   clientEmail: string; 35 |   clientPhone: string; 36 |   countryCode: string; 37 |   language: 'en' | 'es'; 38 |   selectedPackage: PackagePrice | null; 39 |   selectedScheduleSlot: ScheduleSlot | null; 40 |   skipBooking: boolean; 41 |   specialRequests?: string; 42 | } 43 |  44 | export default function PackagesPage() { 45 |  46 |   const { packages, loading, error, refetch } = usePackages('PEN'); 47 |   const [scheduleSlots, setScheduleSlots] = useState<ScheduleSlot[]>([ 48 |     { 49 |       id: 1, 50 |       startTime: new Date(Date.now() + 24 * 60 * 60 * 1000).toISOString(), 51 |       endTime: new Date(Date.now() + 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(), 52 |       capacity: 10, 53 |       bookedCount: 3, 54 |       isAvailable: true, 55 |       scheduleTemplate: { 56 |         dayOfWeek: 'Monday', 57 |         sessionDuration: { 58 |           name: '60 Minutes', 59 |           duration_minutes: 60 60 |         } 61 |       }, 62 |       instructorName: 'Sarah Johnson' 63 |     }, 64 |     { 65 |       id: 2, 66 |       startTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), 67 |       endTime: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(), 68 |       capacity: 8, 69 |       bookedCount: 1, 70 |       isAvailable: true, 71 |       scheduleTemplate: { 72 |         dayOfWeek: 'Tuesday', 73 |         sessionDuration: { 74 |           name: '60 Minutes', 75 |           duration_minutes: 60 76 |         } 77 |       }, 78 |       instructorName: 'Mike Chen' 79 |     }, 80 |     { 81 |       id: 3, 82 |       startTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000).toISOString(), 83 |       endTime: new Date(Date.now() + 3 * 24 * 60 * 60 * 1000 + 60 * 60 * 1000).toISOString(), 84 |       capacity: 12, 85 |       bookedCount: 5, 86 |       isAvailable: true, 87 |       scheduleTemplate: { 88 |         dayOfWeek: 'Wednesday', 89 |         sessionDuration: { 90 |           name: '60 Minutes', 91 |           duration_minutes: 60 92 |         } 93 |       }, 94 |       instructorName: 'Emma Wilson' 95 |     } 96 |   ]); 97 |   const [currentStep, setCurrentStep] = useState(0); 98 |   const [isMenuOpen, setIsMenuOpen] = useState(false); 99 |   const [isCountryDropdownOpen, setIsCountryDropdownOpen] = useState(false);100 | 101 |   const { language, setLanguage } = useLanguage();102 | 103 |   const countries = [104 |     { code: '+51', flag: '🇵🇪', name: 'Peru', country: 'PE' },105 |     { code: '+1', flag: '🇺🇸', name: 'United States', country: 'US' },106 |     { code: '+1', flag: '🇨🇦', name: 'Canada', country: 'CA' },107 |     { code: '+52', flag: '🇲🇽', name: 'Mexico', country: 'MX' },108 |     { code: '+54', flag: '🇦🇷', name: 'Argentina', country: 'AR' },109 |     { code: '+55', flag: '🇧🇷', name: 'Brazil', country: 'BR' },110 |     { code: '+56', flag: '🇨🇱', name: 'Chile', country: 'CL' },111 |     { code: '+57', flag: '🇨🇴', name: 'Colombia', country: 'CO' },112 |     { code: '+58', flag: '🇻🇪', name: 'Venezuela', country: 'VE' },113 |     { code: '+34', flag: '🇪🇸', name: 'Spain', country: 'ES' },114 |     { code: '+33', flag: '🇫🇷', name: 'France', country: 'FR' },115 |     { code: '+49', flag: '🇩🇪', name: 'Germany', country: 'DE' },116 |     { code: '+44', flag: '🇬🇧', name: 'United Kingdom', country: 'GB' },117 |     { code: '+39', flag: '🇮🇹', name: 'Italy', country: 'IT' },118 |     { code: '+86', flag: '🇨🇳', name: 'China', country: 'CN' },119 |     { code: '+81', flag: '🇯🇵', name: 'Japan', country: 'JP' },120 |     { code: '+82', flag: '🇰🇷', name: 'South Korea', country: 'KR' },121 |     { code: '+91', flag: '🇮🇳', name: 'India', country: 'IN' },122 |     { code: '+61', flag: '🇦🇺', name: 'Australia', country: 'AU' }123 |   ];124 | 125 |   const { t } = useTranslations();126 |   const translations = t as Record<string, string | Record<string, string>>;127 | 128 |   const [formData, setFormData] = useState<BookingFormData>({129 |     clientName: '',130 |     clientEmail: '',131 |     clientPhone: '',132 |     countryCode: '+51',133 |     language: 'en',134 |     selectedPackage: null,135 |     selectedScheduleSlot: null,136 |     skipBooking: false137 |   });138 | 139 |   const selectedCountry = countries.find(c => c.code === formData.countryCode) || countries[0];140 | 141 |   const steps = [142 |     { id: 0, name: 'Select Package', description: 'Choose your package' },143 |     { id: 1, name: 'Personal Info', description: 'Your details' },144 |     { id: 2, name: 'Booking', description: 'Schedule your session' },145 |     { id: 3, name: 'Payment', description: 'Complete purchase' }146 |   ];147 | 148 |   const handleLoginClick = () => {149 | 150 |     };151 | 152 |   const scrollToSection = (section: string) => {153 | 154 |     };155 | 156 |   useEffect(() => {157 | 158 |     loadScheduleSlots();159 |   }, []);160 | 161 |   const loadScheduleSlots = async () => {162 |     try {163 |       const response = await fetch('/api/schedule-slots');164 |       const data = await response.json();165 | 166 |       if (data.success) {167 | 168 |         const transformedSlots = data.slots.map((slot: Record<string, unknown>) => ({169 |           id: slot.id,170 |           startTime: new Date(`${slot.date as string}T${slot.time as string}`).toISOString(),171 |           endTime: new Date(new Date(`${slot.date as string}T${slot.time as string}`).getTime() + ((slot.duration as number) * 60000)).toISOString(),172 |           capacity: slot.capacity,173 |           bookedCount: slot.bookedCount,174 |           isAvailable: slot.isAvailable,175 |           scheduleTemplate: {176 |             dayOfWeek: new Date(slot.date as string).toLocaleDateString('en-US', { weekday: 'long' }),177 |             sessionDuration: {178 |               name: slot.sessionType as string,179 |               duration_minutes: slot.duration as number180 |             }181 |           },182 |           instructorName: 'Available'183 |         }));184 |         setScheduleSlots(transformedSlots);185 |       } else {186 |         setScheduleSlots([]);187 |       }188 |     } catch (error) {189 |       setScheduleSlots([]);190 |     }191 |   };192 | 193 |   useEffect(() => {194 |     const handleClickOutside = (event: MouseEvent) => {195 |       if (isCountryDropdownOpen) {196 |         const target = event.target as Element;197 |         if (!target.closest('.country-dropdown')) {198 |           setIsCountryDropdownOpen(false);199 |         }200 |       }201 |     };202 | 203 |     document.addEventListener('mousedown', handleClickOutside);204 |     return () => {205 |       document.removeEventListener('mousedown', handleClickOutside);206 |     };207 |   }, [isCountryDropdownOpen]);208 | 209 |   useEffect(() => {210 |     if (currentStep === 3) {211 | 212 |       document.body.style.overflow = 'auto';213 |       document.documentElement.style.overflow = 'auto';214 |     }215 |   }, [currentStep]);216 | 217 |   const handlePackageSelect = (pkg: PackagePrice) => {218 |     setFormData(prev => ({ ...prev, selectedPackage: pkg }));219 |     setCurrentStep(1);220 |   };221 | 222 |   const handlePaymentSuccess = async (paymentData: Record<string, unknown>) => {223 |     try {224 | 225 |       const purchaseResponse = await fetch('/api/client/purchase', {226 |         method: 'POST',227 |         headers: {228 |           'Content-Type': 'application/json',229 |         },230 |         body: JSON.stringify({231 |           packagePriceId: formData.selectedPackage?.id,232 |           quantity: 1,233 |           clientName: formData.clientName,234 |           clientEmail: formData.clientEmail,235 |           clientPhone: `${formData.countryCode}${formData.clientPhone}`,236 |           language: formData.language,237 |           paymentMethod: 'izipay',238 |           paymentData: paymentData239 |         })240 |       });241 | 242 |       const purchaseResult = await purchaseResponse.json();243 | 244 |       if (purchaseResult.success) {245 | 246 |         if (!formData.skipBooking && formData.selectedScheduleSlot) {247 |           const bookingResponse = await fetch('/api/client/bookings', {248 |             method: 'POST',249 |             headers: {250 |               'Content-Type': 'application/json',251 |             },252 |             body: JSON.stringify({253 |               userPackageId: purchaseResult.data.userPackageId,254 |               scheduleSlotId: formData.selectedScheduleSlot.id,255 |               sessionType: formData.selectedPackage?.packageDefinition.name || 'Standard Reading',256 |               notes: formData.specialRequests257 |             })258 |           });259 | 260 |           const bookingResult = await bookingResponse.json();261 | 262 |           if (bookingResult.success) {263 |             toast.success('Purchase and booking completed successfully!');264 |           } else {265 |             toast.success('Purchase completed! You can book your session later.');266 |           }267 |         } else {268 |           toast.success('Purchase completed! You can book your session later.');269 |         }270 | 271 |         setFormData({272 |           clientName: '',273 |           clientEmail: '',274 |           clientPhone: '',275 |           countryCode: '+51',276 |           language: 'en',277 |           selectedPackage: null,278 |           selectedScheduleSlot: null,279 |           skipBooking: false280 |         });281 |         setCurrentStep(0);282 |       } else {283 |         throw new Error(purchaseResult.message || 'Purchase failed');284 |       }285 |     } catch (error) {286 |       toast.error('Failed to complete purchase');287 |     }288 |   };289 | 290 |   const handlePaymentError = (error: string) => {291 |     toast.error(`Payment failed: ${error}`);292 |   };293 | 294 |   return (295 |     <div className="min-h-screen bg-white packages-page inner-page mobile-scrollable">296 |       <Header297 |         language={language}298 |         setLanguage={setLanguage}299 |         scrollToSection={scrollToSection}300 |         t={translations}301 |         isMenuOpen={isMenuOpen}302 |         setIsMenuOpen={setIsMenuOpen}303 |         onLoginClick={handleLoginClick}304 |         user={null}305 |         isAdmin={false}306 |       />307 | 308 |       {}309 |       <div className="container mx-auto px-4 py-8 pt-24 mobile-scrollable">310 |         <div className="text-center mb-12">311 |           <h1312 |             className="text-4xl md:text-6xl font-bold mb-6 text-primary"313 |             style={{ fontFamily: 'var(--font-heading)' }}314 |           >315 |             Choose Your Package316 |           </h1>317 |           <p318 |             className="text-xl text-muted max-w-3xl mx-auto"319 |             style={{ fontFamily: 'var(--font-body)' }}320 |           >321 |             Select the perfect package for your spiritual journey and book your session322 |           </p>323 |         </div>324 | 325 |         {}326 |         <div className="mb-12">327 |           <div className="flex justify-center">328 |             <div className="flex items-center space-x-4">329 |               {steps.map((step, index) => (330 |                 <div key={step.id} className="flex items-center">331 |                   <div className={`flex items-center justify-center w-10 h-10 rounded-full border-2 ${332 |                     currentStep >= step.id333 |                       ? 'bg-primary border-primary text-white'334 |                       : 'border-gray-400 text-gray-400'335 |                   }`}>336 |                     {currentStep > step.id ? (337 |                       <CheckCircle className="w-6 h-6" />338 |                     ) : (339 |                       <span className="font-semibold">{step.id + 1}</span>340 |                     )}341 |                   </div>342 |                   <div className="ml-3">343 |                     <p className={`font-semibold ${344 |                       currentStep >= step.id ? 'text-primary' : 'text-gray-400'345 |                     }`}>346 |                       {step.name}347 |                     </p>348 |                     <p className="text-sm text-gray-500">{step.description}</p>349 |                   </div>350 |                   {index < steps.length - 1 && (351 |                     <ArrowRight className="w-5 h-5 text-gray-400 mx-4" />352 |                   )}353 |                 </div>354 |               ))}355 |             </div>356 |           </div>357 |         </div>358 | 359 |         {}360 |         <AnimatePresence mode="wait">361 |           {currentStep === 0 && (362 |             <motion.div363 |               key="packages"364 |               initial={{ opacity: 0, x: 20 }}365 |               animate={{ opacity: 1, x: 0 }}366 |               exit={{ opacity: 0, x: -20 }}367 |               className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"368 |             >369 |               {loading ? (370 |                 <div className="col-span-full text-center py-12">371 |                   <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-primary" />372 |                   <p className="text-muted text-lg">Loading packages...</p>373 |                 </div>374 |               ) : error ? (375 |                 <div className="col-span-full text-center py-12">376 |                   <AlertCircle className="w-8 h-8 mx-auto mb-4 text-red-500" />377 |                   <p className="text-red-600 text-lg mb-4">Error loading packages: {error}</p>378 |                   <button379 |                     onClick={refetch}380 |                     className="btn-primary"381 |                   >382 |                     Try Again383 |                   </button>384 |                 </div>385 |               ) : packages.length === 0 ? (386 |                 <div className="col-span-full text-center py-12">387 |                   <Package className="w-8 h-8 mx-auto mb-4 text-muted" />388 |                   <p className="text-muted text-lg">No packages available at the moment.</p>389 |                   <button390 |                     onClick={refetch}391 |                     className="btn-primary mt-4"392 |                   >393 |                     Refresh394 |                   </button>395 |                 </div>396 |               ) : (397 |                 packages.map((pkg) => (398 |                 <Card key={pkg.id} className="card-base card-hover hover-scale">399 |                   <CardHeader className="text-center">400 |                     <div className="w-16 h-16 bg-primary rounded-full flex items-center justify-center mx-auto mb-4">401 |                       <Package className="w-8 h-8 text-white" />402 |                     </div>403 |                     <CardTitle404 |                       className="text-2xl text-primary"405 |                       style={{ fontFamily: 'var(--font-heading)' }}406 |                     >407 |                       {pkg.packageDefinition.name}408 |                     </CardTitle>409 |                     <div410 |                       className="text-3xl font-bold text-black"411 |                       style={{ fontFamily: 'var(--font-heading)' }}412 |                     >413 |                       {pkg.currency.symbol}{pkg.price}414 |                     </div>415 |                   </CardHeader>416 |                   <CardContent>417 |                     <p418 |                       className="text-muted mb-6 text-center"419 |                       style={{ fontFamily: 'var(--font-body)' }}420 |                     >421 |                       {pkg.packageDefinition.description}422 |                     </p>423 |                     <div className="space-y-3 mb-6">424 |                       <div className="flex items-center text-sm">425 |                         <Users className="w-4 h-4 mr-2 text-primary" />426 |                         <span className="text-muted">{pkg.packageDefinition.sessionsCount} Sessions</span>427 |                       </div>428 |                       <div className="flex items-center text-sm">429 |                         <Clock className="w-4 h-4 mr-2 text-primary" />430 |                         <span className="text-muted">{pkg.packageDefinition.sessionDuration.duration_minutes} minutes each</span>431 |                       </div>432 |                       <div className="flex items-center text-sm">433 |                         <Star className="w-4 h-4 mr-2 text-primary" />434 |                         <span className="text-muted">Personalized guidance</span>435 |                       </div>436 |                     </div>437 |                     <button438 |                       onClick={() => handlePackageSelect(pkg)}439 |                       className="btn-primary w-full"440 |                     >441 |                       Select Package442 |                     </button>443 |                   </CardContent>444 |                 </Card>445 |                 ))446 |               )}447 |             </motion.div>448 |           )}449 | 450 |           {currentStep === 1 && (451 |             <motion.div452 |               key="personal-info"453 |               initial={{ opacity: 0, x: 20 }}454 |               animate={{ opacity: 1, x: 0 }}455 |               exit={{ opacity: 0, x: -20 }}456 |               className="max-w-2xl mx-auto"457 |             >458 |               <Card className="card-base">459 |                 <CardHeader>460 |                   <CardTitle461 |                     className="text-2xl text-primary text-center"462 |                     style={{ fontFamily: 'var(--font-heading)' }}463 |                   >464 |                     Personal Information465 |                   </CardTitle>466 |                 </CardHeader>467 |                 <CardContent className="space-y-6">468 |                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">469 |                     <div>470 |                       <Label htmlFor="clientName" className="text-black">Full Name *</Label>471 |                       <Input472 |                         id="clientName"473 |                         value={formData.clientName}474 |                         onChange={(e) => setFormData(prev => ({ ...prev, clientName: e.target.value }))}475 |                         className="border-gray-300 text-black placeholder-gray-400"476 |                         placeholder="Enter your full name"477 |                         required478 |                       />479 |                     </div>480 |                     <div>481 |                       <Label htmlFor="clientEmail" className="text-black">Email *</Label>482 |                       <Input483 |                         id="clientEmail"484 |                         type="email"485 |                         value={formData.clientEmail}486 |                         onChange={(e) => setFormData(prev => ({ ...prev, clientEmail: e.target.value }))}487 |                         className="border-gray-300 text-black placeholder-gray-400"488 |                         placeholder="Enter your email"489 |                         required490 |                       />491 |                     </div>492 |                   </div>493 | 494 |                   <div className="grid grid-cols-1 md:grid-cols-2 gap-4">495 |                     <div>496 |                       <Label htmlFor="clientPhone" className="text-black">Phone *</Label>497 |                       <div className="relative">498 |                         {}499 |                         <div className="absolute inset-y-0 left-0 z-10 country-dropdown">500 |                           <button501 |                             type="button"502 |                             onClick={() => setIsCountryDropdownOpen(!isCountryDropdownOpen)}503 |                             className="h-full w-24 px-3 flex items-center space-x-1 border-r border-gray-300 bg-gray-50 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"504 |                           >505 |                             <span className="text-sm">{selectedCountry.flag}</span>506 |                             <span className="text-sm text-gray-700">{selectedCountry.code}</span>507 |                             <svg className="w-4 h-4 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">508 |                               <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />509 |                             </svg>510 |                           </button>511 | 512 |                           {}513 |                           {isCountryDropdownOpen && (514 |                             <div className="absolute top-full left-0 mt-1 w-64 bg-white border border-gray-300 rounded-md shadow-lg z-20 max-h-60 overflow-y-auto">515 |                               {countries.map((country) => (516 |                                 <button517 |                                   key={country.country}518 |                                   type="button"519 |                                   onClick={() => {520 |                                     setFormData(prev => ({ ...prev, countryCode: country.code }));521 |                                     setIsCountryDropdownOpen(false);522 |                                   }}523 |                                   className="w-full px-3 py-2 text-left hover:bg-gray-100 flex items-center space-x-3"524 |                                 >525 |                                   <span className="text-sm">{country.flag}</span>526 |                                   <span className="text-sm text-gray-700">{country.code}</span>527 |                                   <span className="text-sm text-gray-500">{country.name}</span>528 |                                 </button>529 |                               ))}530 |                             </div>531 |                           )}532 |                         </div>533 | 534 |                         <Input535 |                           id="clientPhone"536 |                           type="tel"537 |                           value={formData.clientPhone}538 |                           onChange={(e) => setFormData(prev => ({ ...prev, clientPhone: e.target.value }))}539 |                           className="border-gray-300 text-black placeholder-gray-400 pl-24 h-10 flex items-center"540 |                           placeholder="987654321"541 |                           required542 |                         />543 |                       </div>544 |                     </div>545 |                     <div>546 |                       {}547 |                     </div>548 |                   </div>549 | 550 |                   <div className="flex justify-between pt-4">551 |                     <button552 |                       onClick={() => setCurrentStep(0)}553 |                       className="btn-outline"554 |                     >555 |                       <ArrowLeft className="w-4 h-4 mr-2" />556 |                       Back557 |                     </button>558 |                     <button559 |                       onClick={() => setCurrentStep(2)}560 |                       className="btn-primary"561 |                     >562 |                       Continue563 |                       <ArrowRight className="w-4 h-4 ml-2" />564 |                     </button>565 |                   </div>566 |                 </CardContent>567 |               </Card>568 |             </motion.div>569 |           )}570 | 571 |           {currentStep === 2 && (572 |             <motion.div573 |               key="booking"574 |               initial={{ opacity: 0, x: 20 }}575 |               animate={{ opacity: 1, x: 0 }}576 |               exit={{ opacity: 0, x: -20 }}577 |               className="max-w-4xl mx-auto"578 |             >579 |               <Card className="card-base">580 |                 <CardHeader>581 |                   <CardTitle582 |                     className="text-2xl text-primary text-center"583 |                     style={{ fontFamily: 'var(--font-heading)' }}584 |                   >585 |                     Schedule Your Session586 |                   </CardTitle>587 |                   <p588 |                     className="text-muted text-center"589 |                     style={{ fontFamily: 'var(--font-body)' }}590 |                   >591 |                     Choose a time that works for you, or skip to book later592 |                   </p>593 |                 </CardHeader>594 |                 <CardContent>595 |                   {}596 |                   <div className="mb-6">597 |                     <div className="flex items-center space-x-2 p-4 border border-gray-200 rounded-lg">598 |                       <input599 |                         type="checkbox"600 |                         id="skipBooking"601 |                         checked={formData.skipBooking}602 |                         onChange={(e) => setFormData(prev => ({ ...prev, skipBooking: e.target.checked, selectedScheduleSlot: null }))}603 |                         className="w-4 h-4 text-primary border-gray-300 rounded focus:ring-primary"604 |                       />605 |                       <label htmlFor="skipBooking" className="text-sm text-gray-700 cursor-pointer">606 |                         Skip booking for now - I&apos;ll book later from my account607 |                       </label>608 |                     </div>609 |                   </div>610 | 611 |                   {}612 |                   {!formData.skipBooking && (613 |                     <div>614 |                       <h4 className="text-lg font-semibold text-black mb-4" style={{ fontFamily: 'var(--font-heading)' }}>615 |                         Available Time Slots616 |                       </h4>617 |                       {scheduleSlots.length > 0 ? (618 |                         <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6">619 |                           {scheduleSlots.slice(0, 12).map((slot) => (620 |                             <Card621 |                               key={slot.id}622 |                               className={`cursor-pointer transition-all duration-300 ${623 |                                 slot.isAvailable && slot.bookedCount < slot.capacity624 |                                   ? formData.selectedScheduleSlot?.id === slot.id625 |                                     ? 'border-primary bg-primary/10'626 |                                     : 'card-base card-hover border-gray-300 hover:border-primary'627 |                                   : 'bg-gray-100 border-gray-300 opacity-50 cursor-not-allowed'628 |                               }`}629 |                               onClick={() => {630 |                                 if (slot.isAvailable && slot.bookedCount < slot.capacity) {631 |                                   setFormData(prev => ({ ...prev, selectedScheduleSlot: slot }));632 |                                 }633 |                               }}634 |                             >635 |                               <CardContent className="p-4 text-center">636 |                                 <div className="text-sm text-muted">637 |                                   {new Date(slot.startTime).toLocaleDateString('en-US', {638 |                                     weekday: 'short',639 |                                     month: 'short',640 |                                     day: 'numeric'641 |                                   })}642 |                                 </div>643 |                                 <div644 |                                   className="font-semibold text-black"645 |                                   style={{ fontFamily: 'var(--font-heading)' }}646 |                                 >647 |                                   {new Date(slot.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}648 |                                 </div>649 |                                 <div className="text-xs text-muted">650 |                                   {slot.scheduleTemplate?.sessionDuration?.duration_minutes || 60} min651 |                                 </div>652 |                                 <div className="text-xs text-muted">653 |                                   {slot.instructorName || 'Available'}654 |                                 </div>655 |                                 <div className="text-xs text-muted">656 |                                   {slot.bookedCount}/{slot.capacity} booked657 |                                 </div>658 |                                 {formData.selectedScheduleSlot?.id === slot.id && (659 |                                   <div className="text-xs text-primary font-medium mt-1">660 |                                     ✓ Selected661 |                                   </div>662 |                                 )}663 |                               </CardContent>664 |                             </Card>665 |                           ))}666 |                         </div>667 |                       ) : (668 |                         <div className="text-center py-8 text-gray-500">669 |                           <div className="text-sm">No available time slots</div>670 |                           <div className="text-xs mt-1">Please try again later or skip to book later</div>671 |                         </div>672 |                       )}673 |                     </div>674 |                   )}675 | 676 |                   <div className="text-center">677 |                     <button678 |                       onClick={() => setCurrentStep(1)}679 |                       className="btn-outline mr-4"680 |                     >681 |                       <ArrowLeft className="w-4 h-4 mr-2" />682 |                       Back683 |                     </button>684 |                     <button685 |                       onClick={() => setCurrentStep(3)}686 |                       className="btn-primary"687 |                       disabled={!formData.skipBooking && !formData.selectedScheduleSlot}688 |                     >689 |                       Continue to Payment690 |                       <ArrowRight className="w-4 h-4 ml-2" />691 |                     </button>692 |                   </div>693 |                 </CardContent>694 |               </Card>695 |             </motion.div>696 |           )}697 | 698 |           {currentStep === 3 && (699 |             <motion.div700 |               key="payment"701 |               initial={{ opacity: 0, x: 20 }}702 |               animate={{ opacity: 1, x: 0 }}703 |               exit={{ opacity: 0, x: -20 }}704 |               className="max-w-2xl mx-auto payment-step"705 |               style={{ overflow: 'visible' }}706 |             >707 |               <Card className="card-base">708 |                 <CardHeader>709 |                   <CardTitle710 |                     className="text-2xl text-primary text-center"711 |                     style={{ fontFamily: 'var(--font-heading)' }}712 |                   >713 |                     Complete Your Purchase714 |                   </CardTitle>715 |                 </CardHeader>716 |                 <CardContent>717 |                   {}718 |                   <div className="bg-light rounded-lg p-4 mb-6">719 |                     <h3720 |                       className="text-lg font-semibold text-black mb-3"721 |                       style={{ fontFamily: 'var(--font-heading)' }}722 |                     >723 |                       Order Summary724 |                     </h3>725 |                     <div className="space-y-2">726 |                       <div className="flex justify-between">727 |                         <span className="text-muted">Package:</span>728 |                         <span className="text-black">{formData.selectedPackage?.packageDefinition.name}</span>729 |                       </div>730 |                       <div className="flex justify-between">731 |                         <span className="text-muted">Sessions:</span>732 |                         <span className="text-black">{formData.selectedPackage?.packageDefinition.sessionsCount}</span>733 |                       </div>734 |                       {formData.selectedScheduleSlot && (735 |                         <div className="flex justify-between">736 |                           <span className="text-muted">First Session:</span>737 |                           <span className="text-black">738 |                             {new Date(formData.selectedScheduleSlot.startTime).toLocaleDateString()} at{' '}739 |                             {new Date(formData.selectedScheduleSlot.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}740 |                           </span>741 |                         </div>742 |                       )}743 |                       <div className="flex justify-between text-lg font-semibold border-t border-gray-200 pt-2">744 |                         <span className="text-primary">Total:</span>745 |                         <span className="text-primary">746 |                           {formData.selectedPackage?.currency.symbol}{formData.selectedPackage?.price}747 |                         </span>748 |                       </div>749 |                     </div>750 |                   </div>751 | 752 |                   {}753 |                   {formData.selectedPackage && (754 |                     <IzipayPaymentMethod755 |                       amount={formData.selectedPackage.price}756 |                       currency="PEN"757 |                       customerEmail={formData.clientEmail}758 |                       customerName={formData.clientName}759 |                       description={`${formData.selectedPackage.packageDefinition.name} - ${formData.selectedPackage.packageDefinition.sessionsCount} sessions`}760 |                       packagePriceId={formData.selectedPackage.id}761 |                       quantity={1}762 |                       metadata={{763 |                         clientPhone: `${formData.countryCode}${formData.clientPhone}`,764 |                         language: formData.language,765 |                         scheduleSlotId: formData.selectedScheduleSlot?.id766 |                       }}767 |                       onSuccess={handlePaymentSuccess}768 |                       onError={handlePaymentError}769 |                       onCancel={() => setCurrentStep(2)}770 |                     />771 |                   )}772 | 773 |                   <div className="flex justify-between pt-4">774 |                     <button775 |                       onClick={() => setCurrentStep(2)}776 |                       className="btn-outline"777 |                     >778 |                       <ArrowLeft className="w-4 h-4 mr-2" />779 |                       Back780 |                     </button>781 |                   </div>782 |                 </CardContent>783 |               </Card>784 |             </motion.div>785 |           )}786 |         </AnimatePresence>787 |       </div>788 |     </div>789 |   );790 | }
==================================================END: frontend/app/packages/page.tsx==================================================


==================================================FILE: frontend/hooks/useAuth.tsxSIZE: 3.88 KB==================================================
  1 | import { useState, useEffect } from 'react';  2 | import { safeApiCall } from '@/lib/api-utils';  3 |   4 | interface User {  5 |   id: string;  6 |   email: string;  7 |   fullName?: string;  8 |   role?: string;  9 |   access_token: string; 10 | } 11 |  12 | interface LoginApiResponse { 13 |   success: boolean; 14 |   user?: User; 15 |   message?: string; 16 |   error?: string; 17 | } 18 |  19 | interface VerifyApiResponse { 20 |   success: boolean; 21 |   user?: Omit<User, 'access_token'>; 22 |   message?: string; 23 |   error?: string; 24 | } 25 |  26 | export function useAuth() { 27 |   const [user, setUser] = useState<User | null>(null); 28 |   const [isLoading, setIsLoading] = useState(true); 29 |  30 |   const isAdmin = Boolean(user?.role === 'admin'); 31 |  32 |   useEffect(() => { 33 |  34 |     const token = typeof window !== 'undefined' ? localStorage.getItem('auth_token') : null; 35 |  36 |     if (token) { 37 |  38 |       safeApiCall<VerifyApiResponse>('/api/auth/verify', { 39 |         method: 'POST', 40 |         body: JSON.stringify({ token }) 41 |       }) 42 |       .then(response => { 43 |         if (response.success && response.data && response.data.user && typeof response.data.user === 'object') { 44 |           const userData = { 45 |             ...response.data.user, 46 |             access_token: token 47 |           } as User; 48 |           setUser(userData); 49 |           setIsLoading(false); 50 |         } else { 51 |           if (typeof window !== 'undefined') { 52 |             localStorage.removeItem('auth_token'); 53 |           } 54 |           setUser(null); 55 |           setIsLoading(false); 56 |         } 57 |       }) 58 |       .catch(error => { 59 |         if (typeof window !== 'undefined') { 60 |           localStorage.removeItem('auth_token'); 61 |         } 62 |         setUser(null); 63 |         setIsLoading(false); 64 |       }); 65 |     } else { 66 |       setUser(null); 67 |       setIsLoading(false); 68 |     } 69 |   }, []); 70 |  71 |   const signIn = async (email: string, password: string) => { 72 |     try { 73 |       const response = await safeApiCall<LoginApiResponse>('/api/auth/login', { 74 |         method: 'POST', 75 |         body: JSON.stringify({ email, password }) 76 |       }); 77 |  78 |       if (response.success && response.data && response.data.user && typeof response.data.user === 'object') { 79 |  80 |         if (typeof window !== 'undefined') { 81 |           localStorage.setItem('auth_token', response.data.user.access_token); 82 |         } 83 |  84 |         setUser(response.data.user); 85 |         setIsLoading(false); 86 |  87 |         return { data: response.data.user, error: null }; 88 |       } else { 89 |         setIsLoading(false); 90 |         return { data: null, error: { message: response.message || 'Login failed' } }; 91 |       } 92 |     } catch (error) { 93 |       setIsLoading(false); 94 |       return { data: null, error }; 95 |     } 96 |   }; 97 |  98 |   const signOut = async () => { 99 | 100 |     if (typeof window !== 'undefined') {101 |       localStorage.removeItem('auth_token');102 |     }103 |     setUser(null);104 | 105 |     return { error: null };106 |   };107 | 108 |   return {109 |     user,110 |     isLoading,111 |     signIn,112 |     signOut,113 |     isAdmin114 |   };115 | }
==================================================END: frontend/hooks/useAuth.tsx==================================================


==================================================FILE: frontend/hooks/usePackages.tsxSIZE: 4.33 KB==================================================
  1 | import { useState, useEffect, useCallback } from 'react';  2 | import { useAuth } from './useAuth';  3 | import { toast } from 'sonner';  4 |   5 | export interface PackagePrice {  6 |   id: number;  7 |   price: number;  8 |   packageDefinition: {  9 |     id: number; 10 |     name: string; 11 |     description: string; 12 |     sessionsCount: number; 13 |     packageType: string; 14 |     maxGroupSize?: number; 15 |     isActive: boolean; 16 |     isPopular?: boolean; 17 |     featured?: boolean; 18 |     displayOrder?: number; 19 |     sessionDuration: { 20 |       id: number; 21 |       name: string; 22 |       duration_minutes: number; 23 |       description?: string; 24 |     }; 25 |   }; 26 |   currency: { 27 |     id: number; 28 |     code: string; 29 |     symbol: string; 30 |     name: string; 31 |   }; 32 |   pricingMode: string; 33 |   isActive: boolean; 34 | } 35 |  36 | export interface UsePackagesReturn { 37 |   packages: PackagePrice[]; 38 |   loading: boolean; 39 |   error: string | null; 40 |   refetch: () => Promise<void>; 41 |   lastLoaded: Date | null; 42 | } 43 |  44 | export function usePackages(currency: string = 'PEN'): UsePackagesReturn { 45 |   const { user } = useAuth(); 46 |   const [packages, setPackages] = useState<PackagePrice[]>([]); 47 |   const [loading, setLoading] = useState(false); 48 |   const [error, setError] = useState<string | null>(null); 49 |   const [lastLoaded, setLastLoaded] = useState<Date | null>(null); 50 |  51 |   const fetchPackages = useCallback(async () => { 52 |     try { 53 |       setLoading(true); 54 |       setError(null); 55 |  56 |       const headers: HeadersInit = { 57 |         'Content-Type': 'application/json', 58 |       }; 59 |  60 |       if (user?.access_token) { 61 |         headers['Authorization'] = `Bearer ${user.access_token}`; 62 |       } 63 |  64 |       const response = await fetch(`/api/packages?currency=${currency}&active=true`, { 65 |         method: 'GET', 66 |         headers, 67 |       }); 68 |  69 |       if (!response.ok) { 70 |         throw new Error(`Failed to fetch packages: ${response.status} ${response.statusText}`); 71 |       } 72 |  73 |       const result = await response.json(); 74 |  75 |       const packages = result.success ? result.data : []; 76 |       setPackages(packages); 77 |       setLastLoaded(new Date()); 78 |  79 |     } catch (err) { 80 |       const errorMessage = err instanceof Error ? err.message : 'Failed to fetch packages'; 81 |       setError(errorMessage); 82 |       toast.error(`Error loading packages: ${errorMessage}`); 83 |     } finally { 84 |       setLoading(false); 85 |     } 86 |   }, [user?.access_token, currency]); 87 |  88 |   const refetch = useCallback(async () => { 89 |     await fetchPackages(); 90 |   }, [fetchPackages]); 91 |  92 |   useEffect(() => { 93 |  94 |     fetchPackages(); 95 |   }, [fetchPackages]); 96 |  97 |   return { 98 |     packages, 99 |     loading,100 |     error,101 |     refetch,102 |     lastLoaded,103 |   };104 | }105 | 106 | export function usePackagesWithCurrency() {107 |   const [selectedCurrency, setSelectedCurrency] = useState('PEN');108 |   const packagesData = usePackages(selectedCurrency);109 | 110 |   const changeCurrency = useCallback((currency: string) => {111 |     setSelectedCurrency(currency);112 |   }, []);113 | 114 |   return {115 |     ...packagesData,116 |     selectedCurrency,117 |     changeCurrency,118 |   };119 | }120 | 121 | export function usePackage(packageId: number, currency: string = 'PEN') {122 |   const { packages, loading, error, refetch } = usePackages(currency);123 | 124 |   const packageData = packages.find(pkg => pkg.id === packageId);125 | 126 |   return {127 |     package: packageData,128 |     loading,129 |     error,130 |     refetch,131 |   };132 | }133 | 134 | export function usePopularPackages(currency: string = 'PEN') {135 |   const { packages, loading, error, refetch } = usePackages(currency);136 | 137 |   const popularPackages = packages.filter(pkg => pkg.packageDefinition.isPopular);138 | 139 |   return {140 |     packages: popularPackages,141 |     loading,142 |     error,143 |     refetch,144 |   };145 | }146 | 147 | export function useFeaturedPackages(currency: string = 'PEN') {148 |   const { packages, loading, error, refetch } = usePackages(currency);149 | 150 |   const featuredPackages = packages.filter(pkg => pkg.packageDefinition.featured);151 | 152 |   return {153 |     packages: featuredPackages,154 |     loading,155 |     error,156 |     refetch,157 |   };158 | }
==================================================END: frontend/hooks/usePackages.tsx==================================================


==================================================FILE: frontend/hooks/useTranslations.tsxSIZE: 5.91 KB==================================================
  1 | 'use client';  2 |   3 | import React, { useState, useEffect } from 'react';  4 | import { defaultTranslations } from '@/lib/data/translations';  5 |   6 | export function useLanguage() {  7 |   const [language, setLanguage] = useState<'en' | 'es'>('en');  8 |   9 |   useEffect(() => { 10 |  11 |     const savedLanguage = localStorage.getItem('language'); 12 |     if (savedLanguage && (savedLanguage === 'en' || savedLanguage === 'es')) { 13 |       setLanguage(savedLanguage as 'en' | 'es'); 14 |     } 15 |   }, []); 16 |  17 |   const changeLanguage = React.useCallback((newLanguage: 'en' | 'es') => { 18 |     setLanguage(newLanguage); 19 |     localStorage.setItem('language', newLanguage); 20 |     }, [language]); 21 |  22 |   return { language, setLanguage: changeLanguage }; 23 | } 24 |  25 | export function useTranslations(initialContent?: Record<string, unknown>, language?: 'en' | 'es') { 26 |   const [content, setContent] = useState(initialContent || defaultTranslations); 27 |   const [isLoading, setIsLoading] = useState(false); 28 |  29 |   const currentLanguage = language || 'en'; 30 |  31 |   const fetchTranslations = async () => { 32 |     try { 33 |  34 |       const response = await fetch(`/api/content?t=${Date.now()}`); 35 |  36 |       if (response.ok) { 37 |         const result = await response.json(); 38 |         if (result.content && Object.keys(result.content).length > 0) { 39 |           ); 40 |  41 |           const mergedContent = { 42 |             en: { ...defaultTranslations.en }, 43 |             es: { ...defaultTranslations.es } 44 |           }; 45 |  46 |           if (result.content.en) { 47 |             Object.keys(result.content.en).forEach(key => { 48 |               if (result.content.en[key] && typeof result.content.en[key] === 'object') { 49 |                 mergedContent.en[key as keyof typeof mergedContent.en] = { 50 |                   ...mergedContent.en[key as keyof typeof mergedContent.en], 51 |                   ...result.content.en[key] 52 |                 }; 53 |               } else { 54 |                 mergedContent.en[key as keyof typeof mergedContent.en] = result.content.en[key]; 55 |               } 56 |             }); 57 |           } 58 |  59 |           if (result.content.es) { 60 |             Object.keys(result.content.es).forEach(key => { 61 |               if (result.content.es[key] && typeof result.content.es[key] === 'object') { 62 |                 mergedContent.es[key as keyof typeof mergedContent.es] = { 63 |                   ...mergedContent.es[key as keyof typeof mergedContent.es], 64 |                   ...result.content.es[key] 65 |                 }; 66 |               } else { 67 |                 mergedContent.es[key as keyof typeof mergedContent.es] = result.content.es[key]; 68 |               } 69 |             }); 70 |           } 71 |  72 |           ); 73 |           ); 74 |  75 |           setContent(mergedContent); 76 |         } else { 77 |  78 |           '); 79 |  80 |         } 81 |       } else { 82 |  83 |       } 84 |     } catch (error) { 85 |  86 |     } 87 |   }; 88 |  89 |   useEffect(() => { 90 |  91 |     if (initialContent && Object.keys(initialContent).length > 0) { 92 |       setContent(initialContent); 93 |     } else { 94 |  95 |       setContent(defaultTranslations); 96 |  97 |       fetchTranslations(); 98 |     } 99 |   }, [initialContent, currentLanguage]);100 | 101 |   const updateContent = async (newContent: Record<string, unknown>) => {102 |     try {103 |       setIsLoading(true);104 | 105 |       const response = await fetch('/api/content', {106 |         method: 'PUT',107 |         headers: {108 |           'Content-Type': 'application/json',109 |         },110 |         body: JSON.stringify(newContent),111 |       });112 | 113 |       if (response.ok) {114 |         const result = await response.json();115 |         setContent(result.content);116 |         return { success: true, data: result.content };117 |       } else {118 |         throw new Error('Failed to update content');119 |       }120 |     } catch (error) {121 |       return { success: false, error };122 |     } finally {123 |       setIsLoading(false);124 |     }125 |   };126 | 127 |   const reloadTranslations = () => {128 |     fetchTranslations();129 |   };130 | 131 |   const t = (content?.[currentLanguage as keyof typeof content] || content?.en || defaultTranslations[currentLanguage as keyof typeof defaultTranslations] || defaultTranslations.en);132 | 133 |   return { t, updateContent, isLoading, content, reloadTranslations };134 | }
==================================================END: frontend/hooks/useTranslations.tsx==================================================


==================================================FILE: frontend/lib/api/index.tsSIZE: 12.54 KB==================================================
  1 | import { createClient } from '@/lib/supabase/client';  2 |   3 | export interface ApiResponse<T = unknown> {  4 |   success: boolean;  5 |   data?: T;  6 |   error?: string;  7 |   message?: string;  8 |   details?: unknown;  9 | } 10 |  11 | export interface ApiError { 12 |   message: string; 13 |   status: number; 14 |   details?: unknown; 15 | } 16 |  17 | export interface PaginationParams { 18 |   page?: number; 19 |   limit?: number; 20 |   offset?: number; 21 | } 22 |  23 | export interface SortParams { 24 |   field: string; 25 |   order: 'asc' | 'desc'; 26 | } 27 |  28 | export interface FilterParams { 29 |   [key: string]: string | number | boolean | undefined; 30 | } 31 |  32 | export interface ClientData { 33 |   id?: string; 34 |   name: string; 35 |   email: string; 36 |   phone?: string; 37 |   language?: string; 38 |   status?: string; 39 |   [key: string]: unknown; 40 | } 41 |  42 | export interface BookingData { 43 |   id?: string; 44 |   clientId: string; 45 |   packageId: string; 46 |   scheduleSlotId: string; 47 |   birthData?: { 48 |     date: string; 49 |     city: string; 50 |     time?: string; 51 |   }; 52 |   message?: string; 53 |   [key: string]: unknown; 54 | } 55 |  56 | export interface PackageData { 57 |   id?: string; 58 |   name: string; 59 |   description: string; 60 |   price: number; 61 |   currency: string; 62 |   duration: number; 63 |   sessionsCount: number; 64 |   [key: string]: unknown; 65 | } 66 |  67 | class ApiClient { 68 |   private supabase = createClient(); 69 |   private cache = new Map<string, { data: ApiResponse<unknown>; timestamp: number }>(); 70 |   private cacheTimeout = 5 * 60 * 1000; 71 |  72 |   protected async request<T>( 73 |     endpoint: string, 74 |     options: RequestInit = {} 75 |   ): Promise<ApiResponse<T>> { 76 |     try { 77 |  78 |       const { data: { session } } = await this.supabase.auth.getSession(); 79 |  80 |       if (!session?.access_token) { 81 |         throw new Error('No authentication token available'); 82 |       } 83 |  84 |       const response = await fetch(endpoint, { 85 |         ...options, 86 |         headers: { 87 |           'Content-Type': 'application/json', 88 |           'Authorization': `Bearer ${session.access_token}`, 89 |           ...options.headers, 90 |         }, 91 |       }); 92 |  93 |       if (!response.ok) { 94 |         const errorData = await response.json().catch(() => ({})); 95 |         throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`); 96 |       } 97 |  98 |       const data = await response.json(); 99 |       return data as ApiResponse<T>;100 |     } catch (error) {101 |       return {102 |         success: false,103 |         error: error instanceof Error ? error.message : 'Unknown error occurred',104 |         message: 'API request failed',105 |         data: undefined,106 |       } as ApiResponse<T>;107 |     }108 |   }109 | 110 |   protected async getCachedOrFetch<T>(111 |     key: string,112 |     fetcher: () => Promise<ApiResponse<T>>113 |   ): Promise<ApiResponse<T>> {114 |     const cached = this.cache.get(key);115 |     const now = Date.now();116 | 117 |     if (cached && (now - cached.timestamp) < this.cacheTimeout) {118 |       return cached.data as ApiResponse<T>;119 |     }120 | 121 |     const result = await fetcher();122 | 123 |     if (result.success) {124 |       this.cache.set(key, { data: result, timestamp: now });125 |     }126 | 127 |     return result;128 |   }129 | 130 |   clearCache(key?: string) {131 |     if (key) {132 |       this.cache.delete(key);133 |     } else {134 |       this.cache.clear();135 |     }136 |   }137 | }138 | 139 | class ClientsApi extends ApiClient {140 |   private baseUrl = '/api/admin/clients';141 | 142 |   async getAll(params?: {143 |     enhanced?: boolean;144 |     email?: string;145 |     status?: string;146 |     language?: string;147 |     hasActivePackages?: boolean;148 |   }): Promise<ApiResponse<ClientData[]>> {149 |     const searchParams = new URLSearchParams();150 | 151 |     if (params?.enhanced) searchParams.append('enhanced', 'true');152 |     if (params?.email) searchParams.append('email', params.email);153 |     if (params?.status) searchParams.append('status', params.status);154 |     if (params?.language) searchParams.append('language', params.language);155 |     if (params?.hasActivePackages !== undefined) {156 |       searchParams.append('has_active_packages', params.hasActivePackages.toString());157 |     }158 | 159 |     const url = `${this.baseUrl}?${searchParams.toString()}`;160 |     return this.getCachedOrFetch(`clients:all:${url}`, () =>161 |       this.request(url)162 |     );163 |   }164 | 165 |   async getById(id: string): Promise<ApiResponse<ClientData>> {166 |     return this.getCachedOrFetch(`clients:${id}`, () =>167 |       this.request(`${this.baseUrl}/${id}`)168 |     );169 |   }170 | 171 |   async create(clientData: Omit<ClientData, 'id'>): Promise<ApiResponse<ClientData>> {172 |     const result = await this.request(this.baseUrl, {173 |       method: 'POST',174 |       body: JSON.stringify(clientData),175 |     });176 | 177 |     if (result.success) {178 |       this.clearCache('clients:all');179 |     }180 | 181 |     return result as ApiResponse<ClientData>;182 |   }183 | 184 |   async update(id: string, clientData: Partial<ClientData>): Promise<ApiResponse<ClientData>> {185 |     const result = await this.request(`${this.baseUrl}/${id}`, {186 |       method: 'PUT',187 |       body: JSON.stringify(clientData),188 |     });189 | 190 |     if (result.success) {191 |       this.clearCache(`clients:${id}`);192 |       this.clearCache('clients:all');193 |     }194 | 195 |     return result as ApiResponse<ClientData>;196 |   }197 | 198 |   async delete(id: string): Promise<ApiResponse<unknown>> {199 |     const result = await this.request(`${this.baseUrl}?id=${id}`, {200 |       method: 'DELETE',201 |     });202 | 203 |     if (result.success) {204 |       this.clearCache(`clients:${id}`);205 |       this.clearCache('clients:all');206 |     }207 | 208 |     return result;209 |   }210 | }211 | 212 | class BookingsApi extends ApiClient {213 |   private baseUrl = '/api/admin/bookings';214 | 215 |   async getAll(params?: {216 |     clientId?: string;217 |     status?: string;218 |     dateFrom?: string;219 |     dateTo?: string;220 |   }): Promise<ApiResponse<BookingData[]>> {221 |     const searchParams = new URLSearchParams();222 | 223 |     if (params?.clientId) searchParams.append('clientId', params.clientId);224 |     if (params?.status) searchParams.append('status', params.status);225 |     if (params?.dateFrom) searchParams.append('dateFrom', params.dateFrom);226 |     if (params?.dateTo) searchParams.append('dateTo', params.dateTo);227 | 228 |     const url = `${this.baseUrl}?${searchParams.toString()}`;229 |     return this.getCachedOrFetch(`bookings:all:${url}`, () =>230 |       this.request(url)231 |     );232 |   }233 | 234 |   async create(bookingData: Omit<BookingData, 'id'>): Promise<ApiResponse<BookingData>> {235 |     const result = await this.request(this.baseUrl, {236 |       method: 'POST',237 |       body: JSON.stringify(bookingData),238 |     });239 | 240 |     if (result.success) {241 |       this.clearCache('bookings:all');242 |     }243 | 244 |     return result as ApiResponse<BookingData>;245 |   }246 | 247 |   async update(id: string, bookingData: Partial<BookingData>): Promise<ApiResponse<BookingData>> {248 |     const result = await this.request(`${this.baseUrl}/${id}`, {249 |       method: 'PUT',250 |       body: JSON.stringify(bookingData),251 |     });252 | 253 |     if (result.success) {254 |       this.clearCache(`bookings:${id}`);255 |       this.clearCache('bookings:all');256 |     }257 | 258 |     return result as ApiResponse<BookingData>;259 |   }260 | 261 |   async delete(id: string): Promise<ApiResponse<unknown>> {262 |     const result = await this.request(`${this.baseUrl}?id=${id}`, {263 |       method: 'DELETE',264 |     });265 | 266 |     if (result.success) {267 |       this.clearCache(`bookings:${id}`);268 |       this.clearCache('bookings:all');269 |     }270 | 271 |     return result;272 |   }273 | }274 | 275 | class PackagesApi extends ApiClient {276 |   private baseUrl = '/api/admin/packages';277 | 278 |   async getAll(): Promise<ApiResponse<PackageData[]>> {279 |     return this.getCachedOrFetch('packages:all', () =>280 |       this.request(this.baseUrl)281 |     );282 |   }283 | 284 |   async create(packageData: Omit<PackageData, 'id'>): Promise<ApiResponse<PackageData>> {285 |     const result = await this.request(this.baseUrl, {286 |       method: 'POST',287 |       body: JSON.stringify(packageData),288 |     });289 | 290 |     if (result.success) {291 |       this.clearCache('packages:all');292 |     }293 | 294 |     return result as ApiResponse<PackageData>;295 |   }296 | 297 |   async update(id: string, packageData: Partial<PackageData>): Promise<ApiResponse<PackageData>> {298 |     const result = await this.request(`${this.baseUrl}/${id}`, {299 |       method: 'PUT',300 |       body: JSON.stringify(packageData),301 |     });302 | 303 |     if (result.success) {304 |       this.clearCache(`packages:${id}`);305 |       this.clearCache('packages:all');306 |     }307 | 308 |     return result as ApiResponse<PackageData>;309 |   }310 | 311 |   async delete(id: string): Promise<ApiResponse<unknown>> {312 |     const result = await this.request(`${this.baseUrl}?id=${id}`, {313 |       method: 'DELETE',314 |     });315 | 316 |     if (result.success) {317 |       this.clearCache(`packages:${id}`);318 |       this.clearCache('packages:all');319 |     }320 | 321 |     return result;322 |   }323 | }324 | 325 | class DashboardApi extends ApiClient {326 |   private baseUrl = '/api/client/dashboard-stats';327 | 328 |   async getStats(): Promise<ApiResponse<Record<string, unknown>>> {329 |     return this.getCachedOrFetch('dashboard:stats', () =>330 |       this.request(this.baseUrl)331 |     );332 |   }333 | }334 | 335 | export const api = {336 |   clients: new ClientsApi(),337 |   bookings: new BookingsApi(),338 |   packages: new PackagesApi(),339 |   dashboard: new DashboardApi(),340 | };341 | 342 | export function createApiEndpoint<T>(baseUrl: string) {343 |   return {344 |     getAll: (params?: Record<string, string | number | boolean>) => {345 |       const searchParams = params ? new URLSearchParams(346 |         Object.entries(params).reduce((acc, [key, value]) => {347 |           acc[key] = String(value);348 |           return acc;349 |         }, {} as Record<string, string>)350 |       ) : new URLSearchParams();351 |       return fetch(`${baseUrl}?${searchParams}`).then(res => res.json());352 |     },353 | 354 |     getById: (id: string) =>355 |       fetch(`${baseUrl}/${id}`).then(res => res.json()),356 | 357 |     create: (data: T) =>358 |       fetch(baseUrl, {359 |         method: 'POST',360 |         headers: { 'Content-Type': 'application/json' },361 |         body: JSON.stringify(data),362 |       }).then(res => res.json()),363 | 364 |     update: (id: string, data: Partial<T>) =>365 |       fetch(`${baseUrl}/${id}`, {366 |         method: 'PUT',367 |         headers: { 'Content-Type': 'application/json' },368 |         body: JSON.stringify(data),369 |       }).then(res => res.json()),370 | 371 |     delete: (id: string) =>372 |       fetch(`${baseUrl}?id=${id}`, { method: 'DELETE' }).then(res => res.json()),373 |   };374 | }375 | 376 | export function handleApiError(error: unknown): ApiError {377 |   if (error instanceof Error) {378 |     return {379 |       message: error.message,380 |       status: 500,381 |       details: error.stack,382 |     };383 |   }384 | 385 |   if (typeof error === 'string') {386 |     return {387 |       message: error,388 |       status: 500,389 |     };390 |   }391 | 392 |   return {393 |     message: 'An unexpected error occurred',394 |     status: 500,395 |     details: error,396 |   };397 | }398 | 399 | export default api;
==================================================END: frontend/lib/api/index.ts==================================================


==================================================FILE: frontend/lib/auth.tsSIZE: 3.19 KB==================================================
  1 | import { NextRequest } from 'next/server';  2 | import jwt from 'jsonwebtoken';  3 | import { PrismaClient } from '@prisma/client';  4 |   5 | const prisma = new PrismaClient();  6 | const JWT_SECRET = process.env.JWT_SECRET || 'your-secret-key-change-in-production';  7 |   8 | export interface AuthenticatedUser {  9 |   id: string; 10 |   email: string; 11 |   role: string; 12 | } 13 |  14 | export function getAuthenticatedUser(request: NextRequest): AuthenticatedUser | null { 15 |   const userId = request.headers.get('x-user-id'); 16 |   const userEmail = request.headers.get('x-user-email'); 17 |   const userRole = request.headers.get('x-user-role'); 18 |  19 |   if (!userId || !userEmail || !userRole) { 20 |     return null; 21 |   } 22 |  23 |   return { 24 |     id: userId, 25 |     email: userEmail, 26 |     role: userRole 27 |   }; 28 | } 29 |  30 | export async function requireAuth(request: NextRequest): Promise<AuthenticatedUser | null> { 31 |   const authHeader = request.headers.get('Authorization'); 32 |  33 |   if (!authHeader || !authHeader.startsWith('Bearer ')) { 34 |     return null; 35 |   } 36 |  37 |   const token = authHeader.replace('Bearer ', ''); 38 |   try { 39 |  40 |     const decoded = jwt.verify(token, JWT_SECRET) as Record<string, unknown>; 41 |  42 |     if (!decoded || !decoded.userId) { 43 |       return null; 44 |     } 45 |  46 |     const user = await prisma.user.findUnique({ 47 |       where: { id: String(decoded.userId) }, 48 |       select: { id: true, email: true, role: true, status: true } 49 |     }); 50 |  51 |     if (!user) { 52 |       return null; 53 |     } 54 |  55 |     if (user.status !== 'active') { 56 |       return null; 57 |     } 58 |  59 |     return { 60 |       id: user.id, 61 |       email: user.email, 62 |       role: user.role || 'user' 63 |     }; 64 |   } catch (error) { 65 |     return null; 66 |   } 67 | } 68 |  69 | export async function requireAuthResponse(request: NextRequest): Promise<NextResponse | null> { 70 |   const user = await requireAuth(request); 71 |  72 |   if (!user) { 73 |     return NextResponse.json({ 74 |       code: 401, 75 |       message: 'Missing or invalid authorization', 76 |       error: 'Authorization required' 77 |     }, { status: 401 }); 78 |   } 79 |  80 |   return null; 81 | } 82 |  83 | export function createAuthMiddleware(handler: (request: NextRequest, user: AuthenticatedUser) => Promise<NextResponse>) { 84 |   return async (request: NextRequest) => { 85 |     const user = await requireAuth(request); 86 |  87 |     if (!user) { 88 |       return NextResponse.json({ 89 |         code: 401, 90 |         message: 'Missing or invalid authorization', 91 |         error: 'Authorization required' 92 |       }, { status: 401 }); 93 |     } 94 |  95 |     return handler(request, user); 96 |   }; 97 | }
==================================================END: frontend/lib/auth.ts==================================================


==================================================FILE: frontend/lib/index.tsSIZE: 2.49 KB==================================================
  1 | export * from './design-system';  2 |   3 | export * from './styles/common';  4 |   5 | export * from './api';  6 |   7 | export * from './state';  8 |   9 | export * from './utils'; 10 |  11 | export * from './auth'; 12 |  13 | export * from './supabase/client'; 14 | export * from './supabase/server'; 15 |  16 | export * from './types'; 17 |  18 | export * from './validations'; 19 |  20 | export * from './email'; 21 |  22 | export * from './data'; 23 | export * from './data/translations';
==================================================END: frontend/lib/index.ts==================================================


==================================================FILE: frontend/lib/prisma.tsSIZE: 0.83 KB==================================================
  1 | import { PrismaClient } from '@prisma/client';  2 |   3 | const globalForPrisma = globalThis as unknown as {  4 |   prisma: PrismaClient | undefined;  5 | };  6 |   7 | export const prisma = globalForPrisma.prisma ?? new PrismaClient({  8 |   datasources: {  9 |     db: { 10 |       url: process.env.DATABASE_URL || "postgresql: 11 |     }, 12 |   }, 13 |  14 |   log: process.env.NODE_ENV === 'development' ? ['query', 'error', 'warn', 'info'] : ['error'], 15 |   errorFormat: 'pretty', 16 | }); 17 |  18 | if (process.env.NODE_ENV !== 'production') { 19 |   globalForPrisma.prisma = prisma; 20 | } 21 |  22 | prisma.$connect().catch((error) => { 23 |   }); 24 |  25 | export default prisma;
==================================================END: frontend/lib/prisma.ts==================================================


==================================================FILE: frontend/lib/state/index.tsSIZE: 11.48 KB==================================================
  1 | import { useState, useEffect, useCallback } from 'react';  2 | import { api, ApiResponse } from '@/lib/api';  3 |   4 | export interface UseApiState<T> {  5 |   data: T | null;  6 |   loading: boolean;  7 |   error: string | null;  8 |   refetch: () => Promise<void>;  9 | } 10 |  11 | export interface UseApiOptions { 12 |   immediate?: boolean; 13 |   cache?: boolean; 14 |   onSuccess?: (data: unknown) => void; 15 |   onError?: (error: string) => void; 16 | } 17 |  18 | export function useApi<T>( 19 |   apiCall: () => Promise<ApiResponse<T>>, 20 |   options: UseApiOptions = {} 21 | ): UseApiState<T> { 22 |   const { immediate = true, onSuccess, onError } = options; 23 |  24 |   const [data, setData] = useState<T | null>(null); 25 |   const [loading, setLoading] = useState(false); 26 |   const [error, setError] = useState<string | null>(null); 27 |   const [isInitialized, setIsInitialized] = useState(false); 28 |  29 |   const fetchData = useCallback(async () => { 30 |     try { 31 |       setLoading(true); 32 |       setError(null); 33 |  34 |       const response = await apiCall(); 35 |  36 |       if (response.success && response.data) { 37 |         setData(response.data); 38 |         onSuccess?.(response.data); 39 |       } else { 40 |         const errorMessage = response.error || response.message || 'Failed to fetch data'; 41 |         setError(errorMessage); 42 |         onError?.(errorMessage); 43 |       } 44 |     } catch (err) { 45 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred'; 46 |       setError(errorMessage); 47 |       onError?.(errorMessage); 48 |     } finally { 49 |       setLoading(false); 50 |       setIsInitialized(true); 51 |     } 52 |   }, [apiCall, onSuccess, onError]); 53 |  54 |   useEffect(() => { 55 |     if (immediate && !isInitialized) { 56 |       fetchData(); 57 |     } 58 |   }, [immediate, isInitialized, fetchData]); 59 |  60 |   return { 61 |     data, 62 |     loading, 63 |     error, 64 |     refetch: fetchData, 65 |   }; 66 | } 67 |  68 | export function useClients(options: UseApiOptions = {}) { 69 |   return useApi(() => api.clients.getAll({ enhanced: true }), options); 70 | } 71 |  72 | export function useClient(id: string, options: UseApiOptions = {}) { 73 |   return useApi(() => api.clients.getById(id), options); 74 | } 75 |  76 | export function useCreateClient() { 77 |   const [loading, setLoading] = useState(false); 78 |   const [error, setError] = useState<string | null>(null); 79 |  80 |   const createClient = useCallback(async (clientData: Record<string, unknown>) => { 81 |     try { 82 |       setLoading(true); 83 |       setError(null); 84 |  85 |       const response = await api.clients.create(clientData); 86 |  87 |       if (response.success) { 88 |         return response.data; 89 |       } else { 90 |         const errorMessage = response.error || response.message || 'Failed to create client'; 91 |         setError(errorMessage); 92 |         throw new Error(errorMessage); 93 |       } 94 |     } catch (err) { 95 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred'; 96 |       setError(errorMessage); 97 |       throw err; 98 |     } finally { 99 |       setLoading(false);100 |     }101 |   }, []);102 | 103 |   return {104 |     createClient,105 |     loading,106 |     error,107 |   };108 | }109 | 110 | export function useUpdateClient() {111 |   const [loading, setLoading] = useState(false);112 |   const [error, setError] = useState<string | null>(null);113 | 114 |   const updateClient = useCallback(async (id: string, clientData: Record<string, unknown>) => {115 |     try {116 |       setLoading(true);117 |       setError(null);118 | 119 |       const response = await api.clients.update(id, clientData);120 | 121 |       if (response.success) {122 |         return response.data;123 |       } else {124 |         const errorMessage = response.error || response.message || 'Failed to update client';125 |         setError(errorMessage);126 |         throw new Error(errorMessage);127 |       }128 |     } catch (err) {129 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';130 |       setError(errorMessage);131 |       throw err;132 |     } finally {133 |       setLoading(false);134 |     }135 |   }, []);136 | 137 |   return {138 |     updateClient,139 |     loading,140 |     error,141 |   };142 | }143 | 144 | export function useDeleteClient() {145 |   const [loading, setLoading] = useState(false);146 |   const [error, setError] = useState<string | null>(null);147 | 148 |   const deleteClient = useCallback(async (id: string) => {149 |     try {150 |       setLoading(true);151 |       setError(null);152 | 153 |       const response = await api.clients.delete(id);154 | 155 |       if (response.success) {156 |         return true;157 |       } else {158 |         const errorMessage = response.error || response.message || 'Failed to delete client';159 |         setError(errorMessage);160 |         throw new Error(errorMessage);161 |       }162 |     } catch (err) {163 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';164 |       setError(errorMessage);165 |       throw err;166 |     } finally {167 |       setLoading(false);168 |     }169 |   }, []);170 | 171 |   return {172 |     deleteClient,173 |     loading,174 |     error,175 |   };176 | }177 | 178 | export function useBookings(params?: Record<string, unknown>, options: UseApiOptions = {}) {179 |   return useApi(() => api.bookings.getAll(params), options);180 | }181 | 182 | export function useCreateBooking() {183 |   const [loading, setLoading] = useState(false);184 |   const [error, setError] = useState<string | null>(null);185 | 186 |   const createBooking = useCallback(async (bookingData: Record<string, unknown>) => {187 |     try {188 |       setLoading(true);189 |       setError(null);190 | 191 |       const response = await api.bookings.create(bookingData);192 | 193 |       if (response.success) {194 |         return response.data;195 |       } else {196 |         const errorMessage = response.error || response.message || 'Failed to create booking';197 |         setError(errorMessage);198 |         throw new Error(errorMessage);199 |       }200 |     } catch (err) {201 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';202 |       setError(errorMessage);203 |       throw err;204 |     } finally {205 |       setLoading(false);206 |     }207 |   }, []);208 | 209 |   return {210 |     createBooking,211 |     loading,212 |     error,213 |   };214 | }215 | 216 | export function usePackages(options: UseApiOptions = {}) {217 |   return useApi(() => api.packages.getAll(), options);218 | }219 | 220 | export function useCreatePackage() {221 |   const [loading, setLoading] = useState(false);222 |   const [error, setError] = useState<string | null>(null);223 | 224 |   const createPackage = useCallback(async (packageData: Record<string, unknown>) => {225 |     try {226 |       setLoading(true);227 |       setError(null);228 | 229 |       const response = await api.packages.create(packageData);230 | 231 |       if (response.success) {232 |         return response.data;233 |       } else {234 |         const errorMessage = response.error || response.message || 'Failed to create package';235 |         setError(errorMessage);236 |         throw new Error(errorMessage);237 |       }238 |     } catch (err) {239 |       const errorMessage = err instanceof Error ? err.message : 'An unexpected error occurred';240 |       setError(errorMessage);241 |       throw err;242 |     } finally {243 |       setLoading(false);244 |     }245 |   }, []);246 | 247 |   return {248 |     createPackage,249 |     loading,250 |     error,251 |   };252 | }253 | 254 | export function useDashboardStats(options: UseApiOptions = {}) {255 |   return useApi(() => api.dashboard.getStats(), options);256 | }257 | 258 | export interface GlobalState {259 |   theme: 'light' | 'dark';260 |   language: 'en' | 'es';261 |   sidebarCollapsed: boolean;262 |   notifications: Notification[];263 | }264 | 265 | export interface Notification {266 |   id: string;267 |   type: 'success' | 'warning' | 'error' | 'info';268 |   title: string;269 |   message: string;270 |   timestamp: Date;271 |   read: boolean;272 | }273 | 274 | const initialState: GlobalState = {275 |   theme: 'dark',276 |   language: 'en',277 |   sidebarCollapsed: false,278 |   notifications: [],279 | };280 | 281 | export function useGlobalState() {282 |   const [state, setState] = useState<GlobalState>(initialState);283 | 284 |   const updateState = useCallback((updates: Partial<GlobalState>) => {285 |     setState(prev => ({ ...prev, ...updates }));286 |   }, []);287 | 288 |   const toggleTheme = useCallback(() => {289 |     setState(prev => ({290 |       ...prev,291 |       theme: prev.theme === 'light' ? 'dark' : 'light',292 |     }));293 |   }, []);294 | 295 |   const toggleSidebar = useCallback(() => {296 |     setState(prev => ({297 |       ...prev,298 |       sidebarCollapsed: !prev.sidebarCollapsed,299 |     }));300 |   }, []);301 | 302 |   const addNotification = useCallback((notification: Omit<Notification, 'id' | 'timestamp' | 'read'>) => {303 |     const newNotification: Notification = {304 |       ...notification,305 |       id: Math.random().toString(36).substr(2, 9),306 |       timestamp: new Date(),307 |       read: false,308 |     };309 | 310 |     setState(prev => ({311 |       ...prev,312 |       notifications: [newNotification, ...prev.notifications],313 |     }));314 |   }, []);315 | 316 |   const markNotificationAsRead = useCallback((id: string) => {317 |     setState(prev => ({318 |       ...prev,319 |       notifications: prev.notifications.map(notification =>320 |         notification.id === id ? { ...notification, read: true } : notification321 |       ),322 |     }));323 |   }, []);324 | 325 |   const clearNotifications = useCallback(() => {326 |     setState(prev => ({327 |       ...prev,328 |       notifications: [],329 |     }));330 |   }, []);331 | 332 |   return {333 |     ...state,334 |     updateState,335 |     toggleTheme,336 |     toggleSidebar,337 |     addNotification,338 |     markNotificationAsRead,339 |     clearNotifications,340 |   };341 | }342 | 343 | export function useCache() {344 |   const clearAllCache = useCallback(() => {345 |     api.clients.clearCache();346 |     api.bookings.clearCache();347 |     api.packages.clearCache();348 |     api.dashboard.clearCache();349 |   }, []);350 | 351 |   const clearCacheByKey = useCallback((key: string) => {352 |     if (key.startsWith('clients:')) {353 |       api.clients.clearCache(key);354 |     } else if (key.startsWith('bookings:')) {355 |       api.bookings.clearCache(key);356 |     } else if (key.startsWith('packages:')) {357 |       api.packages.clearCache(key);358 |     } else if (key.startsWith('dashboard:')) {359 |       api.dashboard.clearCache(key);360 |     }361 |   }, []);362 | 363 |   return {364 |     clearAllCache,365 |     clearCacheByKey,366 |   };367 | }368 | 369 | const stateHooks = {370 | 371 |   useApi,372 | 373 |   useClients,374 |   useClient,375 |   useCreateClient,376 |   useUpdateClient,377 |   useDeleteClient,378 | 379 |   useBookings,380 |   useCreateBooking,381 | 382 |   usePackages,383 |   useCreatePackage,384 | 385 |   useDashboardStats,386 | 387 |   useGlobalState,388 |   useCache,389 | };390 | 391 | export default stateHooks;
==================================================END: frontend/lib/state/index.ts==================================================


==================================================FILE: frontend/prisma/schema.prismaSIZE: 34.63 KB==================================================
  1 | generator client {  2 |   provider = "prisma-client-js"  3 | }  4 |   5 | datasource db {  6 |   provider  = "postgresql"  7 |   url       = env("DATABASE_URL")  8 |   directUrl = env("DIRECT_URL")  9 | } 10 |  11 | model User { 12 |   id               String            @id @default(cuid()) 13 |   email            String            @unique 14 |   password         String? 15 |   fullName         String?           @map("full_name") 16 |   avatarUrl        String?           @map("avatar_url") 17 |   role             String?           @default("user") 18 |   phone            String? 19 |   status           String?           @default("active") 20 |   birthDate        DateTime?         @map("birth_date") @db.Date 21 |   birthTime        DateTime?         @map("birth_time") @db.Time(6) 22 |   birthPlace       String?           @map("birth_place") 23 |   question         String? 24 |   language         String?           @default("en") 25 |   adminNotes       String?           @map("admin_notes") 26 |   scheduledDate    DateTime?         @map("scheduled_date") @db.Date 27 |   scheduledTime    DateTime?         @map("scheduled_time") @db.Time(6) 28 |   sessionType      String?           @map("session_type") 29 |   lastReminderSent DateTime?         @map("last_reminder_sent") @db.Timestamptz(6) 30 |   lastBooking      DateTime?         @map("last_booking") @db.Timestamptz(6) 31 |   notes            String? 32 |   createdAt        DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6) 33 |   updatedAt        DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6) 34 |   bookings         Booking[] 35 |   bugComments      BugComment[]      @relation("BugCommentAuthor") 36 |   assignedBugs     BugReport[]       @relation("BugReportAssignee") 37 |   reportedBugs     BugReport[]       @relation("BugReportReporter") 38 |   conversationLogs ConversationLog[] 39 |   otpVerifications OtpVerification[] 40 |   paymentRecords   PaymentRecord[] 41 |   purchases        Purchase[] 42 |   userPackages     UserPackage[] 43 |  44 |   @@index([email], map: "idx_users_email") 45 |   @@index([status], map: "idx_users_status") 46 |   @@index([createdAt], map: "idx_users_created_at") 47 |   @@index([role], map: "idx_users_role") 48 |   @@index([phone], map: "idx_users_phone") 49 |   @@index([language], map: "idx_users_language") 50 |   @@map("users") 51 | } 52 |  53 | model PackageDefinition { 54 |   id                Int             @id @default(autoincrement()) 55 |   name              String          @db.VarChar(255) 56 |   description       String? 57 |   sessionsCount     Int             @map("sessions_count") 58 |   sessionDurationId Int             @map("session_duration_id") 59 |   packageType       String          @map("package_type") @db.VarChar(20) 60 |   maxGroupSize      Int?            @map("max_group_size") 61 |   isActive          Boolean?        @default(true) @map("is_active") 62 |   isPopular         Boolean?        @default(false) @map("is_popular") 63 |   displayOrder      Int?            @default(0) @map("display_order") 64 |   featured          Boolean?        @default(false) @map("featured") 65 |   createdAt         DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6) 66 |   updatedAt         DateTime?       @default(now()) @map("updated_at") @db.Timestamptz(6) 67 |   sessionDuration   SessionDuration @relation("PackageDefinitionSessionDuration", fields: [sessionDurationId], references: [id], onDelete: Cascade, onUpdate: Restrict) 68 |   packagePrices     PackagePrice[] 69 |  70 |   @@index([isActive], map: "idx_package_definitions_active") 71 |   @@index([isPopular], map: "idx_package_definitions_popular") 72 |   @@index([displayOrder], map: "idx_package_definitions_order") 73 |   @@index([featured], map: "idx_package_definitions_featured") 74 |   @@map("package_definitions") 75 | } 76 |  77 | model PackagePrice { 78 |   id                  Int               @id @default(autoincrement()) 79 |   packageDefinitionId Int               @map("package_definition_id") 80 |   currencyId          Int               @map("currency_id") 81 |   price               Decimal           @db.Decimal(10, 2) 82 |   pricingMode         String            @map("pricing_mode") @db.VarChar(20) 83 |   isActive            Boolean?          @default(true) @map("is_active") 84 |   createdAt           DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6) 85 |   updatedAt           DateTime?         @default(now()) @map("updated_at") @db.Timestamptz(6) 86 |   currency            Currency          @relation("PackagePriceCurrency", fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Restrict) 87 |   packageDefinition   PackageDefinition @relation(fields: [packageDefinitionId], references: [id], onDelete: Cascade, onUpdate: Restrict) 88 |   userPackages        UserPackage[] 89 |  90 |   @@unique([packageDefinitionId, currencyId]) 91 |   @@index([currencyId], map: "idx_package_prices_currency") 92 |   @@map("package_prices") 93 | } 94 |  95 | model ScheduleTemplate { 96 |   id                Int              @id @default(autoincrement()) 97 |   dayOfWeek         String           @map("day_of_week") @db.VarChar(20) 98 |   startTime         String           @map("start_time") @db.VarChar(10) 99 |   endTime           String           @map("end_time") @db.VarChar(10)100 |   capacity          Int?             @default(3)101 |   isAvailable       Boolean?         @default(true) @map("is_available")102 |   sessionDurationId Int?             @map("session_duration_id")103 |   autoAvailable     Boolean?         @default(true) @map("auto_available")104 |   createdAt         DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)105 |   updatedAt         DateTime?        @default(now()) @map("updated_at") @db.Timestamptz(6)106 |   scheduleSlots     ScheduleSlot[]107 |   sessionDuration   SessionDuration? @relation("ScheduleTemplateSessionDuration", fields: [sessionDurationId], references: [id], onDelete: Restrict, onUpdate: Restrict)108 | 109 |   @@index([dayOfWeek], map: "idx_schedule_templates_day")110 |   @@map("schedule_templates")111 | }112 | 113 | model ScheduleSlot {114 |   id                 Int              @id @default(autoincrement())115 |   scheduleTemplateId Int              @map("schedule_template_id")116 |   startTime          DateTime         @map("start_time") @db.Timestamptz(6)117 |   endTime            DateTime         @map("end_time") @db.Timestamptz(6)118 |   capacity           Int?             @default(3)119 |   bookedCount        Int?             @default(0) @map("booked_count")120 |   isAvailable        Boolean?         @default(true) @map("is_available")121 |   createdAt          DateTime?        @default(now()) @map("created_at") @db.Timestamptz(6)122 |   updatedAt          DateTime?        @default(now()) @map("updated_at") @db.Timestamptz(6)123 |   bookings           Booking[]124 |   scheduleTemplate   ScheduleTemplate @relation(fields: [scheduleTemplateId], references: [id], onDelete: Cascade, onUpdate: Restrict)125 | 126 |   @@index([startTime], map: "idx_schedule_slots_start_time")127 |   @@index([isAvailable, startTime], map: "idx_schedule_slots_available_start_time")128 |   @@index([endTime], map: "idx_schedule_slots_end_time")129 |   @@index([isAvailable], map: "idx_schedule_slots_available")130 |   @@index([bookedCount], map: "idx_schedule_slots_booked_count")131 |   @@map("schedule_slots")132 | }133 | 134 | model Purchase {135 |   id             Int             @id @default(autoincrement())136 |   userId         String          @map("user_id")137 |   totalAmount    Decimal         @map("total_amount") @db.Decimal(10, 2)138 |   currencyCode   String          @map("currency_code") @db.VarChar(3)139 |   paymentMethod  String          @map("payment_method") @db.VarChar(50)140 |   paymentStatus  String?         @default("pending") @map("payment_status") @db.VarChar(20)141 |   transactionId  String?         @map("transaction_id") @db.VarChar(255)142 |   notes          String?143 |   purchasedAt    DateTime?       @default(now()) @map("purchased_at") @db.Timestamptz(6)144 |   confirmedAt    DateTime?       @map("confirmed_at") @db.Timestamptz(6)145 |   createdAt      DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)146 |   updatedAt      DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)147 |   paymentRecords PaymentRecord[]148 |   user           User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)149 |   userPackages   UserPackage[]150 | 151 |   @@index([userId], map: "idx_purchases_user_id")152 |   @@index([paymentStatus], map: "idx_purchases_payment_status")153 |   @@index([purchasedAt], map: "idx_purchases_purchased_at")154 |   @@index([userId, paymentStatus], map: "idx_purchases_user_status")155 |   @@index([userId, purchasedAt], map: "idx_purchases_user_date")156 |   @@map("purchases")157 | }158 | 159 | model UserPackage {160 |   id             Int          @id @default(autoincrement())161 |   userId         String       @map("user_id")162 |   purchaseId     Int          @map("purchase_id")163 |   packagePriceId Int          @map("package_price_id")164 |   quantity       Int?         @default(1)165 |   sessionsUsed   Int?         @default(0) @map("sessions_used")166 |   isActive       Boolean?     @default(true) @map("is_active")167 |   expiresAt      DateTime?    @map("expires_at") @db.Timestamptz(6)168 |   createdAt      DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)169 |   updatedAt      DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)170 |   bookings       Booking[]171 |   packagePrice   PackagePrice @relation(fields: [packagePriceId], references: [id], onDelete: Cascade, onUpdate: Restrict)172 |   purchase       Purchase     @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Restrict)173 |   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)174 | 175 |   @@index([userId], map: "idx_user_packages_user_id")176 |   @@index([purchaseId], map: "idx_user_packages_purchase_id")177 |   @@index([isActive], map: "idx_user_packages_active")178 |   @@index([userId, isActive], map: "idx_user_packages_user_active")179 |   @@index([expiresAt], map: "idx_user_packages_expires")180 |   @@map("user_packages")181 | }182 | 183 | model Booking {184 |   id              Int          @id @default(autoincrement())185 |   userId          String       @map("user_id")186 |   userPackageId   Int          @map("user_package_id")187 |   scheduleSlotId  Int          @map("schedule_slot_id")188 |   sessionType     String       @map("session_type")189 |   status          String?      @default("confirmed")190 |   notes           String?191 |   cancelledAt     DateTime?    @map("cancelled_at") @db.Timestamptz(6)192 |   cancelledReason String?      @map("cancelled_reason")193 |   reminderSent    Boolean?     @default(false) @map("reminder_sent")194 |   reminderSentAt  DateTime?    @map("reminder_sent_at") @db.Timestamptz(6)195 |   createdAt       DateTime?    @default(now()) @map("created_at") @db.Timestamptz(6)196 |   updatedAt       DateTime?    @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)197 |   scheduleSlot    ScheduleSlot @relation(fields: [scheduleSlotId], references: [id], onDelete: Cascade, onUpdate: Restrict)198 |   user            User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)199 |   userPackage     UserPackage  @relation(fields: [userPackageId], references: [id], onDelete: Cascade, onUpdate: Restrict)200 | 201 |   @@index([userId], map: "idx_bookings_user_id")202 |   @@index([userPackageId], map: "idx_bookings_user_package_id")203 |   @@index([scheduleSlotId], map: "idx_bookings_schedule_slot_id")204 |   @@index([status], map: "idx_bookings_status")205 |   @@index([createdAt], map: "idx_bookings_created_at")206 |   @@index([userId, status], map: "idx_bookings_user_status")207 |   @@index([userId, createdAt], map: "idx_bookings_user_created")208 |   @@map("bookings")209 | }210 | 211 | model PaymentRecord {212 |   id            Int       @id @default(autoincrement())213 |   userId        String    @map("user_id")214 |   purchaseId    Int       @map("purchase_id")215 |   amount        Decimal   @db.Decimal(10, 2)216 |   currencyCode  String    @map("currency_code") @db.VarChar(3)217 |   paymentMethod String    @map("payment_method") @db.VarChar(50)218 |   paymentStatus String?   @default("pending") @map("payment_status") @db.VarChar(20)219 |   transactionId String?   @map("transaction_id") @db.VarChar(255)220 |   notes         String?221 |   paymentDate   DateTime? @map("payment_date") @db.Date222 |   confirmedAt   DateTime? @map("confirmed_at") @db.Timestamptz(6)223 |   createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)224 |   updatedAt     DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)225 |   purchase      Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade, onUpdate: Restrict)226 |   user          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)227 | 228 |   @@index([userId], map: "idx_payment_records_user_id")229 |   @@index([purchaseId], map: "idx_payment_records_purchase_id")230 |   @@index([paymentStatus], map: "idx_payment_records_payment_status")231 |   @@index([paymentMethod], map: "idx_payment_records_payment_method")232 |   @@index([createdAt], map: "idx_payment_records_created_at")233 |   @@map("payment_records")234 | }235 | 236 | model Currency {237 |   id             Int               @id @default(autoincrement())238 |   code           String            @unique @db.VarChar(3)239 |   name           String            @db.VarChar(50)240 |   symbol         String            @db.VarChar(5)241 |   is_default     Boolean?          @default(false)242 |   exchange_rate  Decimal?          @default(1.000000) @db.Decimal(10, 6)243 |   createdAt      DateTime?         @default(now()) @map("created_at") @db.Timestamptz(6)244 |   updatedAt      DateTime?         @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)245 |   packagePrices  PackagePrice[]    @relation("PackagePriceCurrency")246 |   paymentMethods payment_methods[]247 |   rates          Rate[]248 | 249 |   @@map("currencies")250 | }251 | 252 | model SessionDuration {253 |   id                 Int                 @id @default(autoincrement())254 |   name               String              @db.VarChar(100)255 |   duration_minutes   Int256 |   description        String?257 |   isActive           Boolean?            @default(true) @map("is_active")258 |   createdAt          DateTime?           @default(now()) @map("created_at") @db.Timestamptz(6)259 |   updatedAt          DateTime?           @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)260 |   packageDefinitions PackageDefinition[] @relation("PackageDefinitionSessionDuration")261 |   rates              Rate[]262 |   scheduleTemplates  ScheduleTemplate[]  @relation("ScheduleTemplateSessionDuration")263 | 264 |   @@map("session_durations")265 | }266 | 267 | model Rate {268 |   id                     Int             @id @default(autoincrement())269 |   currencyId             Int             @map("currency_id")270 |   sessionDurationId      Int             @map("session_duration_id")271 |   sessionType            String          @map("session_type") @db.VarChar(50)272 |   base_price             Decimal         @db.Decimal(10, 2)273 |   group_discount_percent Decimal?        @default(0) @db.Decimal(5, 2)274 |   min_group_size         Int?            @default(1)275 |   max_group_size         Int?            @default(10)276 |   isActive               Boolean?        @default(true) @map("is_active")277 |   createdAt              DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)278 |   updatedAt              DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)279 |   currency               Currency        @relation(fields: [currencyId], references: [id], onDelete: Cascade, onUpdate: Restrict)280 |   sessionDuration        SessionDuration @relation(fields: [sessionDurationId], references: [id], onDelete: Cascade, onUpdate: Restrict)281 | 282 |   @@unique([currencyId, sessionDurationId, sessionType])283 |   @@map("rates")284 | }285 | 286 | model PaymentMethodConfig {287 |   id                   Int       @id @default(autoincrement())288 |   name                 String    @db.VarChar(100)289 |   type                 String?   @default("custom") @db.VarChar(50)290 |   description          String?291 |   icon                 String?   @db.VarChar(100)292 |   requiresConfirmation Boolean?  @default(false) @map("requires_confirmation")293 |   autoAssignPackage    Boolean?  @default(true) @map("auto_assign_package")294 |   isActive             Boolean?  @default(true) @map("is_active")295 |   createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)296 |   updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)297 |   providerConfig       Json?     @map("provider_config")298 | 299 |   @@index([isActive], map: "idx_payment_method_configs_active")300 |   @@index([name], map: "idx_payment_method_configs_name")301 |   @@index([type], map: "idx_payment_method_configs_type")302 |   @@map("payment_method_configs")303 | }304 | 305 | model EmailTemplate {306 |   id          Int       @id @default(autoincrement())307 |   templateKey String    @unique @map("template_key")308 |   subject     String309 |   body        String310 |   language    String?   @default("en")311 |   createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)312 |   updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)313 | 314 |   @@index([templateKey], map: "idx_email_templates_key")315 |   @@map("email_templates")316 | }317 | 318 | model LogoSettings {319 |   id        Int       @id @default(autoincrement())320 |   type      String?   @default("text")321 |   text      String?   @default("SOULPATH")322 |   imageUrl  String?   @map("image_url")323 |   createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)324 |   updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)325 | 326 |   @@map("logo_settings")327 | }328 | 329 | model Seo {330 |   id          Int       @id @default(autoincrement())331 |   title       String?   @default("SOULPATH - Wellness & Healing")332 |   description String?   @default("Your journey to wellness starts here. Professional wellness services in a peaceful environment.")333 |   keywords    String?   @default("wellness, healing, therapy, meditation, soulpath")334 |   ogImage     String?   @map("og_image")335 |   createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)336 |   updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)337 | 338 |   @@map("seo")339 | }340 | 341 | model Image {342 |   id        Int       @id @default(autoincrement())343 |   name      String344 |   url       String345 |   altText   String?   @map("alt_text")346 |   category  String?   @default("general")347 |   createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)348 |   updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)349 | 350 |   @@map("images")351 | }352 | 353 | model ProfileImage {354 |   id        Int       @id @default(autoincrement())355 |   key       String    @unique356 |   url       String357 |   altText   String?   @map("alt_text")358 |   createdAt DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)359 |   updatedAt DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)360 | 361 |   @@map("profile_images")362 | }363 | 364 | model Content {365 |   id                Int       @id @default(autoincrement())366 |   heroTitleEn       String?   @default("Welcome to SOULPATH") @map("hero_title_en")367 |   heroTitleEs       String?   @default("Bienvenido a SOULPATH") @map("hero_title_es")368 |   heroSubtitleEn    String?   @default("Your journey to wellness starts here") @map("hero_subtitle_en")369 |   heroSubtitleEs    String?   @default("Tu camino al bienestar comienza aquí") @map("hero_subtitle_es")370 |   aboutTitleEn      String?   @default("About Us") @map("about_title_en")371 |   aboutTitleEs      String?   @default("Sobre Nosotros") @map("about_title_es")372 |   aboutContentEn    String?   @default("We are dedicated to helping you achieve your wellness goals.") @map("about_content_en")373 |   aboutContentEs    String?   @default("Estamos dedicados a ayudarte a alcanzar tus metas de bienestar.") @map("about_content_es")374 |   approachTitleEn   String?   @default("Our Approach") @map("approach_title_en")375 |   approachTitleEs   String?   @default("Nuestro Enfoque") @map("approach_title_es")376 |   approachContentEn String?   @default("We use a holistic approach to wellness.") @map("approach_content_en")377 |   approachContentEs String?   @default("Usamos un enfoque holístico para el bienestar.") @map("approach_content_es")378 |   servicesTitleEn   String?   @default("Our Services") @map("services_title_en")379 |   servicesTitleEs   String?   @default("Nuestros Servicios") @map("services_title_es")380 |   servicesContentEn String?   @default("Professional wellness services in a peaceful environment.") @map("services_content_en")381 |   servicesContentEs String?   @default("Servicios profesionales de bienestar en un ambiente pacífico.") @map("services_content_es")382 |   createdAt         DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)383 |   updatedAt         DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)384 | 385 |   @@map("content")386 | }387 | 388 | model Section {389 |   id            Int       @id @default(autoincrement())390 |   sectionId     String    @unique @map("section_id")391 |   type          String    @default("content") @db.VarChar(50)392 |   title         String    @db.VarChar(255)393 |   description   String?394 |   icon          String    @default("Circle") @db.VarChar(50)395 |   component     String    @db.VarChar(100)396 |   order         Int       @default(0)397 |   enabled       Boolean   @default(true)398 |   mobileConfig  Json?     @map("mobile_config")399 |   desktopConfig Json?     @map("desktop_config")400 |   createdAt     DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)401 |   updatedAt     DateTime? @updatedAt @map("updated_at") @db.Timestamptz(6)402 | 403 |   @@index([enabled, order], map: "idx_sections_enabled_order")404 |   @@map("sections")405 | }406 | 407 | model CommunicationConfig {408 |   id                  Int       @id @default(autoincrement())409 |   createdAt           DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)410 |   updatedAt           DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)411 |   email_enabled       Boolean?  @default(true) @map("email_enabled")412 |   brevo_api_key       String?   @default("") @map("brevo_api_key")413 |   sender_email        String?   @default("noreply@soulpath.lat") @map("sender_email")414 |   sender_name         String?   @default("SOULPATH") @map("sender_name")415 |   admin_email         String?   @default("admin@soulpath.lat") @map("admin_email")416 |   sms_enabled         Boolean?  @default(false) @map("sms_enabled")417 |   sms_provider        String?   @default("labsmobile") @map("sms_provider")418 |   labsmobile_username String?   @default("") @map("labsmobile_username")419 |   labsmobile_token    String?   @default("") @map("labsmobile_token")420 |   sms_sender_name     String?   @default("SoulPath") @map("sms_sender_name")421 | 422 |   @@map("communication_config")423 | }424 | 425 | model CommunicationTemplate {426 |   id           Int                                @id @default(autoincrement())427 |   templateKey  String                             @unique @map("template_key")428 |   name         String429 |   description  String?430 |   type         String431 |   category     String?432 |   isActive     Boolean                            @default(true) @map("is_active")433 |   isDefault    Boolean                            @default(false) @map("is_default")434 |   createdAt    DateTime?                          @default(now()) @map("created_at") @db.Timestamptz(6)435 |   updatedAt    DateTime?                          @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)436 |   translations CommunicationTemplateTranslation[]437 | 438 |   @@index([type], map: "idx_communication_templates_type")439 |   @@index([category], map: "idx_communication_templates_category")440 |   @@index([isActive], map: "idx_communication_templates_active")441 |   @@map("communication_templates")442 | }443 | 444 | model CommunicationTemplateTranslation {445 |   id         Int                   @id @default(autoincrement())446 |   templateId Int                   @map("template_id")447 |   language   String448 |   subject    String?449 |   content    String450 |   createdAt  DateTime?             @default(now()) @map("created_at") @db.Timestamptz(6)451 |   updatedAt  DateTime?             @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)452 |   template   CommunicationTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)453 | 454 |   @@unique([templateId, language], map: "idx_template_translations_unique")455 |   @@index([language], map: "idx_template_translations_language")456 |   @@map("communication_template_translations")457 | }458 | 459 | model BugReport {460 |   id          String          @id @default(dbgenerated("(gen_random_uuid())::text"))461 |   title       String          @db.VarChar(255)462 |   description String463 |   screenshot  String?464 |   annotations Json?465 |   status      bug_status?     @default(OPEN)466 |   priority    priority_level? @default(MEDIUM)467 |   category    String?         @db.VarChar(100)468 |   reporterId  String?         @map("reporter_id")469 |   assignedTo  String?         @map("assigned_to")470 |   createdAt   DateTime?       @default(now()) @map("created_at") @db.Timestamptz(6)471 |   updatedAt   DateTime?       @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)472 |   resolvedAt  DateTime?       @map("resolved_at") @db.Timestamptz(6)473 |   archivedAt  DateTime?       @map("archived_at") @db.Timestamptz(6)474 |   comments    BugComment[]475 |   assignee    User?           @relation("BugReportAssignee", fields: [assignedTo], references: [id], onUpdate: Restrict)476 |   reporter    User?           @relation("BugReportReporter", fields: [reporterId], references: [id], onUpdate: Restrict)477 | 478 |   @@index([status], map: "idx_bug_reports_status")479 |   @@index([priority], map: "idx_bug_reports_priority")480 |   @@index([reporterId], map: "idx_bug_reports_reporter")481 |   @@index([assignedTo], map: "idx_bug_reports_assignee")482 |   @@index([createdAt], map: "idx_bug_reports_created")483 |   @@map("bug_reports")484 | }485 | 486 | model BugComment {487 |   id          String    @id @default(dbgenerated("(gen_random_uuid())::text"))488 |   content     String489 |   authorId    String    @map("author_id")490 |   bugReportId String    @map("bug_report_id")491 |   createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)492 |   updatedAt   DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)493 |   author      User      @relation("BugCommentAuthor", fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Restrict)494 |   bugReport   BugReport @relation(fields: [bugReportId], references: [id], onDelete: Cascade, onUpdate: Restrict)495 | 496 |   @@index([bugReportId], map: "idx_bug_comments_bug_report")497 |   @@index([authorId], map: "idx_bug_comments_author")498 |   @@map("bug_comments")499 | }500 | 501 | model group_booking_tiers {502 |   id               Int       @id @default(autoincrement())503 |   name             String    @db.VarChar(100)504 |   min_participants Int505 |   max_participants Int506 |   discount_percent Decimal?  @default(0) @db.Decimal(5, 2)507 |   description      String?508 |   is_active        Boolean?  @default(true)509 |   created_at       DateTime? @default(now()) @db.Timestamptz(6)510 |   updated_at       DateTime? @default(now()) @db.Timestamptz(6)511 | }512 | 513 | model kv_store_f839855f {514 |   key   String @id515 |   value Json516 | }517 | 518 | model MatMax {519 |   id         BigInt    @id @default(autoincrement())520 |   created_at DateTime? @default(now()) @db.Timestamptz(6)521 | }522 | 523 | model payment_methods {524 |   id          Int       @id @default(autoincrement())525 |   name        String    @db.VarChar(100)526 |   description String?527 |   currency_id Int528 |   is_active   Boolean?  @default(true)529 |   created_at  DateTime? @default(now()) @db.Timestamptz(6)530 |   updated_at  DateTime? @default(now()) @db.Timestamptz(6)531 |   currencies  Currency  @relation(fields: [currency_id], references: [id], onDelete: Cascade, onUpdate: Restrict)532 | }533 | 534 | model SmsConfiguration {535 |   id         Int      @id @default(autoincrement())536 |   provider   String   @default("labsmobile")537 |   username   String538 |   tokenApi   String   @map("token_api")539 |   senderName String?  @map("sender_name")540 |   isActive   Boolean  @default(true) @map("is_active")541 |   createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)542 |   updatedAt  DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)543 | 544 |   @@map("sms_configurations")545 | }546 | 547 | model OtpVerification {548 |   id          Int      @id @default(autoincrement())549 |   userId      String?  @map("user_id")550 |   phoneNumber String   @map("phone_number")551 |   countryCode String   @map("country_code")552 |   otpCode     String   @map("otp_code")553 |   isVerified  Boolean  @default(false) @map("is_verified")554 |   expiresAt   DateTime @map("expires_at") @db.Timestamptz(6)555 |   attempts    Int      @default(0)556 |   maxAttempts Int      @default(3) @map("max_attempts")557 |   createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)558 |   updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)559 |   user        User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Restrict)560 | 561 |   @@index([phoneNumber], map: "idx_otp_verifications_phone")562 |   @@index([userId], map: "idx_otp_verifications_user")563 |   @@index([expiresAt], map: "idx_otp_verifications_expires")564 |   @@map("otp_verifications")565 | }566 | 567 | model ExternalAPIConfig {568 |   id             String    @id @default(cuid())569 |   name           String    @unique570 |   provider       String571 |   category       String572 |   apiKey         String?   @map("api_key")573 |   apiSecret      String?   @map("api_secret")574 |   apiUrl         String?   @map("api_url")575 |   webhookUrl     String?   @map("webhook_url")576 |   webhookSecret  String?   @map("webhook_secret")577 |   config         Json?578 |   isActive       Boolean   @default(false) @map("is_active")579 |   testMode       Boolean   @default(true) @map("test_mode")580 |   description    String?581 |   version        String?582 |   rateLimit      Int?      @map("rate_limit")583 |   timeout        Int?      @default(30000)584 |   lastTestedAt   DateTime? @map("last_tested_at") @db.Timestamptz(6)585 |   lastTestResult String?   @map("last_test_result")586 |   healthStatus   String?   @default("unknown") @map("health_status")587 |   createdAt      DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)588 |   updatedAt      DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)589 |   createdBy      String?   @map("created_by")590 |   updatedBy      String?   @map("updated_by")591 | 592 |   @@index([name], map: "idx_external_api_configs_name")593 |   @@index([category], map: "idx_external_api_configs_category")594 |   @@index([isActive], map: "idx_external_api_configs_active")595 |   @@map("external_api_configs")596 | }597 | 598 | model APIConfigAudit {599 |   id          String   @id @default(cuid())600 |   configId    String   @map("config_id")601 |   action      String602 |   oldValues   Json?    @map("old_values")603 |   newValues   Json?    @map("new_values")604 |   performedBy String   @map("performed_by")605 |   ipAddress   String?  @map("ip_address")606 |   userAgent   String?  @map("user_agent")607 |   createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)608 | 609 |   @@index([configId], map: "idx_api_config_audit_config_id")610 |   @@index([performedBy], map: "idx_api_config_audit_performed_by")611 |   @@index([createdAt], map: "idx_api_config_audit_created_at")612 |   @@map("api_config_audits")613 | }614 | 615 | model ConversationLog {616 |   id                  Int            @id @default(autoincrement())617 |   sessionId           String         @map("session_id")618 |   userId              String?        @map("user_id")619 |   userMessage         String         @map("user_message")620 |   botResponse         String?        @map("bot_response")621 |   timestamp           DateTime       @default(now()) @map("timestamp") @db.Timestamptz(6)622 |   rasaIntent          String?        @map("rasa_intent")623 |   rasaConfidence      Decimal?       @map("rasa_confidence") @db.Decimal(5, 4)624 |   rasaEntities        Json?          @map("rasa_entities")625 |   responseGenerator   String         @map("response_generator")626 |   bookingStep         String?        @map("booking_step")627 |   bookingDataSnapshot Json?          @map("booking_data_snapshot")628 |   modelVersion        String?        @map("model_version")629 |   user                User?          @relation(fields: [userId], references: [id])630 |   feedback            UserFeedback[]631 | 632 |   @@index([sessionId], map: "idx_conversation_logs_session_id")633 |   @@index([rasaIntent], map: "idx_conversation_logs_rasa_intent")634 |   @@index([timestamp], map: "idx_conversation_logs_timestamp")635 |   @@map("conversation_logs")636 | }637 | 638 | model UserFeedback {639 |   id                  Int             @id @default(autoincrement())640 |   conversationLogId   Int             @map("conversation_log_id")641 |   sessionId           String          @map("session_id")642 |   rating              Int643 |   comment             String?644 |   createdAt           DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)645 |   reviewedForTraining Boolean         @default(false) @map("reviewed_for_training")646 |   conversationLog     ConversationLog @relation(fields: [conversationLogId], references: [id], onDelete: Cascade)647 | 648 |   @@index([sessionId], map: "idx_user_feedback_session_id")649 |   @@index([rating], map: "idx_user_feedback_rating")650 |   @@map("user_feedback")651 | }652 | 653 | model MlModelPerformance {654 |   id                   Int       @id @default(autoincrement())655 |   modelVersion         String    @unique @map("model_version")656 |   evaluationResults    Json?     @map("evaluation_results")657 |   bookingSuccessRate   Decimal?  @map("booking_success_rate") @db.Decimal(5, 4)658 |   avgConversationTurns Decimal?  @map("avg_conversation_turns") @db.Decimal(5, 2)659 |   deploymentDate       DateTime? @map("deployment_date") @db.Timestamptz(6)660 |   isActiveProduction   Boolean   @default(false) @map("is_active_production")661 |   isActiveAbTest       Boolean   @default(false) @map("is_active_ab_test")662 |   createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)663 | 664 |   @@index([modelVersion], map: "idx_ml_model_performance_model_version")665 |   @@map("ml_model_performance")666 | }667 | 668 | model AbTestExperiment {669 |   id                  Int                @id @default(autoincrement())670 |   experimentName      String             @map("experiment_name")671 |   modelAVersion       String             @map("model_a_version")672 |   modelBVersion       String             @map("model_b_version")673 |   trafficSplit        Decimal            @default(0.50) @map("traffic_split") @db.Decimal(3, 2)674 |   startDate           DateTime           @default(now()) @map("start_date") @db.Timestamptz(6)675 |   endDate             DateTime?          @map("end_date") @db.Timestamptz(6)676 |   status              String             @default("active")677 |   successMetric       String             @map("success_metric")678 |   winningModelVersion String?            @map("winning_model_version")679 |   finalResults        Json?              @map("final_results")680 |   assignments         AbTestAssignment[]681 | 682 |   @@index([status], map: "idx_ab_test_experiments_status")683 |   @@map("ab_test_experiments")684 | }685 | 686 | model AbTestAssignment {687 |   id            Int              @id @default(autoincrement())688 |   experimentId  Int              @map("experiment_id")689 |   sessionId     String           @map("session_id")690 |   assignedModel String           @map("assigned_model")691 |   createdAt     DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)692 |   experiment    AbTestExperiment @relation(fields: [experimentId], references: [id], onDelete: Cascade)693 | 694 |   @@unique([experimentId, sessionId], map: "idx_ab_test_assignments_unique")695 |   @@index([sessionId], map: "idx_ab_test_assignments_session_id")696 |   @@map("ab_test_assignments")697 | }698 | 699 | enum bug_status {700 |   OPEN701 |   IN_PROGRESS702 |   RESOLVED703 |   CLOSED704 |   ARCHIVED705 | }706 | 707 | enum priority {708 |   LOW709 |   MEDIUM710 |   HIGH711 |   CRITICAL712 | }713 | 714 | enum priority_level {715 |   LOW716 |   MEDIUM717 |   HIGH718 |   CRITICAL719 | }
==================================================END: frontend/prisma/schema.prisma==================================================



==================================================
# END OF ULTRA ESSENTIAL CODE
==================================================

# EXPORT SUMMARY:
# - Files Processed: 79
# - Files Excluded: 144
# - Total Size: 0.51 MB
# - Directories Processed: 107
# - Export Date: 2025-09-15T17:50:30.406Z

# FILE TYPE BREAKDOWN:
#   .ts: 58 files
#   .tsx: 20 files
#   .prisma: 1 files

# DIRECTORIES INCLUDED:
#   frontend
#   frontend/app
#   frontend/app/(admin)
#   frontend/app/(admin)/dashboard
#   frontend/app/(client)
#   frontend/app/(client)/account
#   frontend/app/(client)/account/book
#   frontend/app/(client)/account/live-session
#   frontend/app/(client)/account/my-packages
#   frontend/app/(client)/account/packages
#   frontend/app/(client)/account/profile
#   frontend/app/(client)/account/purchase
#   frontend/app/(client)/account/purchase-history
#   frontend/app/(client)/account/sessions
#   frontend/app/api
#   frontend/app/api/analytics
#   frontend/app/api/analytics/performance
#   frontend/app/api/auth
#   frontend/app/api/auth/login
#   frontend/app/api/auth/reset-password
#   frontend/app/api/auth/test-db
#   frontend/app/api/auth/verify
#   frontend/app/api/booking
#   frontend/app/api/bug-reports
#   frontend/app/api/calendly-booking
#   frontend/app/api/chat
#   frontend/app/api/chat/hybrid
#   frontend/app/api/chat/main
#   frontend/app/api/chat/schedule-slots
#   frontend/app/api/chat/simple
#   frontend/app/api/chat/web
#   frontend/app/api/client
#   frontend/app/api/client/bookings
#   frontend/app/api/client/bookings/[id]
#   frontend/app/api/client/bookings/[id]/report
#   frontend/app/api/client/dashboard-stats
#   frontend/app/api/client/live-session
#   frontend/app/api/client/live-session/config
#   frontend/app/api/client/live-session/create-meeting
#   frontend/app/api/client/live-session/upcoming
#   frontend/app/api/client/me
#   frontend/app/api/client/my-bookings
#   frontend/app/api/client/my-packages
#   frontend/app/api/client/packages
#   frontend/app/api/client/payment-methods
#   frontend/app/api/client/purchase
#   frontend/app/api/client/purchase-history
#   frontend/app/api/client/schedule-slots
#   frontend/app/api/content
#   frontend/app/api/debug
#   frontend/app/api/debug/schedule-slots
#   frontend/app/api/email
#   frontend/app/api/email/templates
#   frontend/app/api/feedback
#   frontend/app/api/health
#   frontend/app/api/images
#   frontend/app/api/logo
#   frontend/app/api/ml
#   frontend/app/api/ml/retrain
#   frontend/app/api/orchestrator
#   frontend/app/api/orchestrator/test
#   frontend/app/api/otp
#   frontend/app/api/otp/send
#   frontend/app/api/otp/verify
#   frontend/app/api/packages
#   frontend/app/api/payment-methods
#   frontend/app/api/payment-methods-test
#   frontend/app/api/performance
#   frontend/app/api/redis
#   frontend/app/api/redis-test
#   frontend/app/api/revalidate
#   frontend/app/api/schedule-slots
#   frontend/app/api/schedules
#   frontend/app/api/sections
#   frontend/app/api/seo
#   frontend/app/api/telegram
#   frontend/app/api/telegram/test
#   frontend/app/api/telegram/webhook
#   frontend/app/api/test
#   frontend/app/api/test/db
#   frontend/app/api/test/logging
#   frontend/app/api/test/openrouter
#   frontend/app/api/test/prisma
#   frontend/app/api/test-db
#   frontend/app/api/test-env
#   frontend/app/api/test-openrouter
#   frontend/app/api/test-packages
#   frontend/app/api/test-payment-methods
#   frontend/app/api/whatsapp
#   frontend/app/api/whatsapp/webhook
#   frontend/app/api/whatsapp-business
#   frontend/app/api/whatsapp-business/webhook
#   frontend/app/izipay-demo
#   frontend/app/login
#   frontend/app/packages
#   frontend/app/payment-demo
#   frontend/app/slider
#   frontend/components
#   frontend/hooks
#   frontend/lib
#   frontend/lib/api
#   frontend/lib/config
#   frontend/lib/data
#   frontend/lib/middleware
#   frontend/lib/services
#   frontend/lib/state
#   frontend/prisma

# This file contains only the most critical business logic.
# Perfect for focused code analysis and architecture review.
