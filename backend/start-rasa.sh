#!/bin/bash

# Optimized Rasa server startup script for Docker deployment
set -e

echo "🚀 Starting Rasa server - Docker optimized version $(date)..."

# Change to the rasa directory
cd "$(dirname "$0")/rasa" || {
    echo "❌ Failed to change to rasa directory"
    exit 1
}

echo "📁 Working directory: $(pwd)"

# Load environment from .env if present (e.g., Supabase DATABASE_URL)
if [ -f .env ]; then
    echo "📄 Loading environment from .env"
    set -a
    . ./.env
    set +a
fi

# Activate virtual environment if it exists
if [ -d "rasa_env" ]; then
    echo "🐍 Activating virtual environment..."
    source rasa_env/bin/activate || {
        echo "❌ Failed to activate virtual environment"
        exit 1
    }
fi

# Get port from environment variable (Render requirement)
PORT=${PORT:-5005}
echo "📡 Using port: $PORT"

# Provide sane defaults only where safe; do not force DATABASE_URL to avoid broken placeholders
export POSTGRES_DB=${POSTGRES_DB:-rasa}

# Action endpoint URL default to local actions server unless explicitly provided
export ACTION_ENDPOINT_URL=${ACTION_ENDPOINT_URL:-http://localhost:5055/webhook}

# If DATABASE_URL is set, verify DB connectivity (fallback to in-memory if unreachable)
if [ -n "$DATABASE_URL" ]; then
  # Extract host and port from postgres URL
  DB_HOST=$(printf "%s" "$DATABASE_URL" | sed -E 's#.*://[^@]*@([^:/]+):?([0-9]*)/.*#\1#')
  DB_PORT=$(printf "%s" "$DATABASE_URL" | sed -E 's#.*://[^@]*@([^:/]+):?([0-9]*)/.*#\2#')
  if [ -z "$DB_PORT" ]; then DB_PORT=5432; fi

  if command -v nc >/dev/null 2>&1; then
    if ! nc -z -w 1 "$DB_HOST" "$DB_PORT" >/dev/null 2>&1; then
      echo "⚠️  Database $DB_HOST:$DB_PORT unreachable. Falling back to in-memory tracker store."
      unset DATABASE_URL
    fi
  else
    # Basic TCP probe with bash; may block if firewall drops packets, so keep short
    (echo >/dev/tcp/$DB_HOST/$DB_PORT) >/dev/null 2>&1 || {
      echo "⚠️  Database $DB_HOST:$DB_PORT unreachable. Falling back to in-memory tracker store."
      unset DATABASE_URL
    }
  fi
fi

# Generate a concrete endpoints file using current environment values.
ENDPOINTS_GEN="endpoints.generated.yml"

echo "🧩 Preparing endpoints configuration ($ENDPOINTS_GEN)"
{
  echo "# Autogenerated by start-rasa.sh"
  echo "action_endpoint:"
  echo "  url: \"${ACTION_ENDPOINT_URL}\""
  if [ -n "$DATABASE_URL" ]; then
    echo
    echo "tracker_store:"
    echo "  type: SQL"
    echo "  dialect: postgresql"
    echo "  url: \"${DATABASE_URL}\""
    echo "  pool_size: 10"
    echo "  pool_recycle: 300"
    echo "  echo: false"
  fi
} > "$ENDPOINTS_GEN"

echo "🔗 Action endpoint URL: $ACTION_ENDPOINT_URL"
if [ -n "$DATABASE_URL" ]; then
  echo "🗄️  Tracker DB URL: $DATABASE_URL"
else
  echo "🗄️  No DATABASE_URL set; using in-memory tracker store"
fi

# Find Rasa executable
RASA_CMD=$(which rasa)
if [ -z "$RASA_CMD" ]; then
    RASA_CMD="/usr/local/bin/rasa"
fi

echo "🔧 Using Rasa command: $RASA_CMD"

# Check if Rasa is executable
if [ ! -x "$RASA_CMD" ]; then
    echo "❌ Rasa not found or not executable at $RASA_CMD"
    echo "📦 Available Python packages:"
    pip list | grep rasa || echo "No rasa packages found"
    echo "🐍 Python path: $(which python)"
    echo "📦 Pip path: $(which pip)"
    exit 1
fi
# Also find Python executable inside venv to control warnings via -W flags
PYTHON_CMD=$(which python || true)
if [ -z "$PYTHON_CMD" ]; then
  PYTHON_CMD="python3"
fi


# Set memory optimization environment variables
export TF_CPP_MIN_LOG_LEVEL=2
export TF_FORCE_GPU_ALLOW_GROWTH=true
export OMP_NUM_THREADS=1
export MKL_NUM_THREADS=1
export NUMEXPR_NUM_THREADS=1
export OPENBLAS_NUM_THREADS=1

# Silence SQLAlchemy 2.0 deprecation noise for pin <2.0
export SQLALCHEMY_SILENCE_UBER_WARNING=1

# Silence Python deprecation warnings from third-party libs (pkg_resources, jax, etc.)
export PYTHONWARNINGS=ignore::DeprecationWarning

# Create necessary directories
mkdir -p models logs

# Check if models exist
if [ ! -d "models" ] || [ -z "$(ls -A models/*.tar.gz 2>/dev/null)" ]; then
    echo "🤖 No trained models found, training Rasa model..."
    echo "⚠️ Warning: Training may take several minutes..."
    
    # Train with timeout to prevent hanging
    timeout 1800 $RASA_CMD train --force || {
        echo "⚠️ Training timed out or failed. Starting server without training..."
        echo "📝 Note: You may need to train the model locally and include it in the deployment."
    }
else
    echo "✅ Found existing models, cleaning up old ones to save memory..."
    # Keep only the latest 2 models
    ls -t models/*.tar.gz 2>/dev/null | tail -n +3 | xargs rm -f 2>/dev/null || true
fi

# Verify port is set
if [ -z "$PORT" ]; then
    echo "❌ ERROR: PORT environment variable not set"
    exit 1
fi

echo "🌐 Starting Rasa server on port $PORT with memory optimizations..."
echo "🔧 RASA_CMD: $RASA_CMD"
echo "🔧 PORT: $PORT"
echo "🔧 Environment: ${ENVIRONMENT:-production}"

# Start Rasa server with proper error handling
echo "🚀 Starting Rasa server..."
exec "$PYTHON_CMD" -W ignore::DeprecationWarning -W ignore::PendingDeprecationWarning -m rasa run \
    --enable-api \
    --cors "*" \
    --port "$PORT" \
    -i 0.0.0.0 \
    --credentials credentials.yml \
    --endpoints "$ENDPOINTS_GEN"
